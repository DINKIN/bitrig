commit 36c1b6ec0205d8d06022c9f302a4ad898baefa7d
Author: Dale Rahn <drahn@dalerahn.com>
Date:   Sun Jan 19 01:13:59 2014 -0500

    Arm needs __clear_cache, so provide it.

diff --git a/contrib/compiler-rt/lib/clear_cache.c b/contrib/compiler-rt/lib/clear_cache.c
index b934fd4..b3fd50c 100644
--- a/contrib/compiler-rt/lib/clear_cache.c
+++ b/contrib/compiler-rt/lib/clear_cache.c
@@ -10,10 +10,30 @@
 
 #include "int_lib.h"
 
+
 #if __APPLE__
   #include <libkern/OSCacheControl.h>
 #endif
 
+#if defined(__OpenBSD__) || defined(__Bitrig__)
+# if defined(__arm__) 
+#include <machine/asm.h>
+#include <sys/syscall.h>
+#include <arm/swi.h>
+
+static inline void
+sysarch (int32_t sysarch_id, void *arg) {
+	__asm volatile(" mov r0, %0;"
+	    " mov r1, %1;"
+	    " ldr r12, =%2;"
+	    " swi %3" ::
+	    "r" (sysarch_id), "r" (arg), "i"(SYS_sysarch), "i"(SYS_sysarch|SWI_OS_NETBSD):
+	    "0", "1");
+								    
+}
+# endif
+#endif
+
 /*
  * The compiler generates calls to __clear_cache() when creating 
  * trampoline functions on the stack for use with nested functions.
@@ -23,7 +43,7 @@
 
 void __clear_cache(void* start, void* end)
 {
-#if __i386__ || __x86_64__
+#if defined(__i386__) || defined(__x86_64__)
 /*
  * Intel processors have a unified instruction and data cache
  * so there is nothing to do
@@ -32,6 +52,14 @@ void __clear_cache(void* start, void* end)
     #if __APPLE__
         /* On Darwin, sys_icache_invalidate() provides this functionality */
         sys_icache_invalidate(start, end-start);
+    #elif (defined(__OpenBSD__) || defined(__Bitrig__)) && defined(__arm__)
+    	struct {
+		unsigned int addr;
+		int          len;
+	} s;
+	s.addr = (unsigned int)(start);
+	s.len = (end) - (start);
+	(void) sysarch (0, &s);   
     #else
         compilerrt_abort();
     #endif
diff --git a/lib/libcompiler_rt/Makefile b/lib/libcompiler_rt/Makefile
index 4a843d3..2e5af60 100644
--- a/lib/libcompiler_rt/Makefile
+++ b/lib/libcompiler_rt/Makefile
@@ -125,9 +125,7 @@ SRCF=	absvdi2 \
 	umoddi3 \
 	umodti3
 
-.if ${MACHINE_CPU} != "arm"
 SRCF+=	clear_cache
-.endif
 
 # These are already shipped by libc.a on arm and mips
 .if ${MACHINE_CPU} != "arm" && ${MACHINE_CPU} != "mips"
