commit 082df4079d97f437b9019fa038a0c980d5a7d4f6
Author: Dale Rahn <drahn@dalerahn.com>
Date:   Sat Aug 10 20:56:03 2013 -0400

    FreeBSD LLVM changes to 3.3

diff --git a/contrib/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h b/contrib/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h
index ea6cb27..e6f30a2 100644
--- a/contrib/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h
+++ b/contrib/llvm/include/llvm/CodeGen/FunctionLoweringInfo.h
@@ -115,6 +115,11 @@ public:
   /// there's no other convenient place for it to live right now.
   std::vector<std::pair<MachineInstr*, unsigned> > PHINodesToUpdate;
 
+  /// If the current MBB is a landing pad, the exception pointer and exception
+  /// selector registers are copied into these virtual registers by
+  /// SelectionDAGISel::PrepareEHLandingPad().
+  unsigned ExceptionPointerVirtReg, ExceptionSelectorVirtReg;
+
   explicit FunctionLoweringInfo(const TargetLowering &TLI);
 
   /// set - Initialize this FunctionLoweringInfo with the given Function
diff --git a/contrib/llvm/include/llvm/CodeGen/MachineBasicBlock.h b/contrib/llvm/include/llvm/CodeGen/MachineBasicBlock.h
index 0f2f874..d6f5883 100644
--- a/contrib/llvm/include/llvm/CodeGen/MachineBasicBlock.h
+++ b/contrib/llvm/include/llvm/CodeGen/MachineBasicBlock.h
@@ -296,6 +296,11 @@ public:
   /// is an error to add the same register to the same set more than once.
   void addLiveIn(unsigned Reg)  { LiveIns.push_back(Reg); }
 
+  /// Add PhysReg as live in to this block, and ensure that there is a copy of
+  /// PhysReg to a virtual register of class RC. Return the virtual register
+  /// that is a copy of the live in PhysReg.
+  unsigned addLiveIn(unsigned PhysReg, const TargetRegisterClass *RC);
+
   /// removeLiveIn - Remove the specified register from the live in set.
   ///
   void removeLiveIn(unsigned Reg);
diff --git a/contrib/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp b/contrib/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp
index 73bba69..1e706cc 100644
--- a/contrib/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp
+++ b/contrib/llvm/lib/CodeGen/AsmPrinter/DwarfDebug.cpp
@@ -1624,9 +1624,37 @@ void DwarfDebug::beginFunction(const MachineFunction *MF) {
 }
 
 void DwarfDebug::addScopeVariable(LexicalScope *LS, DbgVariable *Var) {
-//  SmallVector<DbgVariable *, 8> &Vars = ScopeVariables.lookup(LS);
-  ScopeVariables[LS].push_back(Var);
-//  Vars.push_back(Var);
+  SmallVectorImpl<DbgVariable *> &Vars = ScopeVariables[LS];
+  DIVariable DV = Var->getVariable();
+  if (DV.getTag() == dwarf::DW_TAG_arg_variable) {
+    DISubprogram Ctxt(DV.getContext());
+    DIArray Variables = Ctxt.getVariables();
+    // If the variable is a parameter (arg_variable) and this is an optimized
+    // build (the subprogram has a 'variables' list) make sure we keep the
+    // parameters in order. Otherwise we would produce an incorrect function
+    // type with parameters out of order if function parameters were used out of
+    // order or unused (see the call to addScopeVariable in endFunction where
+    // the remaining unused variables (including parameters) are added).
+    if (unsigned NumVariables = Variables.getNumElements()) {
+      // Keep the parameters at the start of the variables list. Search through
+      // current variable list (Vars) and the full function variable list in
+      // lock-step looking for this parameter in the full list to find the
+      // insertion point.
+      SmallVectorImpl<DbgVariable *>::iterator I = Vars.begin();
+      unsigned j = 0;
+      while (I != Vars.end() && j != NumVariables &&
+             Variables.getElement(j) != DV &&
+             (*I)->getVariable().getTag() == dwarf::DW_TAG_arg_variable) {
+        if (Variables.getElement(j) == (*I)->getVariable())
+          ++I;
+        ++j;
+      }
+      Vars.insert(I, Var);
+      return;
+    }
+  }
+
+  Vars.push_back(Var);
 }
 
 // Gather and emit post-function debug information.
diff --git a/contrib/llvm/lib/CodeGen/MachineBasicBlock.cpp b/contrib/llvm/lib/CodeGen/MachineBasicBlock.cpp
index 78e9950..91810bd 100644
--- a/contrib/llvm/lib/CodeGen/MachineBasicBlock.cpp
+++ b/contrib/llvm/lib/CodeGen/MachineBasicBlock.cpp
@@ -19,6 +19,7 @@
 #include "llvm/CodeGen/LiveVariables.h"
 #include "llvm/CodeGen/MachineDominators.h"
 #include "llvm/CodeGen/MachineFunction.h"
+#include "llvm/CodeGen/MachineInstrBuilder.h"
 #include "llvm/CodeGen/MachineLoopInfo.h"
 #include "llvm/CodeGen/MachineRegisterInfo.h"
 #include "llvm/CodeGen/SlotIndexes.h"
@@ -341,6 +342,38 @@ bool MachineBasicBlock::isLiveIn(unsigned Reg) const {
   return I != livein_end();
 }
 
+unsigned
+MachineBasicBlock::addLiveIn(unsigned PhysReg, const TargetRegisterClass *RC) {
+  assert(getParent() && "MBB must be inserted in function");
+  assert(TargetRegisterInfo::isPhysicalRegister(PhysReg) && "Expected physreg");
+  assert(RC && "Register class is required");
+  assert((isLandingPad() || this == &getParent()->front()) &&
+         "Only the entry block and landing pads can have physreg live ins");
+
+  bool LiveIn = isLiveIn(PhysReg);
+  iterator I = SkipPHIsAndLabels(begin()), E = end();
+  MachineRegisterInfo &MRI = getParent()->getRegInfo();
+  const TargetInstrInfo &TII = *getParent()->getTarget().getInstrInfo();
+
+  // Look for an existing copy.
+  if (LiveIn)
+    for (;I != E && I->isCopy(); ++I)
+      if (I->getOperand(1).getReg() == PhysReg) {
+        unsigned VirtReg = I->getOperand(0).getReg();
+        if (!MRI.constrainRegClass(VirtReg, RC))
+          llvm_unreachable("Incompatible live-in register class.");
+        return VirtReg;
+      }
+
+  // No luck, create a virtual register.
+  unsigned VirtReg = MRI.createVirtualRegister(RC);
+  BuildMI(*this, I, DebugLoc(), TII.get(TargetOpcode::COPY), VirtReg)
+    .addReg(PhysReg, RegState::Kill);
+  if (!LiveIn)
+    addLiveIn(PhysReg);
+  return VirtReg;
+}
+
 void MachineBasicBlock::moveBefore(MachineBasicBlock *NewAfter) {
   getParent()->splice(NewAfter, this);
 }
diff --git a/contrib/llvm/lib/CodeGen/PrologEpilogInserter.cpp b/contrib/llvm/lib/CodeGen/PrologEpilogInserter.cpp
index 959dd7d..9487cbd 100644
--- a/contrib/llvm/lib/CodeGen/PrologEpilogInserter.cpp
+++ b/contrib/llvm/lib/CodeGen/PrologEpilogInserter.cpp
@@ -29,6 +29,7 @@
 #include "llvm/CodeGen/MachineFrameInfo.h"
 #include "llvm/CodeGen/MachineInstr.h"
 #include "llvm/CodeGen/MachineLoopInfo.h"
+#include "llvm/CodeGen/MachineModuleInfo.h"
 #include "llvm/CodeGen/MachineRegisterInfo.h"
 #include "llvm/CodeGen/RegisterScavenging.h"
 #include "llvm/IR/InlineAsm.h"
@@ -214,7 +215,8 @@ void PEI::calculateCalleeSavedRegisters(MachineFunction &F) {
   std::vector<CalleeSavedInfo> CSI;
   for (unsigned i = 0; CSRegs[i]; ++i) {
     unsigned Reg = CSRegs[i];
-    if (F.getRegInfo().isPhysRegUsed(Reg)) {
+    // Functions which call __builtin_unwind_init get all their registers saved.
+    if (F.getRegInfo().isPhysRegUsed(Reg) || F.getMMI().callsUnwindInit()) {
       // If the reg is modified, save it!
       CSI.push_back(CalleeSavedInfo(Reg));
     }
diff --git a/contrib/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp b/contrib/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
index 288499a..e096a23 100644
--- a/contrib/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
+++ b/contrib/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
@@ -75,15 +75,12 @@ STATISTIC(NumFastIselDead, "Number of dead insts removed on failure");
 void FastISel::startNewBlock() {
   LocalValueMap.clear();
 
+  // Instructions are appended to FuncInfo.MBB. If the basic block already
+  // contains labels or copies, use the last instruction as the last local
+  // value.
   EmitStartPt = 0;
-
-  // Advance the emit start point past any EH_LABEL instructions.
-  MachineBasicBlock::iterator
-    I = FuncInfo.MBB->begin(), E = FuncInfo.MBB->end();
-  while (I != E && I->getOpcode() == TargetOpcode::EH_LABEL) {
-    EmitStartPt = I;
-    ++I;
-  }
+  if (!FuncInfo.MBB->empty())
+    EmitStartPt = &FuncInfo.MBB->back();
   LastLocalValue = EmitStartPt;
 }
 
diff --git a/contrib/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp b/contrib/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
index 67db211..194aba8 100644
--- a/contrib/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
+++ b/contrib/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
@@ -1910,33 +1910,25 @@ void SelectionDAGBuilder::visitLandingPad(const LandingPadInst &LP) {
 
   SmallVector<EVT, 2> ValueVTs;
   ComputeValueVTs(TLI, LP.getType(), ValueVTs);
+  assert(ValueVTs.size() == 2 && "Only two-valued landingpads are supported");
 
-  // Insert the EXCEPTIONADDR instruction.
-  assert(FuncInfo.MBB->isLandingPad() &&
-         "Call to eh.exception not in landing pad!");
-  SDVTList VTs = DAG.getVTList(TLI.getPointerTy(), MVT::Other);
+  // Get the two live-in registers as SDValues. The physregs have already been
+  // copied into virtual registers.
   SDValue Ops[2];
-  Ops[0] = DAG.getRoot();
-  SDValue Op1 = DAG.getNode(ISD::EXCEPTIONADDR, getCurDebugLoc(), VTs, Ops, 1);
-  SDValue Chain = Op1.getValue(1);
-
-  // Insert the EHSELECTION instruction.
-  VTs = DAG.getVTList(TLI.getPointerTy(), MVT::Other);
-  Ops[0] = Op1;
-  Ops[1] = Chain;
-  SDValue Op2 = DAG.getNode(ISD::EHSELECTION, getCurDebugLoc(), VTs, Ops, 2);
-  Chain = Op2.getValue(1);
-  Op2 = DAG.getSExtOrTrunc(Op2, getCurDebugLoc(), MVT::i32);
-
-  Ops[0] = Op1;
-  Ops[1] = Op2;
+  Ops[0] = DAG.getZExtOrTrunc(
+    DAG.getCopyFromReg(DAG.getEntryNode(), getCurDebugLoc(),
+                       FuncInfo.ExceptionPointerVirtReg, TLI.getPointerTy()),
+    getCurDebugLoc(), ValueVTs[0]);
+  Ops[1] = DAG.getZExtOrTrunc(
+    DAG.getCopyFromReg(DAG.getEntryNode(), getCurDebugLoc(),
+                       FuncInfo.ExceptionSelectorVirtReg, TLI.getPointerTy()),
+    getCurDebugLoc(), ValueVTs[1]);
+
+  // Merge into one.
   SDValue Res = DAG.getNode(ISD::MERGE_VALUES, getCurDebugLoc(),
                             DAG.getVTList(&ValueVTs[0], ValueVTs.size()),
                             &Ops[0], 2);
-
-  std::pair<SDValue, SDValue> RetPair = std::make_pair(Res, Chain);
-  setValue(&LP, RetPair.first);
-  DAG.setRoot(RetPair.second);
+  setValue(&LP, Res);
 }
 
 /// handleSmallSwitchCaseRange - Emit a series of specific tests (suitable for
diff --git a/contrib/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp b/contrib/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
index e21f26e..8b110e3 100644
--- a/contrib/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
+++ b/contrib/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
@@ -827,12 +827,13 @@ void SelectionDAGISel::PrepareEHLandingPad() {
     .addSym(Label);
 
   // Mark exception register as live in.
-  unsigned Reg = TLI.getExceptionPointerRegister();
-  if (Reg) MBB->addLiveIn(Reg);
+  const TargetRegisterClass *PtrRC = TLI.getRegClassFor(TLI.getPointerTy());
+  if (unsigned Reg = TLI.getExceptionPointerRegister())
+    FuncInfo->ExceptionPointerVirtReg = MBB->addLiveIn(Reg, PtrRC);
 
   // Mark exception selector register as live in.
-  Reg = TLI.getExceptionSelectorRegister();
-  if (Reg) MBB->addLiveIn(Reg);
+  if (unsigned Reg = TLI.getExceptionSelectorRegister())
+    FuncInfo->ExceptionSelectorVirtReg = MBB->addLiveIn(Reg, PtrRC);
 }
 
 /// isFoldedOrDeadInstruction - Return true if the specified instruction is
@@ -970,6 +971,8 @@ void SelectionDAGISel::SelectAllBasicBlocks(const Function &Fn) {
     FuncInfo->InsertPt = FuncInfo->MBB->getFirstNonPHI();
 
     // Setup an EH landing-pad block.
+    FuncInfo->ExceptionPointerVirtReg = 0;
+    FuncInfo->ExceptionSelectorVirtReg = 0;
     if (FuncInfo->MBB->isLandingPad())
       PrepareEHLandingPad();
 
diff --git a/contrib/llvm/lib/Support/Unix/Host.inc b/contrib/llvm/lib/Support/Unix/Host.inc
index 726e2fb..7f79db0 100644
--- a/contrib/llvm/lib/Support/Unix/Host.inc
+++ b/contrib/llvm/lib/Support/Unix/Host.inc
@@ -26,6 +26,11 @@
 
 using namespace llvm;
 
+#ifdef __FreeBSD__
+std::string sys::getDefaultTargetTriple() {
+  return LLVM_DEFAULT_TARGET_TRIPLE;
+}
+#else // __FreeBSD__
 static std::string getOSVersion() {
   struct utsname info;
 
@@ -61,3 +66,4 @@ std::string sys::getDefaultTargetTriple() {
 
   return Triple;
 }
+#endif // __FreeBSD__
diff --git a/contrib/llvm/lib/Support/Unix/Memory.inc b/contrib/llvm/lib/Support/Unix/Memory.inc
index 72a8af6..2bb9bf1 100644
--- a/contrib/llvm/lib/Support/Unix/Memory.inc
+++ b/contrib/llvm/lib/Support/Unix/Memory.inc
@@ -325,7 +325,7 @@ void Memory::InvalidateInstructionCache(const void *Addr,
   for (intptr_t Line = StartLine; Line < EndLine; Line += LineSize)
     asm volatile("icbi 0, %0" : : "r"(Line));
   asm volatile("isync");
-#  elif (defined(__arm__) || defined(__aarch64__)) && defined(__GNUC__)
+#  elif (defined(__arm__) || defined(__aarch64__)) && defined(__GNUC__) && !defined(__FreeBSD__)
   // FIXME: Can we safely always call this for __GNUC__ everywhere?
   const char *Start = static_cast<const char *>(Addr);
   const char *End = Start + Len;
diff --git a/contrib/llvm/lib/Target/ARM/ARMFrameLowering.h b/contrib/llvm/lib/Target/ARM/ARMFrameLowering.h
index efa255a..d95a2cb 100644
--- a/contrib/llvm/lib/Target/ARM/ARMFrameLowering.h
+++ b/contrib/llvm/lib/Target/ARM/ARMFrameLowering.h
@@ -27,7 +27,7 @@ protected:
 
 public:
   explicit ARMFrameLowering(const ARMSubtarget &sti)
-    : TargetFrameLowering(StackGrowsDown, sti.getStackAlignment(), 0, 4),
+    : TargetFrameLowering(StackGrowsDown, sti.getStackAlignment(), 0, 8),
       STI(sti) {
   }
 
diff --git a/contrib/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp b/contrib/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp
index 68908ab..09e316c 100644
--- a/contrib/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp
+++ b/contrib/llvm/lib/Target/X86/AsmParser/X86AsmParser.cpp
@@ -2306,25 +2306,25 @@ MatchAndEmitInstruction(SMLoc IDLoc, unsigned &Opcode,
   unsigned Match1, Match2, Match3, Match4;
 
   Match1 = MatchInstructionImpl(Operands, Inst, ErrorInfoIgnore,
-                                isParsingIntelSyntax());
+                                MatchingInlineAsm, isParsingIntelSyntax());
   // If this returned as a missing feature failure, remember that.
   if (Match1 == Match_MissingFeature)
     ErrorInfoMissingFeature = ErrorInfoIgnore;
   Tmp[Base.size()] = Suffixes[1];
   Match2 = MatchInstructionImpl(Operands, Inst, ErrorInfoIgnore,
-                                isParsingIntelSyntax());
+                                MatchingInlineAsm, isParsingIntelSyntax());
   // If this returned as a missing feature failure, remember that.
   if (Match2 == Match_MissingFeature)
     ErrorInfoMissingFeature = ErrorInfoIgnore;
   Tmp[Base.size()] = Suffixes[2];
   Match3 = MatchInstructionImpl(Operands, Inst, ErrorInfoIgnore,
-                                isParsingIntelSyntax());
+                                MatchingInlineAsm, isParsingIntelSyntax());
   // If this returned as a missing feature failure, remember that.
   if (Match3 == Match_MissingFeature)
     ErrorInfoMissingFeature = ErrorInfoIgnore;
   Tmp[Base.size()] = Suffixes[3];
   Match4 = MatchInstructionImpl(Operands, Inst, ErrorInfoIgnore,
-                                isParsingIntelSyntax());
+                                MatchingInlineAsm, isParsingIntelSyntax());
   // If this returned as a missing feature failure, remember that.
   if (Match4 == Match_MissingFeature)
     ErrorInfoMissingFeature = ErrorInfoIgnore;
diff --git a/contrib/llvm/lib/Target/X86/X86InstrInfo.td b/contrib/llvm/lib/Target/X86/X86InstrInfo.td
index 3380d8c..0743701 100644
--- a/contrib/llvm/lib/Target/X86/X86InstrInfo.td
+++ b/contrib/llvm/lib/Target/X86/X86InstrInfo.td
@@ -884,12 +884,12 @@ def PUSHF64    : I<0x9C, RawFrm, (outs), (ins), "pushfq", [], IIC_PUSH_F>,
 
 let Defs = [EDI, ESI, EBP, EBX, EDX, ECX, EAX, ESP], Uses = [ESP],
     mayLoad = 1, neverHasSideEffects = 1, SchedRW = [WriteLoad] in {
-def POPA32   : I<0x61, RawFrm, (outs), (ins), "popa{l|d}", [], IIC_POP_A>,
+def POPA32   : I<0x61, RawFrm, (outs), (ins), "popa{l}", [], IIC_POP_A>,
                Requires<[In32BitMode]>;
 }
 let Defs = [ESP], Uses = [EDI, ESI, EBP, EBX, EDX, ECX, EAX, ESP],
     mayStore = 1, neverHasSideEffects = 1, SchedRW = [WriteStore] in {
-def PUSHA32  : I<0x60, RawFrm, (outs), (ins), "pusha{l|d}", [], IIC_PUSH_A>,
+def PUSHA32  : I<0x60, RawFrm, (outs), (ins), "pusha{l}", [], IIC_PUSH_A>,
                Requires<[In32BitMode]>;
 }
 
@@ -1867,6 +1867,9 @@ def : MnemonicAlias<"pushf",  "pushfl", "att">, Requires<[In32BitMode]>;
 def : MnemonicAlias<"pushf",  "pushfq", "att">, Requires<[In64BitMode]>;
 def : MnemonicAlias<"pushfd", "pushfl", "att">;
 
+def : MnemonicAlias<"popad",   "popa", "intel">, Requires<[In32BitMode]>;
+def : MnemonicAlias<"pushad",  "pusha", "intel">, Requires<[In32BitMode]>;
+
 def : MnemonicAlias<"repe",  "rep",   "att">;
 def : MnemonicAlias<"repz",  "rep",   "att">;
 def : MnemonicAlias<"repnz", "repne", "att">;
@@ -1919,29 +1922,31 @@ def : MnemonicAlias<"fucomip",  "fucompi",  "att">;
 def : MnemonicAlias<"fwait",    "wait",     "att">;
 
 
-class CondCodeAlias<string Prefix,string Suffix, string OldCond, string NewCond>
+class CondCodeAlias<string Prefix,string Suffix, string OldCond, string NewCond,
+                    string VariantName>
   : MnemonicAlias<!strconcat(Prefix, OldCond, Suffix),
-                  !strconcat(Prefix, NewCond, Suffix)>;
+                  !strconcat(Prefix, NewCond, Suffix), VariantName>;
 
 /// IntegerCondCodeMnemonicAlias - This multiclass defines a bunch of
 /// MnemonicAlias's that canonicalize the condition code in a mnemonic, for
 /// example "setz" -> "sete".
-multiclass IntegerCondCodeMnemonicAlias<string Prefix, string Suffix> {
-  def C   : CondCodeAlias<Prefix, Suffix, "c",   "b">;   // setc   -> setb
-  def Z   : CondCodeAlias<Prefix, Suffix, "z" ,  "e">;   // setz   -> sete
-  def NA  : CondCodeAlias<Prefix, Suffix, "na",  "be">;  // setna  -> setbe
-  def NB  : CondCodeAlias<Prefix, Suffix, "nb",  "ae">;  // setnb  -> setae
-  def NC  : CondCodeAlias<Prefix, Suffix, "nc",  "ae">;  // setnc  -> setae
-  def NG  : CondCodeAlias<Prefix, Suffix, "ng",  "le">;  // setng  -> setle
-  def NL  : CondCodeAlias<Prefix, Suffix, "nl",  "ge">;  // setnl  -> setge
-  def NZ  : CondCodeAlias<Prefix, Suffix, "nz",  "ne">;  // setnz  -> setne
-  def PE  : CondCodeAlias<Prefix, Suffix, "pe",  "p">;   // setpe  -> setp
-  def PO  : CondCodeAlias<Prefix, Suffix, "po",  "np">;  // setpo  -> setnp
-
-  def NAE : CondCodeAlias<Prefix, Suffix, "nae", "b">;   // setnae -> setb
-  def NBE : CondCodeAlias<Prefix, Suffix, "nbe", "a">;   // setnbe -> seta
-  def NGE : CondCodeAlias<Prefix, Suffix, "nge", "l">;   // setnge -> setl
-  def NLE : CondCodeAlias<Prefix, Suffix, "nle", "g">;   // setnle -> setg
+multiclass IntegerCondCodeMnemonicAlias<string Prefix, string Suffix,
+                                        string V = ""> {
+  def C   : CondCodeAlias<Prefix, Suffix, "c",   "b",  V>; // setc   -> setb
+  def Z   : CondCodeAlias<Prefix, Suffix, "z" ,  "e",  V>; // setz   -> sete
+  def NA  : CondCodeAlias<Prefix, Suffix, "na",  "be", V>; // setna  -> setbe
+  def NB  : CondCodeAlias<Prefix, Suffix, "nb",  "ae", V>; // setnb  -> setae
+  def NC  : CondCodeAlias<Prefix, Suffix, "nc",  "ae", V>; // setnc  -> setae
+  def NG  : CondCodeAlias<Prefix, Suffix, "ng",  "le", V>; // setng  -> setle
+  def NL  : CondCodeAlias<Prefix, Suffix, "nl",  "ge", V>; // setnl  -> setge
+  def NZ  : CondCodeAlias<Prefix, Suffix, "nz",  "ne", V>; // setnz  -> setne
+  def PE  : CondCodeAlias<Prefix, Suffix, "pe",  "p",  V>; // setpe  -> setp
+  def PO  : CondCodeAlias<Prefix, Suffix, "po",  "np", V>; // setpo  -> setnp
+
+  def NAE : CondCodeAlias<Prefix, Suffix, "nae", "b",  V>; // setnae -> setb
+  def NBE : CondCodeAlias<Prefix, Suffix, "nbe", "a",  V>; // setnbe -> seta
+  def NGE : CondCodeAlias<Prefix, Suffix, "nge", "l",  V>; // setnge -> setl
+  def NLE : CondCodeAlias<Prefix, Suffix, "nle", "g",  V>; // setnle -> setg
 }
 
 // Aliases for set<CC>
@@ -1949,9 +1954,11 @@ defm : IntegerCondCodeMnemonicAlias<"set", "">;
 // Aliases for j<CC>
 defm : IntegerCondCodeMnemonicAlias<"j", "">;
 // Aliases for cmov<CC>{w,l,q}
-defm : IntegerCondCodeMnemonicAlias<"cmov", "w">;
-defm : IntegerCondCodeMnemonicAlias<"cmov", "l">;
-defm : IntegerCondCodeMnemonicAlias<"cmov", "q">;
+defm : IntegerCondCodeMnemonicAlias<"cmov", "w", "att">;
+defm : IntegerCondCodeMnemonicAlias<"cmov", "l", "att">;
+defm : IntegerCondCodeMnemonicAlias<"cmov", "q", "att">;
+// No size suffix for intel-style asm.
+defm : IntegerCondCodeMnemonicAlias<"cmov", "", "intel">;
 
 
 //===----------------------------------------------------------------------===//
diff --git a/contrib/llvm/tools/clang/include/clang/Analysis/Analyses/FormatString.h b/contrib/llvm/tools/clang/include/clang/Analysis/Analyses/FormatString.h
index 4bd989c..05f48c6 100644
--- a/contrib/llvm/tools/clang/include/clang/Analysis/Analyses/FormatString.h
+++ b/contrib/llvm/tools/clang/include/clang/Analysis/Analyses/FormatString.h
@@ -152,6 +152,11 @@ public:
     ObjCObjArg,  // '@'
     ObjCBeg = ObjCObjArg, ObjCEnd = ObjCObjArg,
 
+    // FreeBSD specific specifiers
+    FreeBSDbArg,
+    FreeBSDDArg,
+    FreeBSDrArg,
+
     // GlibC specific specifiers.
     PrintErrno,   // 'm'
 
diff --git a/contrib/llvm/tools/clang/include/clang/Basic/Builtins.def b/contrib/llvm/tools/clang/include/clang/Basic/Builtins.def
index 0a513ef..48bf5db 100644
--- a/contrib/llvm/tools/clang/include/clang/Basic/Builtins.def
+++ b/contrib/llvm/tools/clang/include/clang/Basic/Builtins.def
@@ -70,6 +70,8 @@
 //  f -> this is a libc/libm function without the '__builtin_' prefix. It can
 //       be followed by ':headername:' to state which header this function
 //       comes from.
+//  i -> this is a runtime library implemented function without the
+//       '__builtin_' prefix. It will be implemented in compiter-rt or libgcc.
 //  p:N: -> this is a printf-like function whose Nth argument is the format
 //          string.
 //  P:N: -> similar to the p:N: attribute, but the function is like vprintf
diff --git a/contrib/llvm/tools/clang/include/clang/Basic/Builtins.h b/contrib/llvm/tools/clang/include/clang/Basic/Builtins.h
index 3b88e15..cfcbcdb 100644
--- a/contrib/llvm/tools/clang/include/clang/Basic/Builtins.h
+++ b/contrib/llvm/tools/clang/include/clang/Basic/Builtins.h
@@ -128,6 +128,13 @@ public:
     return strchr(GetRecord(ID).Attributes, 'f') != 0;
   }
 
+  /// \brief Determines whether this builtin is a predefined compiler-rt/libgcc
+  /// function, such as "__clear_cache", where we know the signature a
+  /// priori.
+  bool isPredefinedRuntimeFunction(unsigned ID) const {
+    return strchr(GetRecord(ID).Attributes, 'i') != 0;
+  }
+
   /// \brief Determines whether this builtin has custom typechecking.
   bool hasCustomTypechecking(unsigned ID) const {
     return strchr(GetRecord(ID).Attributes, 't') != 0;
diff --git a/contrib/llvm/tools/clang/include/clang/Basic/BuiltinsAArch64.def b/contrib/llvm/tools/clang/include/clang/Basic/BuiltinsAArch64.def
index 9e9f6d0..768e4bb 100644
--- a/contrib/llvm/tools/clang/include/clang/Basic/BuiltinsAArch64.def
+++ b/contrib/llvm/tools/clang/include/clang/Basic/BuiltinsAArch64.def
@@ -15,4 +15,4 @@
 // The format of this database matches clang/Basic/Builtins.def.
 
 // In libgcc
-BUILTIN(__clear_cache, "vv*v*", "")
+BUILTIN(__clear_cache, "vv*v*", "i")
diff --git a/contrib/llvm/tools/clang/include/clang/Basic/BuiltinsARM.def b/contrib/llvm/tools/clang/include/clang/Basic/BuiltinsARM.def
index 888e529..f1e3dfc 100644
--- a/contrib/llvm/tools/clang/include/clang/Basic/BuiltinsARM.def
+++ b/contrib/llvm/tools/clang/include/clang/Basic/BuiltinsARM.def
@@ -15,7 +15,7 @@
 // The format of this database matches clang/Basic/Builtins.def.
 
 // In libgcc
-BUILTIN(__clear_cache, "v.", "")
+BUILTIN(__clear_cache, "v.", "i")
 BUILTIN(__builtin_thread_pointer, "v*", "")
 
 // Saturating arithmetic
diff --git a/contrib/llvm/tools/clang/include/clang/Basic/LangOptions.def b/contrib/llvm/tools/clang/include/clang/Basic/LangOptions.def
index b17dfbc..2a3a26a 100644
--- a/contrib/llvm/tools/clang/include/clang/Basic/LangOptions.def
+++ b/contrib/llvm/tools/clang/include/clang/Basic/LangOptions.def
@@ -84,6 +84,7 @@ LANGOPT(TraditionalCPP    , 1, 0, "traditional CPP emulation")
 LANGOPT(RTTI              , 1, 1, "run-time type information")
 LANGOPT(MSBitfields       , 1, 0, "Microsoft-compatible structure layout")
 LANGOPT(Freestanding, 1, 0, "freestanding implementation")
+LANGOPT(FormatExtensions  , 1, 0, "FreeBSD format extensions")
 LANGOPT(NoBuiltin         , 1, 0, "disable builtin functions")
 
 BENIGN_LANGOPT(ThreadsafeStatics , 1, 1, "thread-safe static initializers")
diff --git a/contrib/llvm/tools/clang/include/clang/Driver/Options.td b/contrib/llvm/tools/clang/include/clang/Driver/Options.td
index 3a5358a..e0ce94d 100644
--- a/contrib/llvm/tools/clang/include/clang/Driver/Options.td
+++ b/contrib/llvm/tools/clang/include/clang/Driver/Options.td
@@ -470,6 +470,8 @@ def fno_rewrite_includes : Flag<["-"], "fno-rewrite-includes">, Group<f_Group>;
 
 def ffreestanding : Flag<["-"], "ffreestanding">, Group<f_Group>, Flags<[CC1Option]>,
   HelpText<"Assert that the compilation takes place in a freestanding environment">;
+def fformat_extensions: Flag<["-"], "fformat-extensions">, Group<f_Group>, Flags<[CC1Option]>,
+  HelpText<"Enable FreeBSD kernel specific format string extensions">;
 def fgnu_keywords : Flag<["-"], "fgnu-keywords">, Group<f_Group>, Flags<[CC1Option]>,
   HelpText<"Allow GNU-extension keywords regardless of language standard">;
 def fgnu89_inline : Flag<["-"], "fgnu89-inline">, Group<f_Group>, Flags<[CC1Option]>,
diff --git a/contrib/llvm/tools/clang/lib/Analysis/FormatString.cpp b/contrib/llvm/tools/clang/lib/Analysis/FormatString.cpp
index ad0dce4..9dcd422 100644
--- a/contrib/llvm/tools/clang/lib/Analysis/FormatString.cpp
+++ b/contrib/llvm/tools/clang/lib/Analysis/FormatString.cpp
@@ -521,6 +521,11 @@ const char *ConversionSpecifier::toString() const {
   // Objective-C specific specifiers.
   case ObjCObjArg: return "@";
 
+  // FreeBSD specific specifiers.
+  case FreeBSDbArg: return "b";
+  case FreeBSDDArg: return "D";
+  case FreeBSDrArg: return "r";
+
   // GlibC specific specifiers.
   case PrintErrno: return "m";
   }
@@ -599,6 +604,7 @@ bool FormatSpecifier::hasValidLengthModifier(const TargetInfo &Target) const {
         case ConversionSpecifier::xArg:
         case ConversionSpecifier::XArg:
         case ConversionSpecifier::nArg:
+        case ConversionSpecifier::FreeBSDrArg:
           return true;
         default:
           return false;
@@ -627,6 +633,7 @@ bool FormatSpecifier::hasValidLengthModifier(const TargetInfo &Target) const {
         case ConversionSpecifier::nArg:
         case ConversionSpecifier::cArg:
         case ConversionSpecifier::sArg:
+        case ConversionSpecifier::FreeBSDrArg:
         case ConversionSpecifier::ScanListArg:
           return true;
         default:
@@ -730,6 +737,9 @@ bool FormatSpecifier::hasStandardConversionSpecifier(const LangOptions &LangOpt)
     case ConversionSpecifier::SArg:
       return LangOpt.ObjC1 || LangOpt.ObjC2;
     case ConversionSpecifier::InvalidSpecifier:
+    case ConversionSpecifier::FreeBSDbArg:
+    case ConversionSpecifier::FreeBSDDArg:
+    case ConversionSpecifier::FreeBSDrArg:
     case ConversionSpecifier::PrintErrno:
     case ConversionSpecifier::DArg:
     case ConversionSpecifier::OArg:
diff --git a/contrib/llvm/tools/clang/lib/Analysis/PrintfFormatString.cpp b/contrib/llvm/tools/clang/lib/Analysis/PrintfFormatString.cpp
index 8f151b9..b9bde0a 100644
--- a/contrib/llvm/tools/clang/lib/Analysis/PrintfFormatString.cpp
+++ b/contrib/llvm/tools/clang/lib/Analysis/PrintfFormatString.cpp
@@ -198,10 +198,25 @@ static PrintfSpecifierResult ParsePrintfSpecifier(FormatStringHandler &H,
     case '@': k = ConversionSpecifier::ObjCObjArg; break;
     // Glibc specific.
     case 'm': k = ConversionSpecifier::PrintErrno; break;
+    // FreeBSD format extensions
+    case 'b':
+      if (LO.FormatExtensions)
+        k = ConversionSpecifier::FreeBSDbArg; // int followed by char *
+      break;
+    case 'r':
+      if (LO.FormatExtensions)
+        k = ConversionSpecifier::FreeBSDrArg;
+      break;
+    case 'y':
+      if (LO.FormatExtensions)
+        k = ConversionSpecifier::iArg;
+      break;
     // Apple-specific
     case 'D':
       if (Target.getTriple().isOSDarwin())
         k = ConversionSpecifier::DArg;
+      else if (LO.FormatExtensions)
+        k = ConversionSpecifier::FreeBSDDArg; // u_char * followed by char *
       break;
     case 'O':
       if (Target.getTriple().isOSDarwin())
@@ -216,6 +231,10 @@ static PrintfSpecifierResult ParsePrintfSpecifier(FormatStringHandler &H,
   FS.setConversionSpecifier(CS);
   if (CS.consumesDataArgument() && !FS.usesPositionalArg())
     FS.setArgIndex(argIndex++);
+  // FreeBSD extension
+  if (k == ConversionSpecifier::FreeBSDbArg ||
+      k == ConversionSpecifier::FreeBSDDArg)
+    argIndex++;
 
   if (k == ConversionSpecifier::InvalidSpecifier) {
     // Assume the conversion takes one argument.
@@ -597,6 +616,7 @@ bool PrintfSpecifier::hasValidPlusPrefix() const {
   case ConversionSpecifier::GArg:
   case ConversionSpecifier::aArg:
   case ConversionSpecifier::AArg:
+  case ConversionSpecifier::FreeBSDrArg:
     return true;
 
   default:
@@ -622,6 +642,7 @@ bool PrintfSpecifier::hasValidAlternativeForm() const {
   case ConversionSpecifier::FArg:
   case ConversionSpecifier::gArg:
   case ConversionSpecifier::GArg:
+  case ConversionSpecifier::FreeBSDrArg:
     return true;
 
   default:
diff --git a/contrib/llvm/tools/clang/lib/Basic/Targets.cpp b/contrib/llvm/tools/clang/lib/Basic/Targets.cpp
index a622a11..fd7cdba 100644
--- a/contrib/llvm/tools/clang/lib/Basic/Targets.cpp
+++ b/contrib/llvm/tools/clang/lib/Basic/Targets.cpp
@@ -3533,8 +3533,8 @@ class ARMTargetInfo : public TargetInfo {
     // the kernel which on armv6 and newer uses ldrex and strex. The net result
     // is that if we assume the kernel is at least as recent as the hardware,
     // it is safe to use atomic instructions on armv6 and newer.
-    if (T.getOS() != llvm::Triple::Linux)
-     return false;
+    if (T.getOS() != llvm::Triple::Linux && T.getOS() != llvm::Triple::FreeBSD)
+      return false;
     StringRef ArchName = T.getArchName();
     if (T.getArch() == llvm::Triple::arm) {
       if (!ArchName.startswith("armv"))
diff --git a/contrib/llvm/tools/clang/lib/Basic/Version.cpp b/contrib/llvm/tools/clang/lib/Basic/Version.cpp
index c63c97f..36be059 100644
--- a/contrib/llvm/tools/clang/lib/Basic/Version.cpp
+++ b/contrib/llvm/tools/clang/lib/Basic/Version.cpp
@@ -36,7 +36,7 @@ std::string getClangRepositoryPath() {
 
   // If the SVN_REPOSITORY is empty, try to use the SVN keyword. This helps us
   // pick up a tag in an SVN export, for example.
-  static StringRef SVNRepository("$URL: https://llvm.org/svn/llvm-project/cfe/tags/RELEASE_33/final/lib/Basic/Version.cpp $");
+  static StringRef SVNRepository("$URL: http://llvm.org/svn/llvm-project/cfe/tags/RELEASE_33/final/lib/Basic/Version.cpp $");
   if (URL.empty()) {
     URL = SVNRepository.slice(SVNRepository.find(':'),
                               SVNRepository.find("/lib/Basic"));
@@ -124,8 +124,10 @@ std::string getClangFullVersion() {
   OS << "clang version " CLANG_VERSION_STRING " "
      << getClangFullRepositoryVersion();
 
+#ifdef CLANG_VENDOR_SUFFIX
+  OS << CLANG_VENDOR_SUFFIX;
+#elif defined(CLANG_VENDOR)
   // If vendor supplied, include the base LLVM version as well.
-#ifdef CLANG_VENDOR
   OS << " (based on LLVM " << PACKAGE_VERSION << ")";
 #endif
 
diff --git a/contrib/llvm/tools/clang/lib/CodeGen/CGAtomic.cpp b/contrib/llvm/tools/clang/lib/CodeGen/CGAtomic.cpp
index 0b48a5c..1fc4f94 100644
--- a/contrib/llvm/tools/clang/lib/CodeGen/CGAtomic.cpp
+++ b/contrib/llvm/tools/clang/lib/CodeGen/CGAtomic.cpp
@@ -15,6 +15,7 @@
 #include "CGCall.h"
 #include "CodeGenModule.h"
 #include "clang/AST/ASTContext.h"
+#include "llvm/ADT/StringExtras.h"
 #include "llvm/IR/DataLayout.h"
 #include "llvm/IR/Intrinsics.h"
 #include "llvm/IR/Operator.h"
@@ -317,6 +318,21 @@ EmitValToTemp(CodeGenFunction &CGF, Expr *E) {
   return DeclPtr;
 }
 
+static void
+AddDirectArgument(CodeGenFunction &CGF, CallArgList &Args,
+                  bool UseOptimizedLibcall, llvm::Value *Val, QualType ValTy) {
+  if (UseOptimizedLibcall) {
+    // Load value and pass it to the function directly.
+    unsigned Align = CGF.getContext().getTypeAlignInChars(ValTy).getQuantity();
+    Val = CGF.EmitLoadOfScalar(Val, false, Align, ValTy);
+    Args.add(RValue::get(Val), ValTy);
+  } else {
+    // Non-optimized functions always take a reference.
+    Args.add(RValue::get(CGF.EmitCastToVoidPtr(Val)),
+                         CGF.getContext().VoidPtrTy);
+  }
+}
+
 RValue CodeGenFunction::EmitAtomicExpr(AtomicExpr *E, llvm::Value *Dest) {
   QualType AtomicTy = E->getPtr()->getType()->getPointeeType();
   QualType MemTy = AtomicTy;
@@ -424,67 +440,137 @@ RValue CodeGenFunction::EmitAtomicExpr(AtomicExpr *E, llvm::Value *Dest) {
 
   // Use a library call.  See: http://gcc.gnu.org/wiki/Atomic/GCCMM/LIbrary .
   if (UseLibcall) {
+    bool UseOptimizedLibcall = false;
+    switch (E->getOp()) {
+    case AtomicExpr::AO__c11_atomic_fetch_add:
+    case AtomicExpr::AO__atomic_fetch_add:
+    case AtomicExpr::AO__c11_atomic_fetch_and:
+    case AtomicExpr::AO__atomic_fetch_and:
+    case AtomicExpr::AO__c11_atomic_fetch_or:
+    case AtomicExpr::AO__atomic_fetch_or:
+    case AtomicExpr::AO__c11_atomic_fetch_sub:
+    case AtomicExpr::AO__atomic_fetch_sub:
+    case AtomicExpr::AO__c11_atomic_fetch_xor:
+    case AtomicExpr::AO__atomic_fetch_xor:
+      // For these, only library calls for certain sizes exist.
+      UseOptimizedLibcall = true;
+      break;
+    default:
+      // Only use optimized library calls for sizes for which they exist.
+      if (Size == 1 || Size == 2 || Size == 4 || Size == 8)
+        UseOptimizedLibcall = true;
+      break;
+    }
 
-    SmallVector<QualType, 5> Params;
     CallArgList Args;
-    // Size is always the first parameter
-    Args.add(RValue::get(llvm::ConstantInt::get(SizeTy, Size)),
-             getContext().getSizeType());
-    // Atomic address is always the second parameter
+    if (!UseOptimizedLibcall) {
+      // For non-optimized library calls, the size is the first parameter
+      Args.add(RValue::get(llvm::ConstantInt::get(SizeTy, Size)),
+               getContext().getSizeType());
+    }
+    // Atomic address is the first or second parameter
     Args.add(RValue::get(EmitCastToVoidPtr(Ptr)),
              getContext().VoidPtrTy);
 
-    const char* LibCallName;
-    QualType RetTy = getContext().VoidTy;
+    std::string LibCallName;
+    QualType RetTy;
+    bool HaveRetTy = false;
     switch (E->getOp()) {
     // There is only one libcall for compare an exchange, because there is no
     // optimisation benefit possible from a libcall version of a weak compare
     // and exchange.
-    // bool __atomic_compare_exchange(size_t size, void *obj, void *expected,
+    // bool __atomic_compare_exchange(size_t size, void *mem, void *expected,
     //                                void *desired, int success, int failure)
+    // bool __atomic_compare_exchange_N(T *mem, T *expected, T desired,
+    //                                  int success, int failure)
     case AtomicExpr::AO__c11_atomic_compare_exchange_weak:
     case AtomicExpr::AO__c11_atomic_compare_exchange_strong:
     case AtomicExpr::AO__atomic_compare_exchange:
     case AtomicExpr::AO__atomic_compare_exchange_n:
       LibCallName = "__atomic_compare_exchange";
       RetTy = getContext().BoolTy;
+      HaveRetTy = true;
       Args.add(RValue::get(EmitCastToVoidPtr(Val1)),
                getContext().VoidPtrTy);
-      Args.add(RValue::get(EmitCastToVoidPtr(Val2)),
-               getContext().VoidPtrTy);
+      AddDirectArgument(*this, Args, UseOptimizedLibcall, Val2, MemTy);
       Args.add(RValue::get(Order),
                getContext().IntTy);
       Order = OrderFail;
       break;
     // void __atomic_exchange(size_t size, void *mem, void *val, void *return,
     //                        int order)
+    // T __atomic_exchange_N(T *mem, T val, int order)
     case AtomicExpr::AO__c11_atomic_exchange:
     case AtomicExpr::AO__atomic_exchange_n:
     case AtomicExpr::AO__atomic_exchange:
       LibCallName = "__atomic_exchange";
-      Args.add(RValue::get(EmitCastToVoidPtr(Val1)),
-               getContext().VoidPtrTy);
-      Args.add(RValue::get(EmitCastToVoidPtr(Dest)),
-               getContext().VoidPtrTy);
+      AddDirectArgument(*this, Args, UseOptimizedLibcall, Val1, MemTy);
       break;
     // void __atomic_store(size_t size, void *mem, void *val, int order)
+    // void __atomic_store_N(T *mem, T val, int order)
     case AtomicExpr::AO__c11_atomic_store:
     case AtomicExpr::AO__atomic_store:
     case AtomicExpr::AO__atomic_store_n:
       LibCallName = "__atomic_store";
-      Args.add(RValue::get(EmitCastToVoidPtr(Val1)),
-               getContext().VoidPtrTy);
+      RetTy = getContext().VoidTy;
+      HaveRetTy = true;
+      AddDirectArgument(*this, Args, UseOptimizedLibcall, Val1, MemTy);
       break;
     // void __atomic_load(size_t size, void *mem, void *return, int order)
+    // T __atomic_load_N(T *mem, int order)
     case AtomicExpr::AO__c11_atomic_load:
     case AtomicExpr::AO__atomic_load:
     case AtomicExpr::AO__atomic_load_n:
       LibCallName = "__atomic_load";
-      Args.add(RValue::get(EmitCastToVoidPtr(Dest)),
-               getContext().VoidPtrTy);
+      break;
+    // T __atomic_fetch_add_N(T *mem, T val, int order)
+    case AtomicExpr::AO__c11_atomic_fetch_add:
+    case AtomicExpr::AO__atomic_fetch_add:
+      LibCallName = "__atomic_fetch_add";
+      AddDirectArgument(*this, Args, UseOptimizedLibcall, Val1, MemTy);
+      break;
+    // T __atomic_fetch_and_N(T *mem, T val, int order)
+    case AtomicExpr::AO__c11_atomic_fetch_and:
+    case AtomicExpr::AO__atomic_fetch_and:
+      LibCallName = "__atomic_fetch_and";
+      AddDirectArgument(*this, Args, UseOptimizedLibcall, Val1, MemTy);
+      break;
+    // T __atomic_fetch_or_N(T *mem, T val, int order)
+    case AtomicExpr::AO__c11_atomic_fetch_or:
+    case AtomicExpr::AO__atomic_fetch_or:
+      LibCallName = "__atomic_fetch_or";
+      AddDirectArgument(*this, Args, UseOptimizedLibcall, Val1, MemTy);
+      break;
+    // T __atomic_fetch_sub_N(T *mem, T val, int order)
+    case AtomicExpr::AO__c11_atomic_fetch_sub:
+    case AtomicExpr::AO__atomic_fetch_sub:
+      LibCallName = "__atomic_fetch_sub";
+      AddDirectArgument(*this, Args, UseOptimizedLibcall, Val1, MemTy);
+      break;
+    // T __atomic_fetch_xor_N(T *mem, T val, int order)
+    case AtomicExpr::AO__c11_atomic_fetch_xor:
+    case AtomicExpr::AO__atomic_fetch_xor:
+      LibCallName = "__atomic_fetch_xor";
+      AddDirectArgument(*this, Args, UseOptimizedLibcall, Val1, MemTy);
       break;
     default: return EmitUnsupportedRValue(E, "atomic library call");
     }
+
+    // Optimized functions have the size in their name.
+    if (UseOptimizedLibcall)
+      LibCallName += "_" + llvm::utostr(Size);
+    // By default, assume we return a value of the atomic type.
+    if (!HaveRetTy) {
+      if (UseOptimizedLibcall) {
+        // Value is returned directly.
+        RetTy = MemTy;
+      } else {
+        // Value is returned through parameter before the order.
+        RetTy = getContext().VoidTy;
+        Args.add(RValue::get(EmitCastToVoidPtr(Dest)),
+                 getContext().VoidPtrTy);
+      }
+    }
     // order is always the last parameter
     Args.add(RValue::get(Order),
              getContext().IntTy);
@@ -495,7 +581,7 @@ RValue CodeGenFunction::EmitAtomicExpr(AtomicExpr *E, llvm::Value *Dest) {
     llvm::FunctionType *FTy = CGM.getTypes().GetFunctionType(FuncInfo);
     llvm::Constant *Func = CGM.CreateRuntimeFunction(FTy, LibCallName);
     RValue Res = EmitCall(FuncInfo, Func, ReturnValueSlot(), Args);
-    if (E->isCmpXChg())
+    if (!RetTy->isVoidType())
       return Res;
     if (E->getType()->isVoidType())
       return RValue::get(0);
diff --git a/contrib/llvm/tools/clang/lib/Driver/Driver.cpp b/contrib/llvm/tools/clang/lib/Driver/Driver.cpp
index 1dbbc9a..b541a55 100644
--- a/contrib/llvm/tools/clang/lib/Driver/Driver.cpp
+++ b/contrib/llvm/tools/clang/lib/Driver/Driver.cpp
@@ -723,7 +723,7 @@ bool Driver::HandleImmediateArgs(const Compilation &C) {
       break;
 
     case llvm::Triple::x86_64:
-      llvm::outs() << "x86_64" << "\n";
+      llvm::outs() << "." << "\n";
       break;
 
     case llvm::Triple::ppc64:
diff --git a/contrib/llvm/tools/clang/lib/Driver/Tools.cpp b/contrib/llvm/tools/clang/lib/Driver/Tools.cpp
index aba1fe4..26b69f3 100644
--- a/contrib/llvm/tools/clang/lib/Driver/Tools.cpp
+++ b/contrib/llvm/tools/clang/lib/Driver/Tools.cpp
@@ -2754,6 +2754,7 @@ void Clang::ConstructJob(Compilation &C, const JobAction &JA,
 
   // Forward -f (flag) options which we can pass directly.
   Args.AddLastArg(CmdArgs, options::OPT_femit_all_decls);
+  Args.AddLastArg(CmdArgs, options::OPT_fformat_extensions);
   Args.AddLastArg(CmdArgs, options::OPT_fheinous_gnu_extensions);
   Args.AddLastArg(CmdArgs, options::OPT_flimit_debug_info);
   Args.AddLastArg(CmdArgs, options::OPT_fno_limit_debug_info);
diff --git a/contrib/llvm/tools/clang/lib/Frontend/CompilerInvocation.cpp b/contrib/llvm/tools/clang/lib/Frontend/CompilerInvocation.cpp
index 42ea96f..8dd2cb6 100644
--- a/contrib/llvm/tools/clang/lib/Frontend/CompilerInvocation.cpp
+++ b/contrib/llvm/tools/clang/lib/Frontend/CompilerInvocation.cpp
@@ -1241,6 +1241,7 @@ static void ParseLangArgs(LangOptions &Opts, ArgList &Args, InputKind IK,
   Opts.ShortWChar = Args.hasArg(OPT_fshort_wchar);
   Opts.ShortEnums = Args.hasArg(OPT_fshort_enums);
   Opts.Freestanding = Args.hasArg(OPT_ffreestanding);
+  Opts.FormatExtensions = Args.hasArg(OPT_fformat_extensions);
   Opts.NoBuiltin = Args.hasArg(OPT_fno_builtin) || Opts.Freestanding;
   Opts.AssumeSaneOperatorNew = !Args.hasArg(OPT_fno_assume_sane_operator_new);
   Opts.HeinousExtensions = Args.hasArg(OPT_fheinous_gnu_extensions);
diff --git a/contrib/llvm/tools/clang/lib/Frontend/InitHeaderSearch.cpp b/contrib/llvm/tools/clang/lib/Frontend/InitHeaderSearch.cpp
index f4ca4d4..fb9c182 100644
--- a/contrib/llvm/tools/clang/lib/Frontend/InitHeaderSearch.cpp
+++ b/contrib/llvm/tools/clang/lib/Frontend/InitHeaderSearch.cpp
@@ -14,6 +14,7 @@
 #include "clang/Frontend/Utils.h"
 #include "clang/Basic/FileManager.h"
 #include "clang/Basic/LangOptions.h"
+#include "clang/Basic/Version.h"
 #include "clang/Config/config.h" // C_INCLUDE_DIRS
 #include "clang/Lex/HeaderSearch.h"
 #include "clang/Lex/HeaderSearchOptions.h"
@@ -328,6 +329,9 @@ void InitHeaderSearch::AddDefaultCIncludePaths(const llvm::Triple &triple,
 #endif
     }
     break;
+  case llvm::Triple::FreeBSD:
+    AddPath("/usr/include/clang/" CLANG_VERSION_STRING, System, false);
+    break;
       
   default:
     break;
@@ -419,7 +423,10 @@ AddDefaultCPlusPlusIncludePaths(const llvm::Triple &triple, const HeaderSearchOp
   case llvm::Triple::FreeBSD:
     // FreeBSD 8.0
     // FreeBSD 7.3
-    AddGnuCPlusPlusIncludePaths("/usr/include/c++/4.2", "", "", "", triple);
+    AddGnuCPlusPlusIncludePaths("/usr/include/c++/4.2",
+                                "", "", "", triple);
+    AddGnuCPlusPlusIncludePaths("/usr/include/c++/4.2/backward",
+                                "", "", "", triple);
     break;
   case llvm::Triple::OpenBSD: {
     std::string t = triple.getTriple();
diff --git a/contrib/llvm/tools/clang/lib/Headers/cpuid.h b/contrib/llvm/tools/clang/lib/Headers/cpuid.h
index 7b01238..8f12cae 100644
--- a/contrib/llvm/tools/clang/lib/Headers/cpuid.h
+++ b/contrib/llvm/tools/clang/lib/Headers/cpuid.h
@@ -25,10 +25,132 @@
 #error this header is for x86 only
 #endif
 
+/* Features in %ecx for level 1 */
+#define bit_SSE3        0x00000001
+#define bit_PCLMULQDQ   0x00000002
+#define bit_DTES64      0x00000004
+#define bit_MONITOR     0x00000008
+#define bit_DSCPL       0x00000010
+#define bit_VMX         0x00000020
+#define bit_SMX         0x00000040
+#define bit_EIST        0x00000080
+#define bit_TM2         0x00000100
+#define bit_SSSE3       0x00000200
+#define bit_CNXTID      0x00000400
+#define bit_FMA         0x00001000
+#define bit_CMPXCHG16B  0x00002000
+#define bit_xTPR        0x00004000
+#define bit_PDCM        0x00008000
+#define bit_PCID        0x00020000
+#define bit_DCA         0x00040000
+#define bit_SSE41       0x00080000
+#define bit_SSE42       0x00100000
+#define bit_x2APIC      0x00200000
+#define bit_MOVBE       0x00400000
+#define bit_POPCNT      0x00800000
+#define bit_TSCDeadline 0x01000000
+#define bit_AESNI       0x02000000
+#define bit_XSAVE       0x04000000
+#define bit_OSXSAVE     0x08000000
+#define bit_AVX         0x10000000
+#define bit_RDRAND      0x40000000
+
+/* Features in %edx for level 1 */
+#define bit_FPU         0x00000001
+#define bit_VME         0x00000002
+#define bit_DE          0x00000004
+#define bit_PSE         0x00000008
+#define bit_TSC         0x00000010
+#define bit_MSR         0x00000020
+#define bit_PAE         0x00000040
+#define bit_MCE         0x00000080
+#define bit_CX8         0x00000100
+#define bit_APIC        0x00000200
+#define bit_SEP         0x00000800
+#define bit_MTRR        0x00001000
+#define bit_PGE         0x00002000
+#define bit_MCA         0x00004000
+#define bit_CMOV        0x00008000
+#define bit_PAT         0x00010000
+#define bit_PSE36       0x00020000
+#define bit_PSN         0x00040000
+#define bit_CLFSH       0x00080000
+#define bit_DS          0x00200000
+#define bit_ACPI        0x00400000
+#define bit_MMX         0x00800000
+#define bit_FXSR        0x01000000
+#define bit_SSE         0x02000000
+#define bit_SSE2        0x04000000
+#define bit_SS          0x08000000
+#define bit_HTT         0x10000000
+#define bit_TM          0x20000000
+#define bit_PBE         0x80000000
+
+/* Features in %ebx for level 7 sub-leaf 0 */
+#define bit_FSGSBASE    0x00000001
+#define bit_SMEP        0x00000080
+#define bit_ENH_MOVSB   0x00000200
+
+/* PIC on i386 uses %ebx, so preserve it. */
+#if __i386__
+#define __cpuid(__level, __eax, __ebx, __ecx, __edx) \
+    __asm("  pushl  %%ebx\n" \
+          "  cpuid\n" \
+          "  mov    %%ebx,%1\n" \
+          "  popl   %%ebx" \
+        : "=a"(__eax), "=r" (__ebx), "=c"(__ecx), "=d"(__edx) \
+        : "0"(__level))
+
+#define __cpuid_count(__level, __count, __eax, __ebx, __ecx, __edx) \
+    __asm("  pushl  %%ebx\n" \
+          "  cpuid\n" \
+          "  mov    %%ebx,%1\n" \
+          "  popl   %%ebx" \
+        : "=a"(__eax), "=r" (__ebx), "=c"(__ecx), "=d"(__edx) \
+        : "0"(__level), "2"(__count))
+#else
+#define __cpuid(__level, __eax, __ebx, __ecx, __edx) \
+    __asm("cpuid" : "=a"(__eax), "=b" (__ebx), "=c"(__ecx), "=d"(__edx) \
+                  : "0"(__level))
+
+#define __cpuid_count(__level, __count, __eax, __ebx, __ecx, __edx) \
+    __asm("cpuid" : "=a"(__eax), "=b" (__ebx), "=c"(__ecx), "=d"(__edx) \
+                  : "0"(__level), "2"(__count))
+#endif
+
 static __inline int __get_cpuid (unsigned int __level, unsigned int *__eax,
                                  unsigned int *__ebx, unsigned int *__ecx,
                                  unsigned int *__edx) {
-    __asm("cpuid" : "=a"(*__eax), "=b" (*__ebx), "=c"(*__ecx), "=d"(*__edx)
-                  : "0"(__level));
+    __cpuid(__level, *__eax, *__ebx, *__ecx, *__edx);
     return 1;
 }
+
+static __inline int __get_cpuid_max (unsigned int __level, unsigned int *__sig)
+{
+    unsigned int __eax, __ebx, __ecx, __edx;
+#if __i386__
+    int __cpuid_supported;
+
+    __asm("  pushfl\n"
+          "  popl   %%eax\n"
+          "  movl   %%eax,%%ecx\n"
+          "  xorl   $0x00200000,%%eax\n"
+          "  pushl  %%eax\n"
+          "  popfl\n"
+          "  pushfl\n"
+          "  popl   %%eax\n"
+          "  movl   $0,%0\n"
+          "  cmpl   %%eax,%%ecx\n"
+          "  je     1f\n"
+          "  movl   $1,%0\n"
+          "1:"
+        : "=r" (__cpuid_supported) : : "eax", "ecx");
+    if (!__cpuid_supported)
+        return 0;
+#endif
+
+    __cpuid(__level, __eax, __ebx, __ecx, __edx);
+    if (__sig)
+        *__sig = __ebx;
+    return __eax;
+}
diff --git a/contrib/llvm/tools/clang/lib/Sema/SemaChecking.cpp b/contrib/llvm/tools/clang/lib/Sema/SemaChecking.cpp
index a0998a4..7b5f4f0 100644
--- a/contrib/llvm/tools/clang/lib/Sema/SemaChecking.cpp
+++ b/contrib/llvm/tools/clang/lib/Sema/SemaChecking.cpp
@@ -2624,6 +2624,40 @@ CheckPrintfHandler::HandlePrintfSpecifier(const analyze_printf::PrintfSpecifier
     CoveredArgs.set(argIndex);
   }
 
+  // FreeBSD extensions
+  if (CS.getKind() == ConversionSpecifier::FreeBSDbArg ||
+      CS.getKind() == ConversionSpecifier::FreeBSDDArg) { 
+    // claim the second argument
+    CoveredArgs.set(argIndex + 1);
+
+    // Now type check the data expression that matches the
+    // format specifier.
+    const Expr *Ex = getDataArg(argIndex);
+    const analyze_printf::ArgType &AT = 
+      (CS.getKind() == ConversionSpecifier::FreeBSDbArg) ?
+        ArgType(S.Context.IntTy) : ArgType::CStrTy;
+    if (AT.isValid() && !AT.matchesType(S.Context, Ex->getType()))
+      S.Diag(getLocationOfByte(CS.getStart()),
+             diag::warn_printf_conversion_argument_type_mismatch)
+        << AT.getRepresentativeType(S.Context) << Ex->getType()
+        << getSpecifierRange(startSpecifier, specifierLen)
+        << Ex->getSourceRange();
+
+    // Now type check the data expression that matches the
+    // format specifier.
+    Ex = getDataArg(argIndex + 1);
+    const analyze_printf::ArgType &AT2 = ArgType::CStrTy;
+    if (AT2.isValid() && !AT2.matchesType(S.Context, Ex->getType()))
+      S.Diag(getLocationOfByte(CS.getStart()),
+             diag::warn_printf_conversion_argument_type_mismatch)
+        << AT2.getRepresentativeType(S.Context) << Ex->getType()
+        << getSpecifierRange(startSpecifier, specifierLen)
+        << Ex->getSourceRange();
+
+     return true;
+  }
+  // END OF FREEBSD EXTENSIONS
+
   // Check for using an Objective-C specific conversion specifier
   // in a non-ObjC literal.
   if (!ObjCContext && CS.isObjCArg()) {
diff --git a/contrib/llvm/tools/clang/lib/Sema/SemaDecl.cpp b/contrib/llvm/tools/clang/lib/Sema/SemaDecl.cpp
index e0e8bd6..fd7cfeb 100644
--- a/contrib/llvm/tools/clang/lib/Sema/SemaDecl.cpp
+++ b/contrib/llvm/tools/clang/lib/Sema/SemaDecl.cpp
@@ -8671,7 +8671,8 @@ Decl *Sema::ActOnStartOfFunctionDef(Scope *FnBodyScope, Decl *D) {
 
   // Builtin functions cannot be defined.
   if (unsigned BuiltinID = FD->getBuiltinID()) {
-    if (!Context.BuiltinInfo.isPredefinedLibFunction(BuiltinID)) {
+    if (!Context.BuiltinInfo.isPredefinedLibFunction(BuiltinID) &&
+        !Context.BuiltinInfo.isPredefinedRuntimeFunction(BuiltinID)) {
       Diag(FD->getLocation(), diag::err_builtin_definition) << FD;
       FD->setInvalidDecl();
     }
@@ -10295,7 +10296,8 @@ void Sema::ActOnTagFinishDefinition(Scope *S, Decl *TagD,
     Tag->setTopLevelDeclInObjCContainer();
 
   // Notify the consumer that we've defined a tag.
-  Consumer.HandleTagDeclDefinition(Tag);
+  if (!Tag->isInvalidDecl())
+    Consumer.HandleTagDeclDefinition(Tag);
 }
 
 void Sema::ActOnObjCContainerFinishDefinition() {
diff --git a/lib/clang/Makefile b/lib/clang/Makefile
new file mode 100644
index 0000000..6bc9552
--- /dev/null
+++ b/lib/clang/Makefile
@@ -0,0 +1,97 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+.if !make(install)
+.if !defined(EARLY_BUILD) && defined(MK_CLANG_FULL) && ${MK_CLANG_FULL} != "no"
+_libclangstaticanalyzer= \
+	libclangstaticanalyzercheckers \
+	libclangstaticanalyzercore \
+	libclangstaticanalyzerfrontend
+_libclangarcmigrate= \
+	libclangarcmigrate
+_libclangrewriter= \
+	libclangrewritecore \
+	libclangrewritefrontend
+.endif # !EARLY_BUILD && MK_CLANG_FULL
+
+SUBDIR=	libclanganalysis \
+	${_libclangarcmigrate} \
+	libclangast \
+	libclangbasic \
+	libclangcodegen \
+	libclangdriver \
+	libclangedit \
+	libclangfrontend \
+	libclangfrontendtool \
+	libclanglex \
+	libclangparse \
+	${_libclangrewriter} \
+	libclangsema \
+	libclangserialization \
+	${_libclangstaticanalyzer} \
+	\
+	libllvmanalysis \
+	libllvmarchive \
+	libllvmasmparser \
+	libllvmasmprinter \
+	libllvmbitreader \
+	libllvmbitwriter \
+	libllvmcodegen \
+	libllvmcore \
+	libllvminstcombine \
+	libllvminstrumentation \
+	libllvmipa \
+	libllvmipo \
+	libllvmirreader \
+	libllvmlinker \
+	libllvmmc \
+	libllvmmcparser \
+	libllvmobjcarcopts \
+	libllvmobject \
+	libllvmscalaropts \
+	libllvmselectiondag \
+	libllvmsupport \
+	libllvmtablegen \
+	libllvmtarget \
+	libllvmtransformutils \
+	libllvmvectorize \
+	\
+	libllvmarmasmparser \
+	libllvmarmcodegen \
+	libllvmarmdesc \
+	libllvmarmdisassembler \
+	libllvmarminfo \
+	libllvmarminstprinter \
+	libllvmmipsasmparser \
+	libllvmmipscodegen \
+	libllvmmipsdesc \
+	libllvmmipsdisassembler \
+	libllvmmipsinfo \
+	libllvmmipsinstprinter \
+	libllvmpowerpccodegen \
+	libllvmpowerpcdesc \
+	libllvmpowerpcinfo \
+	libllvmpowerpcinstprinter \
+	libllvmx86asmparser \
+	libllvmx86codegen \
+	libllvmx86desc \
+	libllvmx86disassembler \
+	libllvmx86info \
+	libllvmx86instprinter \
+	libllvmx86utils
+
+.if ${MK_CLANG_EXTRAS} != "no"
+SUBDIR+=libllvmdebuginfo \
+	libllvmexecutionengine \
+	libllvminterpreter \
+	libllvmjit \
+	libllvmmcdisassembler \
+	libllvmmcjit \
+	libllvmruntimedyld
+.endif # MK_CLANG_EXTRAS
+.endif # !make(install)
+
+SUBDIR+= include
+
+.include <bsd.subdir.mk>
diff --git a/lib/clang/clang.build.mk b/lib/clang/clang.build.mk
new file mode 100644
index 0000000..2cf1e5b
--- /dev/null
+++ b/lib/clang/clang.build.mk
@@ -0,0 +1,198 @@
+# $FreeBSD$
+
+CLANG_SRCS=	${LLVM_SRCS}/tools/clang
+
+CFLAGS+=	-I${LLVM_SRCS}/include -I${CLANG_SRCS}/include \
+		-I${LLVM_SRCS}/${SRCDIR} ${INCDIR:C/^/-I${LLVM_SRCS}\//} -I. \
+		-I${LLVM_SRCS}/../../lib/clang/include \
+		-DLLVM_ON_UNIX -DLLVM_ON_FREEBSD \
+		-D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS #-DNDEBUG
+
+.if !defined(EARLY_BUILD) && defined(MK_CLANG_FULL) && ${MK_CLANG_FULL} != "no"
+CFLAGS+=	-DCLANG_ENABLE_ARCMT \
+		-DCLANG_ENABLE_REWRITER \
+		-DCLANG_ENABLE_STATIC_ANALYZER
+.endif # !EARLY_BUILD && MK_CLANG_FULL
+
+# LLVM is not strict aliasing safe as of 12/31/2011
+CFLAGS+=	-fno-strict-aliasing
+
+TARGET_ARCH?=	${MACHINE_ARCH}
+BUILD_ARCH?=	${MACHINE_ARCH}
+
+.if (${TARGET_ARCH} == "arm" || ${TARGET_ARCH} == "armv6") && \
+    ${MK_ARM_EABI} != "no"
+TARGET_ABI=	gnueabi
+.else
+TARGET_ABI=	unknown
+.endif
+
+TARGET_TRIPLE?=	${TARGET_ARCH:C/amd64/x86_64/}-${TARGET_ABI}-freebsd10.0
+BUILD_TRIPLE?=	${BUILD_ARCH:C/amd64/x86_64/}-unknown-freebsd10.0
+CFLAGS+=	-DLLVM_DEFAULT_TARGET_TRIPLE=\"${TARGET_TRIPLE}\" \
+		-DLLVM_HOST_TRIPLE=\"${BUILD_TRIPLE}\" \
+		-DDEFAULT_SYSROOT=\"${TOOLS_PREFIX}\"
+CXXFLAGS+=	-fno-exceptions -fno-rtti
+
+.PATH:	${LLVM_SRCS}/${SRCDIR}
+
+TBLGEN?=	tblgen
+CLANG_TBLGEN?=	clang-tblgen
+
+Intrinsics.inc.h: ${LLVM_SRCS}/include/llvm/IR/Intrinsics.td \
+		  ${LLVM_SRCS}/include/llvm/IR/IntrinsicsARM.td \
+		  ${LLVM_SRCS}/include/llvm/IR/IntrinsicsHexagon.td \
+		  ${LLVM_SRCS}/include/llvm/IR/IntrinsicsMips.td \
+		  ${LLVM_SRCS}/include/llvm/IR/IntrinsicsNVVM.td \
+		  ${LLVM_SRCS}/include/llvm/IR/IntrinsicsPowerPC.td \
+		  ${LLVM_SRCS}/include/llvm/IR/IntrinsicsR600.td \
+		  ${LLVM_SRCS}/include/llvm/IR/IntrinsicsX86.td \
+		  ${LLVM_SRCS}/include/llvm/IR/IntrinsicsXCore.td
+	${TBLGEN} -I ${LLVM_SRCS}/include \
+	    -gen-intrinsic -o ${.TARGET} \
+	    ${LLVM_SRCS}/include/llvm/IR/Intrinsics.td
+.for arch in \
+	ARM/ARM Mips/Mips PowerPC/PPC X86/X86
+. for hdr in \
+	AsmMatcher/-gen-asm-matcher \
+	AsmWriter1/-gen-asm-writer,-asmwriternum=1 \
+	AsmWriter/-gen-asm-writer \
+	CallingConv/-gen-callingconv \
+	CodeEmitter/-gen-emitter \
+	DAGISel/-gen-dag-isel \
+	DisassemblerTables/-gen-disassembler \
+	FastISel/-gen-fast-isel \
+	InstrInfo/-gen-instr-info \
+	MCCodeEmitter/-gen-emitter,-mc-emitter \
+	MCPseudoLowering/-gen-pseudo-lowering \
+	RegisterInfo/-gen-register-info \
+	SubtargetInfo/-gen-subtarget
+${arch:T}Gen${hdr:H:C/$/.inc.h/}: ${LLVM_SRCS}/lib/Target/${arch:H}/${arch:T}.td
+	${TBLGEN} -I ${LLVM_SRCS}/include -I ${LLVM_SRCS}/lib/Target/${arch:H} \
+	    ${hdr:T:C/,/ /g} -o ${.TARGET} \
+	    ${LLVM_SRCS}/lib/Target/${arch:H}/${arch:T}.td
+. endfor
+.endfor
+
+Attrs.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-classes -o ${.TARGET} ${.ALLSRC}
+
+AttrDump.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-dump -o ${.TARGET} ${.ALLSRC}
+
+AttrExprArgs.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-expr-args-list -o ${.TARGET} ${.ALLSRC}
+
+AttrImpl.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-impl -o ${.TARGET} ${.ALLSRC}
+AttrLateParsed.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-late-parsed-list -o ${.TARGET} ${.ALLSRC}
+
+AttrList.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-list -o ${.TARGET} ${.ALLSRC}
+
+AttrParsedAttrKinds.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-parsed-attr-kinds -o ${.TARGET} ${.ALLSRC}
+
+AttrParsedAttrList.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-parsed-attr-list -o ${.TARGET} ${.ALLSRC}
+
+AttrPCHRead.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-pch-read -o ${.TARGET} ${.ALLSRC}
+
+AttrPCHWrite.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-pch-write -o ${.TARGET} ${.ALLSRC}
+
+AttrSpellings.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-spelling-list -o ${.TARGET} ${.ALLSRC}
+
+AttrSpellingListIndex.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-spelling-index -o ${.TARGET} ${.ALLSRC}
+
+AttrTemplateInstantiate.inc.h: ${CLANG_SRCS}/include/clang/Basic/Attr.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-attr-template-instantiate -o ${.TARGET} ${.ALLSRC}
+
+CommentCommandInfo.inc.h: ${CLANG_SRCS}/include/clang/AST/CommentCommands.td
+	${CLANG_TBLGEN} \
+	    -gen-clang-comment-command-info -o ${.TARGET} ${.ALLSRC}
+
+CommentCommandList.inc.h: ${CLANG_SRCS}/include/clang/AST/CommentCommands.td
+	${CLANG_TBLGEN} \
+	    -gen-clang-comment-command-list -o ${.TARGET} ${.ALLSRC}
+
+CommentHTMLNamedCharacterReferences.inc.h: \
+	${CLANG_SRCS}/include/clang/AST/CommentHTMLNamedCharacterReferences.td
+	${CLANG_TBLGEN} \
+	    -gen-clang-comment-html-named-character-references -o ${.TARGET} \
+	    ${.ALLSRC}
+
+CommentHTMLTags.inc.h: ${CLANG_SRCS}/include/clang/AST/CommentHTMLTags.td
+	${CLANG_TBLGEN} \
+	    -gen-clang-comment-html-tags -o ${.TARGET} ${.ALLSRC}
+
+CommentHTMLTagsProperties.inc.h: \
+	${CLANG_SRCS}/include/clang/AST/CommentHTMLTags.td
+	${CLANG_TBLGEN} \
+	    -gen-clang-comment-html-tags-properties -o ${.TARGET} ${.ALLSRC}
+
+CommentNodes.inc.h: ${CLANG_SRCS}/include/clang/Basic/CommentNodes.td
+	${CLANG_TBLGEN} \
+	    -gen-clang-comment-nodes -o ${.TARGET} ${.ALLSRC}
+
+DeclNodes.inc.h: ${CLANG_SRCS}/include/clang/Basic/DeclNodes.td
+	${CLANG_TBLGEN} \
+	    -gen-clang-decl-nodes -o ${.TARGET} ${.ALLSRC}
+
+StmtNodes.inc.h: ${CLANG_SRCS}/include/clang/Basic/StmtNodes.td
+	${CLANG_TBLGEN} \
+	    -gen-clang-stmt-nodes -o ${.TARGET} ${.ALLSRC}
+
+arm_neon.inc.h: ${CLANG_SRCS}/include/clang/Basic/arm_neon.td
+	${CLANG_TBLGEN} \
+	    -gen-arm-neon-sema -o ${.TARGET} ${.ALLSRC}
+
+DiagnosticGroups.inc.h: ${CLANG_SRCS}/include/clang/Basic/Diagnostic.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include/clang/Basic \
+	    -gen-clang-diag-groups -o ${.TARGET} ${.ALLSRC}
+
+DiagnosticIndexName.inc.h: ${CLANG_SRCS}/include/clang/Basic/Diagnostic.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include/clang/Basic \
+	    -gen-clang-diags-index-name -o ${.TARGET} ${.ALLSRC}
+
+.for hdr in AST Analysis Comment Common Driver Frontend Lex Parse Sema Serialization
+Diagnostic${hdr}Kinds.inc.h: ${CLANG_SRCS}/include/clang/Basic/Diagnostic.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include/clang/Basic \
+	    -gen-clang-diags-defs -clang-component=${hdr} -o ${.TARGET} \
+	    ${.ALLSRC}
+.endfor
+
+Options.inc.h: ${CLANG_SRCS}/include/clang/Driver/Options.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include/clang/Driver \
+	    -gen-opt-parser-defs -o ${.TARGET} ${.ALLSRC}
+
+CC1AsOptions.inc.h: ${CLANG_SRCS}/include/clang/Driver/CC1AsOptions.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include/clang/Driver \
+	    -gen-opt-parser-defs -o ${.TARGET} ${.ALLSRC}
+
+Checkers.inc.h: ${CLANG_SRCS}/lib/StaticAnalyzer/Checkers/Checkers.td \
+	    ${CLANG_SRCS}/include/clang/StaticAnalyzer/Checkers/CheckerBase.td
+	${CLANG_TBLGEN} -I ${CLANG_SRCS}/include \
+	    -gen-clang-sa-checkers -o ${.TARGET} \
+	    ${CLANG_SRCS}/lib/StaticAnalyzer/Checkers/Checkers.td
+
+SRCS+=		${TGHDRS:C/$/.inc.h/}
+DPADD+=		${TGHDRS:C/$/.inc.h/}
+CLEANFILES+=	${TGHDRS:C/$/.inc.h/}
diff --git a/lib/clang/clang.lib.mk b/lib/clang/clang.lib.mk
new file mode 100644
index 0000000..13afa85
--- /dev/null
+++ b/lib/clang/clang.lib.mk
@@ -0,0 +1,9 @@
+# $FreeBSD$
+
+LLVM_SRCS= ${.CURDIR}/../../../contrib/llvm
+
+.include "clang.build.mk"
+
+INTERNALLIB=
+
+.include <bsd.lib.mk>
diff --git a/lib/clang/include/ARMGenAsmMatcher.inc b/lib/clang/include/ARMGenAsmMatcher.inc
new file mode 100644
index 0000000..e48285d
--- /dev/null
+++ b/lib/clang/include/ARMGenAsmMatcher.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenAsmMatcher.inc.h"
diff --git a/lib/clang/include/ARMGenAsmWriter.inc b/lib/clang/include/ARMGenAsmWriter.inc
new file mode 100644
index 0000000..896bedd
--- /dev/null
+++ b/lib/clang/include/ARMGenAsmWriter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenAsmWriter.inc.h"
diff --git a/lib/clang/include/ARMGenCallingConv.inc b/lib/clang/include/ARMGenCallingConv.inc
new file mode 100644
index 0000000..f7d850a
--- /dev/null
+++ b/lib/clang/include/ARMGenCallingConv.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenCallingConv.inc.h"
diff --git a/lib/clang/include/ARMGenCodeEmitter.inc b/lib/clang/include/ARMGenCodeEmitter.inc
new file mode 100644
index 0000000..083a6c3
--- /dev/null
+++ b/lib/clang/include/ARMGenCodeEmitter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenCodeEmitter.inc.h"
diff --git a/lib/clang/include/ARMGenDAGISel.inc b/lib/clang/include/ARMGenDAGISel.inc
new file mode 100644
index 0000000..6ad15b1
--- /dev/null
+++ b/lib/clang/include/ARMGenDAGISel.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenDAGISel.inc.h"
diff --git a/lib/clang/include/ARMGenDisassemblerTables.inc b/lib/clang/include/ARMGenDisassemblerTables.inc
new file mode 100644
index 0000000..7ea91ee
--- /dev/null
+++ b/lib/clang/include/ARMGenDisassemblerTables.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenDisassemblerTables.inc.h"
diff --git a/lib/clang/include/ARMGenFastISel.inc b/lib/clang/include/ARMGenFastISel.inc
new file mode 100644
index 0000000..261ed9a
--- /dev/null
+++ b/lib/clang/include/ARMGenFastISel.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenFastISel.inc.h"
diff --git a/lib/clang/include/ARMGenInstrInfo.inc b/lib/clang/include/ARMGenInstrInfo.inc
new file mode 100644
index 0000000..29c26ed
--- /dev/null
+++ b/lib/clang/include/ARMGenInstrInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenInstrInfo.inc.h"
diff --git a/lib/clang/include/ARMGenMCCodeEmitter.inc b/lib/clang/include/ARMGenMCCodeEmitter.inc
new file mode 100644
index 0000000..82933f0
--- /dev/null
+++ b/lib/clang/include/ARMGenMCCodeEmitter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenMCCodeEmitter.inc.h"
diff --git a/lib/clang/include/ARMGenMCPseudoLowering.inc b/lib/clang/include/ARMGenMCPseudoLowering.inc
new file mode 100644
index 0000000..aa3b617
--- /dev/null
+++ b/lib/clang/include/ARMGenMCPseudoLowering.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenMCPseudoLowering.inc.h"
diff --git a/lib/clang/include/ARMGenRegisterInfo.inc b/lib/clang/include/ARMGenRegisterInfo.inc
new file mode 100644
index 0000000..aa40e18
--- /dev/null
+++ b/lib/clang/include/ARMGenRegisterInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenRegisterInfo.inc.h"
diff --git a/lib/clang/include/ARMGenSubtargetInfo.inc b/lib/clang/include/ARMGenSubtargetInfo.inc
new file mode 100644
index 0000000..6579d9f
--- /dev/null
+++ b/lib/clang/include/ARMGenSubtargetInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "ARMGenSubtargetInfo.inc.h"
diff --git a/lib/clang/include/Checkers.inc b/lib/clang/include/Checkers.inc
new file mode 100644
index 0000000..d5b8138
--- /dev/null
+++ b/lib/clang/include/Checkers.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "Checkers.inc.h"
diff --git a/lib/clang/include/IA64GenAsmWriter.inc b/lib/clang/include/IA64GenAsmWriter.inc
new file mode 100644
index 0000000..dddc793
--- /dev/null
+++ b/lib/clang/include/IA64GenAsmWriter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "IA64GenAsmWriter.inc.h"
diff --git a/lib/clang/include/IA64GenDAGISel.inc b/lib/clang/include/IA64GenDAGISel.inc
new file mode 100644
index 0000000..c6ae3dc
--- /dev/null
+++ b/lib/clang/include/IA64GenDAGISel.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "IA64GenDAGISel.inc.h"
diff --git a/lib/clang/include/IA64GenInstrInfo.inc b/lib/clang/include/IA64GenInstrInfo.inc
new file mode 100644
index 0000000..7fe83f6
--- /dev/null
+++ b/lib/clang/include/IA64GenInstrInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "IA64GenInstrInfo.inc.h"
diff --git a/lib/clang/include/IA64GenRegisterInfo.inc b/lib/clang/include/IA64GenRegisterInfo.inc
new file mode 100644
index 0000000..89405ed
--- /dev/null
+++ b/lib/clang/include/IA64GenRegisterInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "IA64GenRegisterInfo.inc.h"
diff --git a/lib/clang/include/Makefile b/lib/clang/include/Makefile
new file mode 100644
index 0000000..1c6bd5c
--- /dev/null
+++ b/lib/clang/include/Makefile
@@ -0,0 +1,39 @@
+# $FreeBSD$
+
+.PATH: ${.CURDIR}/../../../contrib/llvm/tools/clang/lib/Headers
+
+INCSDIR=${INCLUDEDIR}/clang/3.3
+
+INCS=	__wmmintrin_aes.h \
+	__wmmintrin_pclmul.h \
+	altivec.h \
+	ammintrin.h \
+	avx2intrin.h \
+	avxintrin.h \
+	bmi2intrin.h \
+	bmiintrin.h \
+	cpuid.h \
+	emmintrin.h \
+	f16cintrin.h \
+	fma4intrin.h \
+	fmaintrin.h \
+	immintrin.h \
+	lzcntintrin.h \
+	mm3dnow.h \
+	mm_malloc.h \
+	mmintrin.h \
+	module.map \
+	nmmintrin.h \
+	pmmintrin.h \
+	popcntintrin.h \
+	prfchwintrin.h \
+	rdseedintrin.h \
+	rtmintrin.h \
+	smmintrin.h \
+	tmmintrin.h \
+	wmmintrin.h \
+	x86intrin.h \
+	xmmintrin.h \
+	xopintrin.h
+
+.include <bsd.prog.mk>
diff --git a/lib/clang/include/MipsGenAsmMatcher.inc b/lib/clang/include/MipsGenAsmMatcher.inc
new file mode 100644
index 0000000..b9e2fd1
--- /dev/null
+++ b/lib/clang/include/MipsGenAsmMatcher.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenAsmMatcher.inc.h"
diff --git a/lib/clang/include/MipsGenAsmWriter.inc b/lib/clang/include/MipsGenAsmWriter.inc
new file mode 100644
index 0000000..1f512f1
--- /dev/null
+++ b/lib/clang/include/MipsGenAsmWriter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenAsmWriter.inc.h"
diff --git a/lib/clang/include/MipsGenCallingConv.inc b/lib/clang/include/MipsGenCallingConv.inc
new file mode 100644
index 0000000..6f6fee6
--- /dev/null
+++ b/lib/clang/include/MipsGenCallingConv.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenCallingConv.inc.h"
diff --git a/lib/clang/include/MipsGenCodeEmitter.inc b/lib/clang/include/MipsGenCodeEmitter.inc
new file mode 100644
index 0000000..1e2223d
--- /dev/null
+++ b/lib/clang/include/MipsGenCodeEmitter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenCodeEmitter.inc.h"
diff --git a/lib/clang/include/MipsGenDAGISel.inc b/lib/clang/include/MipsGenDAGISel.inc
new file mode 100644
index 0000000..cb63943
--- /dev/null
+++ b/lib/clang/include/MipsGenDAGISel.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenDAGISel.inc.h"
diff --git a/lib/clang/include/MipsGenDisassemblerTables.inc b/lib/clang/include/MipsGenDisassemblerTables.inc
new file mode 100644
index 0000000..1308e33
--- /dev/null
+++ b/lib/clang/include/MipsGenDisassemblerTables.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenDisassemblerTables.inc.h"
diff --git a/lib/clang/include/MipsGenInstrInfo.inc b/lib/clang/include/MipsGenInstrInfo.inc
new file mode 100644
index 0000000..ec57075
--- /dev/null
+++ b/lib/clang/include/MipsGenInstrInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenInstrInfo.inc.h"
diff --git a/lib/clang/include/MipsGenMCCodeEmitter.inc b/lib/clang/include/MipsGenMCCodeEmitter.inc
new file mode 100644
index 0000000..82cd418
--- /dev/null
+++ b/lib/clang/include/MipsGenMCCodeEmitter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenMCCodeEmitter.inc.h"
diff --git a/lib/clang/include/MipsGenMCPseudoLowering.inc b/lib/clang/include/MipsGenMCPseudoLowering.inc
new file mode 100644
index 0000000..4e4cbbe
--- /dev/null
+++ b/lib/clang/include/MipsGenMCPseudoLowering.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenMCPseudoLowering.inc.h"
diff --git a/lib/clang/include/MipsGenRegisterInfo.inc b/lib/clang/include/MipsGenRegisterInfo.inc
new file mode 100644
index 0000000..95a7b70
--- /dev/null
+++ b/lib/clang/include/MipsGenRegisterInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenRegisterInfo.inc.h"
diff --git a/lib/clang/include/MipsGenSubtargetInfo.inc b/lib/clang/include/MipsGenSubtargetInfo.inc
new file mode 100644
index 0000000..2c069f4
--- /dev/null
+++ b/lib/clang/include/MipsGenSubtargetInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "MipsGenSubtargetInfo.inc.h"
diff --git a/lib/clang/include/PPCGenAsmWriter.inc b/lib/clang/include/PPCGenAsmWriter.inc
new file mode 100644
index 0000000..e31e777
--- /dev/null
+++ b/lib/clang/include/PPCGenAsmWriter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "PPCGenAsmWriter.inc.h"
diff --git a/lib/clang/include/PPCGenCallingConv.inc b/lib/clang/include/PPCGenCallingConv.inc
new file mode 100644
index 0000000..6f28640
--- /dev/null
+++ b/lib/clang/include/PPCGenCallingConv.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "PPCGenCallingConv.inc.h"
diff --git a/lib/clang/include/PPCGenCodeEmitter.inc b/lib/clang/include/PPCGenCodeEmitter.inc
new file mode 100644
index 0000000..525c853
--- /dev/null
+++ b/lib/clang/include/PPCGenCodeEmitter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "PPCGenCodeEmitter.inc.h"
diff --git a/lib/clang/include/PPCGenDAGISel.inc b/lib/clang/include/PPCGenDAGISel.inc
new file mode 100644
index 0000000..b783e11
--- /dev/null
+++ b/lib/clang/include/PPCGenDAGISel.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "PPCGenDAGISel.inc.h"
diff --git a/lib/clang/include/PPCGenInstrInfo.inc b/lib/clang/include/PPCGenInstrInfo.inc
new file mode 100644
index 0000000..80a11d5
--- /dev/null
+++ b/lib/clang/include/PPCGenInstrInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "PPCGenInstrInfo.inc.h"
diff --git a/lib/clang/include/PPCGenMCCodeEmitter.inc b/lib/clang/include/PPCGenMCCodeEmitter.inc
new file mode 100644
index 0000000..7bd37ce
--- /dev/null
+++ b/lib/clang/include/PPCGenMCCodeEmitter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "PPCGenMCCodeEmitter.inc.h"
diff --git a/lib/clang/include/PPCGenRegisterInfo.inc b/lib/clang/include/PPCGenRegisterInfo.inc
new file mode 100644
index 0000000..9e26cb1
--- /dev/null
+++ b/lib/clang/include/PPCGenRegisterInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "PPCGenRegisterInfo.inc.h"
diff --git a/lib/clang/include/PPCGenSubtargetInfo.inc b/lib/clang/include/PPCGenSubtargetInfo.inc
new file mode 100644
index 0000000..a348630
--- /dev/null
+++ b/lib/clang/include/PPCGenSubtargetInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "PPCGenSubtargetInfo.inc.h"
diff --git a/lib/clang/include/X86GenAsmMatcher.inc b/lib/clang/include/X86GenAsmMatcher.inc
new file mode 100644
index 0000000..6ed8afd
--- /dev/null
+++ b/lib/clang/include/X86GenAsmMatcher.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "X86GenAsmMatcher.inc.h"
diff --git a/lib/clang/include/X86GenAsmWriter.inc b/lib/clang/include/X86GenAsmWriter.inc
new file mode 100644
index 0000000..4879a0c
--- /dev/null
+++ b/lib/clang/include/X86GenAsmWriter.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "X86GenAsmWriter.inc.h"
diff --git a/lib/clang/include/X86GenAsmWriter1.inc b/lib/clang/include/X86GenAsmWriter1.inc
new file mode 100644
index 0000000..03f88b8
--- /dev/null
+++ b/lib/clang/include/X86GenAsmWriter1.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "X86GenAsmWriter1.inc.h"
diff --git a/lib/clang/include/X86GenCallingConv.inc b/lib/clang/include/X86GenCallingConv.inc
new file mode 100644
index 0000000..dce5266
--- /dev/null
+++ b/lib/clang/include/X86GenCallingConv.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "X86GenCallingConv.inc.h"
diff --git a/lib/clang/include/X86GenDAGISel.inc b/lib/clang/include/X86GenDAGISel.inc
new file mode 100644
index 0000000..5a5ab94
--- /dev/null
+++ b/lib/clang/include/X86GenDAGISel.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "X86GenDAGISel.inc.h"
diff --git a/lib/clang/include/X86GenDisassemblerTables.inc b/lib/clang/include/X86GenDisassemblerTables.inc
new file mode 100644
index 0000000..82218ef
--- /dev/null
+++ b/lib/clang/include/X86GenDisassemblerTables.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "X86GenDisassemblerTables.inc.h"
diff --git a/lib/clang/include/X86GenFastISel.inc b/lib/clang/include/X86GenFastISel.inc
new file mode 100644
index 0000000..4074cf6
--- /dev/null
+++ b/lib/clang/include/X86GenFastISel.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "X86GenFastISel.inc.h"
diff --git a/lib/clang/include/X86GenInstrInfo.inc b/lib/clang/include/X86GenInstrInfo.inc
new file mode 100644
index 0000000..6222825
--- /dev/null
+++ b/lib/clang/include/X86GenInstrInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "X86GenInstrInfo.inc.h"
diff --git a/lib/clang/include/X86GenRegisterInfo.inc b/lib/clang/include/X86GenRegisterInfo.inc
new file mode 100644
index 0000000..6d78e41
--- /dev/null
+++ b/lib/clang/include/X86GenRegisterInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "X86GenRegisterInfo.inc.h"
diff --git a/lib/clang/include/X86GenSubtargetInfo.inc b/lib/clang/include/X86GenSubtargetInfo.inc
new file mode 100644
index 0000000..a64b3a4
--- /dev/null
+++ b/lib/clang/include/X86GenSubtargetInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "X86GenSubtargetInfo.inc.h"
diff --git a/lib/clang/include/clang/AST/AttrDump.inc b/lib/clang/include/clang/AST/AttrDump.inc
new file mode 100644
index 0000000..ca3c42f
--- /dev/null
+++ b/lib/clang/include/clang/AST/AttrDump.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrDump.inc.h"
diff --git a/lib/clang/include/clang/AST/AttrImpl.inc b/lib/clang/include/clang/AST/AttrImpl.inc
new file mode 100644
index 0000000..b3efb1b
--- /dev/null
+++ b/lib/clang/include/clang/AST/AttrImpl.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrImpl.inc.h"
diff --git a/lib/clang/include/clang/AST/Attrs.inc b/lib/clang/include/clang/AST/Attrs.inc
new file mode 100644
index 0000000..0eee102
--- /dev/null
+++ b/lib/clang/include/clang/AST/Attrs.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "Attrs.inc.h"
diff --git a/lib/clang/include/clang/AST/CommentCommandInfo.inc b/lib/clang/include/clang/AST/CommentCommandInfo.inc
new file mode 100644
index 0000000..cd17190
--- /dev/null
+++ b/lib/clang/include/clang/AST/CommentCommandInfo.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "CommentCommandInfo.inc.h"
diff --git a/lib/clang/include/clang/AST/CommentCommandList.inc b/lib/clang/include/clang/AST/CommentCommandList.inc
new file mode 100644
index 0000000..bc36905
--- /dev/null
+++ b/lib/clang/include/clang/AST/CommentCommandList.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "CommentCommandList.inc.h"
diff --git a/lib/clang/include/clang/AST/CommentHTMLNamedCharacterReferences.inc b/lib/clang/include/clang/AST/CommentHTMLNamedCharacterReferences.inc
new file mode 100644
index 0000000..b4f11ca6
--- /dev/null
+++ b/lib/clang/include/clang/AST/CommentHTMLNamedCharacterReferences.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "CommentHTMLNamedCharacterReferences.inc.h"
diff --git a/lib/clang/include/clang/AST/CommentHTMLTags.inc b/lib/clang/include/clang/AST/CommentHTMLTags.inc
new file mode 100644
index 0000000..0932f32
--- /dev/null
+++ b/lib/clang/include/clang/AST/CommentHTMLTags.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "CommentHTMLTags.inc.h"
diff --git a/lib/clang/include/clang/AST/CommentHTMLTagsProperties.inc b/lib/clang/include/clang/AST/CommentHTMLTagsProperties.inc
new file mode 100644
index 0000000..77af956
--- /dev/null
+++ b/lib/clang/include/clang/AST/CommentHTMLTagsProperties.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "CommentHTMLTagsProperties.inc.h"
diff --git a/lib/clang/include/clang/AST/CommentNodes.inc b/lib/clang/include/clang/AST/CommentNodes.inc
new file mode 100644
index 0000000..1da6147
--- /dev/null
+++ b/lib/clang/include/clang/AST/CommentNodes.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "CommentNodes.inc.h"
diff --git a/lib/clang/include/clang/AST/DeclNodes.inc b/lib/clang/include/clang/AST/DeclNodes.inc
new file mode 100644
index 0000000..d5b9a90
--- /dev/null
+++ b/lib/clang/include/clang/AST/DeclNodes.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DeclNodes.inc.h"
diff --git a/lib/clang/include/clang/AST/StmtNodes.inc b/lib/clang/include/clang/AST/StmtNodes.inc
new file mode 100644
index 0000000..cd35d7a
--- /dev/null
+++ b/lib/clang/include/clang/AST/StmtNodes.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "StmtNodes.inc.h"
diff --git a/lib/clang/include/clang/Basic/AttrList.inc b/lib/clang/include/clang/Basic/AttrList.inc
new file mode 100644
index 0000000..319eb5a
--- /dev/null
+++ b/lib/clang/include/clang/Basic/AttrList.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrList.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticASTKinds.inc b/lib/clang/include/clang/Basic/DiagnosticASTKinds.inc
new file mode 100644
index 0000000..bc558c5
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticASTKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticASTKinds.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticAnalysisKinds.inc b/lib/clang/include/clang/Basic/DiagnosticAnalysisKinds.inc
new file mode 100644
index 0000000..5472209
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticAnalysisKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticAnalysisKinds.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticCommentKinds.inc b/lib/clang/include/clang/Basic/DiagnosticCommentKinds.inc
new file mode 100644
index 0000000..518c3b7
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticCommentKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticCommentKinds.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticCommonKinds.inc b/lib/clang/include/clang/Basic/DiagnosticCommonKinds.inc
new file mode 100644
index 0000000..b2ac7a3
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticCommonKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticCommonKinds.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticDriverKinds.inc b/lib/clang/include/clang/Basic/DiagnosticDriverKinds.inc
new file mode 100644
index 0000000..b719c10
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticDriverKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticDriverKinds.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticFrontendKinds.inc b/lib/clang/include/clang/Basic/DiagnosticFrontendKinds.inc
new file mode 100644
index 0000000..85dde99
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticFrontendKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticFrontendKinds.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticGroups.inc b/lib/clang/include/clang/Basic/DiagnosticGroups.inc
new file mode 100644
index 0000000..1c5fa1a
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticGroups.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticGroups.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticIndexName.inc b/lib/clang/include/clang/Basic/DiagnosticIndexName.inc
new file mode 100644
index 0000000..1baf975
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticIndexName.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticIndexName.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticLexKinds.inc b/lib/clang/include/clang/Basic/DiagnosticLexKinds.inc
new file mode 100644
index 0000000..8a0e527
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticLexKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticLexKinds.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticParseKinds.inc b/lib/clang/include/clang/Basic/DiagnosticParseKinds.inc
new file mode 100644
index 0000000..5a4948e
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticParseKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticParseKinds.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticSemaKinds.inc b/lib/clang/include/clang/Basic/DiagnosticSemaKinds.inc
new file mode 100644
index 0000000..d08c7f1
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticSemaKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticSemaKinds.inc.h"
diff --git a/lib/clang/include/clang/Basic/DiagnosticSerializationKinds.inc b/lib/clang/include/clang/Basic/DiagnosticSerializationKinds.inc
new file mode 100644
index 0000000..f0d84f1
--- /dev/null
+++ b/lib/clang/include/clang/Basic/DiagnosticSerializationKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "DiagnosticSerializationKinds.inc.h"
diff --git a/lib/clang/include/clang/Basic/Version.inc b/lib/clang/include/clang/Basic/Version.inc
new file mode 100644
index 0000000..1b62e7f
--- /dev/null
+++ b/lib/clang/include/clang/Basic/Version.inc
@@ -0,0 +1,10 @@
+/* $FreeBSD$ */
+
+#define	CLANG_VERSION		3.3
+#define	CLANG_VERSION_MAJOR	3
+#define	CLANG_VERSION_MINOR	3
+
+#define	CLANG_VENDOR		"FreeBSD "
+#define	CLANG_VENDOR_SUFFIX	" 20130610"
+
+#define	SVN_REVISION		"183502"
diff --git a/lib/clang/include/clang/Basic/arm_neon.inc b/lib/clang/include/clang/Basic/arm_neon.inc
new file mode 100644
index 0000000..7b4c875
--- /dev/null
+++ b/lib/clang/include/clang/Basic/arm_neon.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "arm_neon.inc.h"
diff --git a/lib/clang/include/clang/Config/config.h b/lib/clang/include/clang/Config/config.h
new file mode 100644
index 0000000..8a7936b
--- /dev/null
+++ b/lib/clang/include/clang/Config/config.h
@@ -0,0 +1,26 @@
+/* $FreeBSD$ */
+/* tools/clang/include/clang/Config/config.h.  Generated from config.h.in by configure.  */
+/* include/clang/Config/config.h.in. */
+
+#ifndef CONFIG_H
+#define CONFIG_H
+
+/* Bug report URL. */
+#define BUG_REPORT_URL "http://llvm.org/bugs/"
+
+/* Relative directory for resource files */
+#define CLANG_RESOURCE_DIR ""
+
+/* Directories clang will search for headers */
+#define C_INCLUDE_DIRS ""
+
+/* Linker version detected at compile time. */
+/* #undef HOST_LINK_VERSION */
+
+/* Default <path> to all compiler invocations for --sysroot=<path>. */
+/* #undef DEFAULT_SYSROOT */
+
+/* Directory where gcc is installed. */
+#define GCC_INSTALL_PREFIX ""
+
+#endif
diff --git a/lib/clang/include/clang/Driver/CC1AsOptions.inc b/lib/clang/include/clang/Driver/CC1AsOptions.inc
new file mode 100644
index 0000000..3d76958
--- /dev/null
+++ b/lib/clang/include/clang/Driver/CC1AsOptions.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "CC1AsOptions.inc.h"
diff --git a/lib/clang/include/clang/Driver/Options.inc b/lib/clang/include/clang/Driver/Options.inc
new file mode 100644
index 0000000..37422c1
--- /dev/null
+++ b/lib/clang/include/clang/Driver/Options.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "Options.inc.h"
diff --git a/lib/clang/include/clang/Lex/AttrSpellings.inc b/lib/clang/include/clang/Lex/AttrSpellings.inc
new file mode 100644
index 0000000..8859ae3
--- /dev/null
+++ b/lib/clang/include/clang/Lex/AttrSpellings.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrSpellings.inc.h"
diff --git a/lib/clang/include/clang/Parse/AttrExprArgs.inc b/lib/clang/include/clang/Parse/AttrExprArgs.inc
new file mode 100644
index 0000000..043e034
--- /dev/null
+++ b/lib/clang/include/clang/Parse/AttrExprArgs.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrExprArgs.inc.h"
diff --git a/lib/clang/include/clang/Parse/AttrLateParsed.inc b/lib/clang/include/clang/Parse/AttrLateParsed.inc
new file mode 100644
index 0000000..1282d9e
--- /dev/null
+++ b/lib/clang/include/clang/Parse/AttrLateParsed.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrLateParsed.inc.h"
diff --git a/lib/clang/include/clang/Sema/AttrParsedAttrKinds.inc b/lib/clang/include/clang/Sema/AttrParsedAttrKinds.inc
new file mode 100644
index 0000000..77d0092
--- /dev/null
+++ b/lib/clang/include/clang/Sema/AttrParsedAttrKinds.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrParsedAttrKinds.inc.h"
diff --git a/lib/clang/include/clang/Sema/AttrParsedAttrList.inc b/lib/clang/include/clang/Sema/AttrParsedAttrList.inc
new file mode 100644
index 0000000..b5aeac3
--- /dev/null
+++ b/lib/clang/include/clang/Sema/AttrParsedAttrList.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrParsedAttrList.inc.h"
diff --git a/lib/clang/include/clang/Sema/AttrSpellingListIndex.inc b/lib/clang/include/clang/Sema/AttrSpellingListIndex.inc
new file mode 100644
index 0000000..229273c
--- /dev/null
+++ b/lib/clang/include/clang/Sema/AttrSpellingListIndex.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrSpellingListIndex.inc.h"
diff --git a/lib/clang/include/clang/Sema/AttrTemplateInstantiate.inc b/lib/clang/include/clang/Sema/AttrTemplateInstantiate.inc
new file mode 100644
index 0000000..88c3c11
--- /dev/null
+++ b/lib/clang/include/clang/Sema/AttrTemplateInstantiate.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrTemplateInstantiate.inc.h"
diff --git a/lib/clang/include/clang/Serialization/AttrPCHRead.inc b/lib/clang/include/clang/Serialization/AttrPCHRead.inc
new file mode 100644
index 0000000..8fd4ad3
--- /dev/null
+++ b/lib/clang/include/clang/Serialization/AttrPCHRead.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrPCHRead.inc.h"
diff --git a/lib/clang/include/clang/Serialization/AttrPCHWrite.inc b/lib/clang/include/clang/Serialization/AttrPCHWrite.inc
new file mode 100644
index 0000000..0fb802c
--- /dev/null
+++ b/lib/clang/include/clang/Serialization/AttrPCHWrite.inc
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "AttrPCHWrite.inc.h"
diff --git a/lib/clang/include/llvm/Config/AsmParsers.def b/lib/clang/include/llvm/Config/AsmParsers.def
new file mode 100644
index 0000000..024462e
--- /dev/null
+++ b/lib/clang/include/llvm/Config/AsmParsers.def
@@ -0,0 +1,7 @@
+/* $FreeBSD$ */
+
+LLVM_ASM_PARSER(ARM)
+LLVM_ASM_PARSER(Mips)
+LLVM_ASM_PARSER(X86)
+
+#undef LLVM_ASM_PARSER
diff --git a/lib/clang/include/llvm/Config/AsmPrinters.def b/lib/clang/include/llvm/Config/AsmPrinters.def
new file mode 100644
index 0000000..ca335df
--- /dev/null
+++ b/lib/clang/include/llvm/Config/AsmPrinters.def
@@ -0,0 +1,8 @@
+/* $FreeBSD$ */
+
+LLVM_ASM_PRINTER(ARM)
+LLVM_ASM_PRINTER(Mips)
+LLVM_ASM_PRINTER(PowerPC)
+LLVM_ASM_PRINTER(X86)
+
+#undef LLVM_ASM_PRINTER
diff --git a/lib/clang/include/llvm/Config/Disassemblers.def b/lib/clang/include/llvm/Config/Disassemblers.def
new file mode 100644
index 0000000..1b26531
--- /dev/null
+++ b/lib/clang/include/llvm/Config/Disassemblers.def
@@ -0,0 +1,7 @@
+/* $FreeBSD$ */
+
+LLVM_DISASSEMBLER(ARM)
+LLVM_DISASSEMBLER(Mips)
+LLVM_DISASSEMBLER(X86)
+
+#undef LLVM_DISASSEMBLER
diff --git a/lib/clang/include/llvm/Config/Targets.def b/lib/clang/include/llvm/Config/Targets.def
new file mode 100644
index 0000000..85c3ffe
--- /dev/null
+++ b/lib/clang/include/llvm/Config/Targets.def
@@ -0,0 +1,8 @@
+/* $FreeBSD$ */
+
+LLVM_TARGET(ARM)
+LLVM_TARGET(Mips)
+LLVM_TARGET(PowerPC)
+LLVM_TARGET(X86)
+
+#undef LLVM_TARGET
diff --git a/lib/clang/include/llvm/Config/config.h b/lib/clang/include/llvm/Config/config.h
new file mode 100644
index 0000000..d72aba8
--- /dev/null
+++ b/lib/clang/include/llvm/Config/config.h
@@ -0,0 +1,759 @@
+/* $FreeBSD$ */
+/* include/llvm/Config/config.h.  Generated from config.h.in by configure.  */
+/* include/llvm/Config/config.h.in.  Generated from autoconf/configure.ac by autoheader.  */
+
+#ifndef CONFIG_H
+#define CONFIG_H
+
+/* Get __FreeBSD_version. */
+#include <osreldate.h>
+
+/* Bug report URL. */
+#define BUG_REPORT_URL "http://llvm.org/bugs/"
+
+/* Define if we have libxml2 */
+/* #undef CLANG_HAVE_LIBXML */
+
+/* Relative directory for resource files */
+#define CLANG_RESOURCE_DIR ""
+
+/* Directories clang will search for headers */
+#define C_INCLUDE_DIRS ""
+
+/* Default <path> to all compiler invocations for --sysroot=<path>. */
+/* #undef DEFAULT_SYSROOT */
+
+/* Define if you want backtraces on crash */
+#define ENABLE_BACKTRACES 1
+
+/* Define if position independent code is enabled */
+#define ENABLE_PIC 0
+
+/* Define if timestamp information (e.g., __DATE__) is allowed */
+#define ENABLE_TIMESTAMPS 0
+
+/* Directory where gcc is installed. */
+#define GCC_INSTALL_PREFIX ""
+
+/* Define to 1 if you have the `arc4random' function. */
+#define HAVE_ARC4RANDOM 1
+
+/* Define to 1 if you have the `argz_append' function. */
+/* #undef HAVE_ARGZ_APPEND */
+
+/* Define to 1 if you have the `argz_create_sep' function. */
+/* #undef HAVE_ARGZ_CREATE_SEP */
+
+/* Define to 1 if you have the <argz.h> header file. */
+/* #undef HAVE_ARGZ_H */
+
+/* Define to 1 if you have the `argz_insert' function. */
+/* #undef HAVE_ARGZ_INSERT */
+
+/* Define to 1 if you have the `argz_next' function. */
+/* #undef HAVE_ARGZ_NEXT */
+
+/* Define to 1 if you have the `argz_stringify' function. */
+/* #undef HAVE_ARGZ_STRINGIFY */
+
+/* Define to 1 if you have the <assert.h> header file. */
+#define HAVE_ASSERT_H 1
+
+/* Define to 1 if you have the `backtrace' function. */
+/* #undef HAVE_BACKTRACE */
+
+/* Define to 1 if you have the `bcopy' function. */
+/* #undef HAVE_BCOPY */
+
+/* Define to 1 if you have the `ceilf' function. */
+#define HAVE_CEILF 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_CIRCO */
+
+/* Define to 1 if you have the `closedir' function. */
+#define HAVE_CLOSEDIR 1
+
+/* Define to 1 if you have the <CrashReporterClient.h> header file. */
+/* #undef HAVE_CRASHREPORTERCLIENT_H */
+
+/* can use __crashreporter_info__ */
+#define HAVE_CRASHREPORTER_INFO 0
+
+/* Define to 1 if you have the <ctype.h> header file. */
+#define HAVE_CTYPE_H 1
+
+/* Define to 1 if you have the <cxxabi.h> header file. */
+#define HAVE_CXXABI_H 1
+
+/* Define to 1 if you have the declaration of `FE_ALL_EXCEPT', and to 0 if you
+   don't. */
+#define HAVE_DECL_FE_ALL_EXCEPT 1
+
+/* Define to 1 if you have the declaration of `FE_INEXACT', and to 0 if you
+   don't. */
+#define HAVE_DECL_FE_INEXACT 1
+
+/* Define to 1 if you have the declaration of `strerror_s', and to 0 if you
+   don't. */
+#define HAVE_DECL_STRERROR_S 0
+
+/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.
+   */
+#define HAVE_DIRENT_H 1
+
+/* Define if you have the GNU dld library. */
+/* #undef HAVE_DLD */
+
+/* Define to 1 if you have the <dld.h> header file. */
+/* #undef HAVE_DLD_H */
+
+/* Define to 1 if you have the `dlerror' function. */
+#define HAVE_DLERROR 1
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#define HAVE_DLFCN_H 1
+
+/* Define if dlopen() is available on this platform. */
+#define HAVE_DLOPEN 1
+
+/* Define to 1 if you have the <dl.h> header file. */
+/* #undef HAVE_DL_H */
+
+/* Define if the dot program is available */
+/* #undef HAVE_DOT */
+
+/* Define if the dotty program is available */
+/* #undef HAVE_DOTTY */
+
+/* Define if you have the _dyld_func_lookup function. */
+/* #undef HAVE_DYLD */
+
+/* Define to 1 if you have the <errno.h> header file. */
+#define HAVE_ERRNO_H 1
+
+/* Define to 1 if the system has the type `error_t'. */
+/* #undef HAVE_ERROR_T */
+
+/* Define to 1 if you have the <execinfo.h> header file. */
+/* #undef HAVE_EXECINFO_H */
+
+/* Define to 1 if you have the `exp' function. */
+#define HAVE_EXP 1
+
+/* Define to 1 if you have the `exp2' function. */
+#define HAVE_EXP2 1
+
+/* Define to 1 if you have the <fcntl.h> header file. */
+#define HAVE_FCNTL_H 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_FDP */
+
+/* Define to 1 if you have the <fenv.h> header file. */
+#define HAVE_FENV_H 1
+
+/* Define if libffi is available on this platform. */
+/* #undef HAVE_FFI_CALL */
+
+/* Define to 1 if you have the <ffi/ffi.h> header file. */
+/* #undef HAVE_FFI_FFI_H */
+
+/* Define to 1 if you have the <ffi.h> header file. */
+/* #undef HAVE_FFI_H */
+
+/* Set to 1 if the finite function is found in <ieeefp.h> */
+/* #undef HAVE_FINITE_IN_IEEEFP_H */
+
+/* Define to 1 if you have the `floorf' function. */
+#define HAVE_FLOORF 1
+
+/* Define to 1 if you have the `fmodf' function. */
+#define HAVE_FMODF 1
+
+/* Define to 1 if you have the `getcwd' function. */
+#define HAVE_GETCWD 1
+
+/* Define to 1 if you have the `getpagesize' function. */
+#define HAVE_GETPAGESIZE 1
+
+/* Define to 1 if you have the `getrlimit' function. */
+#define HAVE_GETRLIMIT 1
+
+/* Define to 1 if you have the `getrusage' function. */
+#define HAVE_GETRUSAGE 1
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#define HAVE_GETTIMEOFDAY 1
+
+/* Define if the Graphviz program is available */
+/* #undef HAVE_GRAPHVIZ */
+
+/* Define if the gv program is available */
+/* #undef HAVE_GV */
+
+/* Define to 1 if you have the `index' function. */
+/* #undef HAVE_INDEX */
+
+/* Define to 1 if the system has the type `int64_t'. */
+#define HAVE_INT64_T 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#define HAVE_INTTYPES_H 1
+
+/* Define to 1 if you have the `isatty' function. */
+#define HAVE_ISATTY 1
+
+/* Set to 1 if the isinf function is found in <cmath> */
+#define HAVE_ISINF_IN_CMATH 1
+
+/* Set to 1 if the isinf function is found in <math.h> */
+#define HAVE_ISINF_IN_MATH_H 1
+
+/* Set to 1 if the isnan function is found in <cmath> */
+#define HAVE_ISNAN_IN_CMATH 1
+
+/* Set to 1 if the isnan function is found in <math.h> */
+#define HAVE_ISNAN_IN_MATH_H 1
+
+/* Define if you have the libdl library or equivalent. */
+#define HAVE_LIBDL 1
+
+/* Define to 1 if you have the `imagehlp' library (-limagehlp). */
+/* #undef HAVE_LIBIMAGEHLP */
+
+/* Define to 1 if you have the `m' library (-lm). */
+#define HAVE_LIBM 1
+
+/* Define to 1 if you have the `psapi' library (-lpsapi). */
+/* #undef HAVE_LIBPSAPI */
+
+/* Define to 1 if you have the `pthread' library (-lpthread). */
+/* #undef HAVE_LIBPTHREAD */
+
+/* Define to 1 if you have the `udis86' library (-ludis86). */
+/* #undef HAVE_LIBUDIS86 */
+
+/* Define to 1 if you have the `z' library (-lz). */
+#define HAVE_LIBZ 1
+
+/* Define to 1 if you have the <limits.h> header file. */
+#define HAVE_LIMITS_H 1
+
+/* Define if you can use -Wl,-export-dynamic. */
+#define HAVE_LINK_EXPORT_DYNAMIC 1
+
+/* Define to 1 if you have the <link.h> header file. */
+#define HAVE_LINK_H 1
+
+/* Define if you can use -Wl,-R. to pass -R. to the linker, in order to add
+   the current directory to the dynamic linker search path. */
+#define HAVE_LINK_R 1
+
+/* Define to 1 if you have the `log' function. */
+#define HAVE_LOG 1
+
+/* Define to 1 if you have the `log10' function. */
+#define HAVE_LOG10 1
+
+/* Define to 1 if you have the `log2' function. */
+#if __FreeBSD_version >= 900027 || (__FreeBSD_version < 900000 && __FreeBSD_version >= 802502)
+#define HAVE_LOG2 1
+#endif
+
+/* Define to 1 if you have the `longjmp' function. */
+#define HAVE_LONGJMP 1
+
+/* Define to 1 if you have the <mach/mach.h> header file. */
+/* #undef HAVE_MACH_MACH_H */
+
+/* Define to 1 if you have the <mach-o/dyld.h> header file. */
+/* #undef HAVE_MACH_O_DYLD_H */
+
+/* Define if mallinfo() is available on this platform. */
+/* #undef HAVE_MALLINFO */
+
+/* Define to 1 if you have the <malloc.h> header file. */
+/* #undef HAVE_MALLOC_H */
+
+/* Define to 1 if you have the <malloc/malloc.h> header file. */
+/* #undef HAVE_MALLOC_MALLOC_H */
+
+/* Define to 1 if you have the `malloc_zone_statistics' function. */
+/* #undef HAVE_MALLOC_ZONE_STATISTICS */
+
+/* Define to 1 if you have the `memcpy' function. */
+#define HAVE_MEMCPY 1
+
+/* Define to 1 if you have the `memmove' function. */
+#define HAVE_MEMMOVE 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#define HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the `mkdtemp' function. */
+#define HAVE_MKDTEMP 1
+
+/* Define to 1 if you have the `mkstemp' function. */
+#define HAVE_MKSTEMP 1
+
+/* Define to 1 if you have the `mktemp' function. */
+#define HAVE_MKTEMP 1
+
+/* Define to 1 if you have a working `mmap' system call. */
+#define HAVE_MMAP 1
+
+/* Define if mmap() uses MAP_ANONYMOUS to map anonymous pages, or undefine if
+   it uses MAP_ANON */
+/* #undef HAVE_MMAP_ANONYMOUS */
+
+/* Define if mmap() can map files into memory */
+#define HAVE_MMAP_FILE 
+
+/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */
+/* #undef HAVE_NDIR_H */
+
+/* Define to 1 if you have the `nearbyintf' function. */
+#define HAVE_NEARBYINTF 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_NEATO */
+
+/* Define to 1 if you have the `opendir' function. */
+#define HAVE_OPENDIR 1
+
+/* Define to 1 if you have the `posix_spawn' function. */
+/* #undef HAVE_POSIX_SPAWN */
+
+/* Define to 1 if you have the `powf' function. */
+#define HAVE_POWF 1
+
+/* Define to 1 if you have the `pread' function. */
+#define HAVE_PREAD 1
+
+/* Define if libtool can extract symbol lists from object files. */
+#define HAVE_PRELOADED_SYMBOLS 1
+
+/* Define to have the %a format string */
+#define HAVE_PRINTF_A 1
+
+/* Have pthread_getspecific */
+/* #undef HAVE_PTHREAD_GETSPECIFIC */
+
+/* Define to 1 if you have the <pthread.h> header file. */
+/* #undef HAVE_PTHREAD_H */
+
+/* Have pthread_mutex_lock */
+/* #undef HAVE_PTHREAD_MUTEX_LOCK */
+
+/* Have pthread_rwlock_init */
+/* #undef HAVE_PTHREAD_RWLOCK_INIT */
+
+/* Define to 1 if srand48/lrand48/drand48 exist in <stdlib.h> */
+#define HAVE_RAND48 1
+
+/* Define to 1 if you have the `readdir' function. */
+#define HAVE_READDIR 1
+
+/* Define to 1 if you have the `realpath' function. */
+#define HAVE_REALPATH 1
+
+/* Define to 1 if you have the `rindex' function. */
+/* #undef HAVE_RINDEX */
+
+/* Define to 1 if you have the `rintf' function. */
+#define HAVE_RINTF 1
+
+/* Define to 1 if you have the `round' function. */
+#define HAVE_ROUND 1
+
+/* Define to 1 if you have the `roundf' function. */
+#define HAVE_ROUNDF 1
+
+/* Define to 1 if you have the `sbrk' function. */
+#define HAVE_SBRK 1
+
+/* Define to 1 if you have the `setenv' function. */
+#define HAVE_SETENV 1
+
+/* Define to 1 if you have the `setjmp' function. */
+#define HAVE_SETJMP 1
+
+/* Define to 1 if you have the <setjmp.h> header file. */
+#define HAVE_SETJMP_H 1
+
+/* Define to 1 if you have the `setrlimit' function. */
+#define HAVE_SETRLIMIT 1
+
+/* Define if you have the shl_load function. */
+/* #undef HAVE_SHL_LOAD */
+
+/* Define to 1 if you have the `siglongjmp' function. */
+#define HAVE_SIGLONGJMP 1
+
+/* Define to 1 if you have the <signal.h> header file. */
+#define HAVE_SIGNAL_H 1
+
+/* Define to 1 if you have the `sigsetjmp' function. */
+#define HAVE_SIGSETJMP 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#define HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdio.h> header file. */
+#define HAVE_STDIO_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#define HAVE_STDLIB_H 1
+
+/* Set to 1 if the std::isinf function is found in <cmath> */
+#define HAVE_STD_ISINF_IN_CMATH 1
+
+/* Set to 1 if the std::isnan function is found in <cmath> */
+#define HAVE_STD_ISNAN_IN_CMATH 1
+
+/* Define to 1 if you have the `strchr' function. */
+#define HAVE_STRCHR 1
+
+/* Define to 1 if you have the `strcmp' function. */
+#define HAVE_STRCMP 1
+
+/* Define to 1 if you have the `strdup' function. */
+#define HAVE_STRDUP 1
+
+/* Define to 1 if you have the `strerror' function. */
+#define HAVE_STRERROR 1
+
+/* Define to 1 if you have the `strerror_r' function. */
+#define HAVE_STRERROR_R 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#define HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#define HAVE_STRING_H 1
+
+/* Define to 1 if you have the `strrchr' function. */
+#define HAVE_STRRCHR 1
+
+/* Define to 1 if you have the `strtof' function. */
+#define HAVE_STRTOF 1
+
+/* Define to 1 if you have the `strtoll' function. */
+#define HAVE_STRTOLL 1
+
+/* Define to 1 if you have the `strtoq' function. */
+#define HAVE_STRTOQ 1
+
+/* Define to 1 if you have the `sysconf' function. */
+#define HAVE_SYSCONF 1
+
+/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
+   */
+/* #undef HAVE_SYS_DIR_H */
+
+/* Define to 1 if you have the <sys/dl.h> header file. */
+/* #undef HAVE_SYS_DL_H */
+
+/* Define to 1 if you have the <sys/ioctl.h> header file. */
+#define HAVE_SYS_IOCTL_H 1
+
+/* Define to 1 if you have the <sys/mman.h> header file. */
+#define HAVE_SYS_MMAN_H 1
+
+/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.
+   */
+/* #undef HAVE_SYS_NDIR_H */
+
+/* Define to 1 if you have the <sys/param.h> header file. */
+#define HAVE_SYS_PARAM_H 1
+
+/* Define to 1 if you have the <sys/resource.h> header file. */
+#define HAVE_SYS_RESOURCE_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#define HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#define HAVE_SYS_TIME_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#define HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <sys/uio.h> header file. */
+#define HAVE_SYS_UIO_H 1
+
+/* Define to 1 if you have <sys/wait.h> that is POSIX.1 compatible. */
+#define HAVE_SYS_WAIT_H 1
+
+/* Define to 1 if you have the <termios.h> header file. */
+#define HAVE_TERMIOS_H 1
+
+/* Define if the neat program is available */
+/* #undef HAVE_TWOPI */
+
+/* Define to 1 if the system has the type `uint64_t'. */
+#define HAVE_UINT64_T 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#define HAVE_UNISTD_H 1
+
+/* Define to 1 if you have the <utime.h> header file. */
+#define HAVE_UTIME_H 1
+
+/* Define to 1 if the system has the type `u_int64_t'. */
+/* #undef HAVE_U_INT64_T */
+
+/* Define to 1 if you have the <valgrind/valgrind.h> header file. */
+/* #undef HAVE_VALGRIND_VALGRIND_H */
+
+/* Define to 1 if you have the <windows.h> header file. */
+/* #undef HAVE_WINDOWS_H */
+
+/* Define to 1 if you have the `writev' function. */
+#define HAVE_WRITEV 1
+
+/* Define if the xdot.py program is available */
+/* #undef HAVE_XDOT_PY */
+
+/* Define to 1 if you have the <zlib.h> header file. */
+#define HAVE_ZLIB_H 1
+
+/* Have host's _alloca */
+/* #undef HAVE__ALLOCA */
+
+/* Have host's __alloca */
+/* #undef HAVE___ALLOCA */
+
+/* Have host's __ashldi3 */
+/* #undef HAVE___ASHLDI3 */
+
+/* Have host's __ashrdi3 */
+/* #undef HAVE___ASHRDI3 */
+
+/* Have host's __chkstk */
+/* #undef HAVE___CHKSTK */
+
+/* Have host's __cmpdi2 */
+/* #undef HAVE___CMPDI2 */
+
+/* Have host's __divdi3 */
+/* #undef HAVE___DIVDI3 */
+
+/* Define to 1 if you have the `__dso_handle' function. */
+#define HAVE___DSO_HANDLE 1
+
+/* Have host's __fixdfdi */
+/* #undef HAVE___FIXDFDI */
+
+/* Have host's __fixsfdi */
+/* #undef HAVE___FIXSFDI */
+
+/* Have host's __floatdidf */
+/* #undef HAVE___FLOATDIDF */
+
+/* Have host's __lshrdi3 */
+/* #undef HAVE___LSHRDI3 */
+
+/* Have host's __main */
+/* #undef HAVE___MAIN */
+
+/* Have host's __moddi3 */
+/* #undef HAVE___MODDI3 */
+
+/* Have host's __udivdi3 */
+/* #undef HAVE___UDIVDI3 */
+
+/* Have host's __umoddi3 */
+/* #undef HAVE___UMODDI3 */
+
+/* Have host's ___chkstk */
+/* #undef HAVE____CHKSTK */
+
+/* Linker version detected at compile time. */
+/* #undef HOST_LINK_VERSION */
+
+/* Installation directory for binary executables */
+/* #undef LLVM_BINDIR */
+
+/* Time at which LLVM was configured */
+/* #undef LLVM_CONFIGTIME */
+
+/* Installation directory for data files */
+/* #undef LLVM_DATADIR */
+
+/* Target triple LLVM will generate code for by default */
+/* #undef LLVM_DEFAULT_TARGET_TRIPLE */
+
+/* Installation directory for documentation */
+/* #undef LLVM_DOCSDIR */
+
+/* Define if threads enabled */
+#define LLVM_ENABLE_THREADS 0
+
+/* Define if zlib is enabled */
+#define LLVM_ENABLE_ZLIB 1
+
+/* Installation directory for config files */
+/* #undef LLVM_ETCDIR */
+
+/* Has gcc/MSVC atomic intrinsics */
+#define LLVM_HAS_ATOMICS 0
+
+/* Host triple LLVM will be executed on */
+/* #undef LLVM_HOST_TRIPLE */
+
+/* Installation directory for include files */
+/* #undef LLVM_INCLUDEDIR */
+
+/* Installation directory for .info files */
+/* #undef LLVM_INFODIR */
+
+/* Installation directory for libraries */
+/* #undef LLVM_LIBDIR */
+
+/* Installation directory for man pages */
+/* #undef LLVM_MANDIR */
+
+/* LLVM architecture name for the native architecture, if available */
+#define LLVM_NATIVE_ARCH X86
+
+/* LLVM name for the native AsmParser init function, if available */
+#define LLVM_NATIVE_ASMPARSER LLVMInitializeX86AsmParser
+
+/* LLVM name for the native AsmPrinter init function, if available */
+#define LLVM_NATIVE_ASMPRINTER LLVMInitializeX86AsmPrinter
+
+/* LLVM name for the native Disassembler init function, if available */
+#define LLVM_NATIVE_DISASSEMBLER LLVMInitializeX86Disassembler
+
+/* LLVM name for the native Target init function, if available */
+#define LLVM_NATIVE_TARGET LLVMInitializeX86Target
+
+/* LLVM name for the native TargetInfo init function, if available */
+#define LLVM_NATIVE_TARGETINFO LLVMInitializeX86TargetInfo
+
+/* LLVM name for the native target MC init function, if available */
+#define LLVM_NATIVE_TARGETMC LLVMInitializeX86TargetMC
+
+/* Define if this is Unixish platform */
+#define LLVM_ON_UNIX 1
+
+/* Define if this is Win32ish platform */
+/* #undef LLVM_ON_WIN32 */
+
+/* Define to path to circo program if found or 'echo circo' otherwise */
+/* #undef LLVM_PATH_CIRCO */
+
+/* Define to path to dot program if found or 'echo dot' otherwise */
+/* #undef LLVM_PATH_DOT */
+
+/* Define to path to dotty program if found or 'echo dotty' otherwise */
+/* #undef LLVM_PATH_DOTTY */
+
+/* Define to path to fdp program if found or 'echo fdp' otherwise */
+/* #undef LLVM_PATH_FDP */
+
+/* Define to path to Graphviz program if found or 'echo Graphviz' otherwise */
+/* #undef LLVM_PATH_GRAPHVIZ */
+
+/* Define to path to gv program if found or 'echo gv' otherwise */
+/* #undef LLVM_PATH_GV */
+
+/* Define to path to neato program if found or 'echo neato' otherwise */
+/* #undef LLVM_PATH_NEATO */
+
+/* Define to path to twopi program if found or 'echo twopi' otherwise */
+/* #undef LLVM_PATH_TWOPI */
+
+/* Define to path to xdot.py program if found or 'echo xdot.py' otherwise */
+/* #undef LLVM_PATH_XDOT_PY */
+
+/* Installation prefix directory */
+#define LLVM_PREFIX ""
+
+/* Define if we have the Intel JIT API runtime support library */
+#define LLVM_USE_INTEL_JITEVENTS 0
+
+/* Define if we have the oprofile JIT-support library */
+#define LLVM_USE_OPROFILE 0
+
+/* Major version of the LLVM API */
+#define LLVM_VERSION_MAJOR 3
+
+/* Minor version of the LLVM API */
+#define LLVM_VERSION_MINOR 3
+
+/* Define if the OS needs help to load dependent libraries for dlopen(). */
+#define LTDL_DLOPEN_DEPLIBS 1
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#define LTDL_OBJDIR ".libs/"
+
+/* Define to the name of the environment variable that determines the dynamic
+   library search path. */
+#define LTDL_SHLIBPATH_VAR "LD_LIBRARY_PATH"
+
+/* Define to the extension used for shared libraries, say, ".so". */
+#define LTDL_SHLIB_EXT ".so"
+
+/* Define to the system default library search path. */
+#define LTDL_SYSSEARCHPATH "/lib:/usr/lib"
+
+/* Define if /dev/zero should be used when mapping RWX memory, or undefine if
+   its not necessary */
+/* #undef NEED_DEV_ZERO_FOR_MMAP */
+
+/* Define if dlsym() requires a leading underscore in symbol names. */
+/* #undef NEED_USCORE */
+
+/* Define to the address where bug reports for this package should be sent. */
+#define PACKAGE_BUGREPORT "http://llvm.org/bugs/"
+
+/* Define to the full name of this package. */
+#define PACKAGE_NAME "LLVM"
+
+/* Define to the full name and version of this package. */
+#define PACKAGE_STRING "LLVM 3.3"
+
+/* Define to the one symbol short name of this package. */
+#define PACKAGE_TARNAME "llvm"
+
+/* Define to the version of this package. */
+#define PACKAGE_VERSION "3.3"
+
+/* Define as the return type of signal handlers (`int' or `void'). */
+#define RETSIGTYPE void
+
+/* Define to 1 if the `S_IS*' macros in <sys/stat.h> do not work properly. */
+/* #undef STAT_MACROS_BROKEN */
+
+/* Define to 1 if you have the ANSI C header files. */
+#define STDC_HEADERS 1
+
+/* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */
+#define TIME_WITH_SYS_TIME 1
+
+/* Define to 1 if your <sys/time.h> declares `struct tm'. */
+/* #undef TM_IN_SYS_TIME */
+
+/* Define if use udis86 library */
+#define USE_UDIS86 0
+
+/* Type of 1st arg on ELM Callback */
+/* #undef WIN32_ELMCB_PCSTR */
+
+/* Define to empty if `const' does not conform to ANSI C. */
+/* #undef const */
+
+/* Define to a type to use for `error_t' if it is not otherwise available. */
+#define error_t int
+
+/* Define to `int' if <sys/types.h> does not define. */
+/* #undef pid_t */
+
+/* Define to `unsigned int' if <sys/types.h> does not define. */
+/* #undef size_t */
+
+#endif
diff --git a/lib/clang/include/llvm/Config/llvm-config.h b/lib/clang/include/llvm/Config/llvm-config.h
new file mode 100644
index 0000000..86e0e49
--- /dev/null
+++ b/lib/clang/include/llvm/Config/llvm-config.h
@@ -0,0 +1,129 @@
+/* $FreeBSD$ */
+/* include/llvm/Config/llvm-config.h.  Generated from llvm-config.h.in by configure.  */
+/*===-- llvm/config/llvm-config.h - llvm configure variable -------*- C -*-===*/
+/*                                                                            */
+/*                     The LLVM Compiler Infrastructure                       */
+/*                                                                            */
+/* This file is distributed under the University of Illinois Open Source      */
+/* License. See LICENSE.TXT for details.                                      */
+/*                                                                            */
+/*===----------------------------------------------------------------------===*/
+
+/* This file enumerates all of the llvm variables from configure so that
+   they can be in exported headers and won't override package specific
+   directives.  This is a C file so we can include it in the llvm-c headers.  */
+
+/* To avoid multiple inclusions of these variables when we include the exported
+   headers and config.h, conditionally include these.  */
+/* TODO: This is a bit of a hack.  */
+#ifndef CONFIG_H
+
+/* Installation directory for binary executables */
+/* #undef LLVM_BINDIR */
+
+/* Time at which LLVM was configured */
+/* #undef LLVM_CONFIGTIME */
+
+/* Installation directory for data files */
+/* #undef LLVM_DATADIR */
+
+/* Target triple LLVM will generate code for by default */
+/* #undef LLVM_DEFAULT_TARGET_TRIPLE */
+
+/* Installation directory for documentation */
+/* #undef LLVM_DOCSDIR */
+
+/* Define if threads enabled */
+#define LLVM_ENABLE_THREADS 0
+
+/* Installation directory for config files */
+/* #undef LLVM_ETCDIR */
+
+/* Has gcc/MSVC atomic intrinsics */
+#define LLVM_HAS_ATOMICS 0
+
+/* Host triple LLVM will be executed on */
+/* #undef LLVM_HOST_TRIPLE */
+
+/* Installation directory for include files */
+/* #undef LLVM_INCLUDEDIR */
+
+/* Installation directory for .info files */
+/* #undef LLVM_INFODIR */
+
+/* Installation directory for libraries */
+/* #undef LLVM_LIBDIR */
+
+/* Installation directory for man pages */
+/* #undef LLVM_MANDIR */
+
+/* LLVM architecture name for the native architecture, if available */
+#define LLVM_NATIVE_ARCH X86
+
+/* LLVM name for the native AsmParser init function, if available */
+#define LLVM_NATIVE_ASMPARSER LLVMInitializeX86AsmParser
+
+/* LLVM name for the native AsmPrinter init function, if available */
+#define LLVM_NATIVE_ASMPRINTER LLVMInitializeX86AsmPrinter
+
+/* LLVM name for the native Disassembler init function, if available */
+#define LLVM_NATIVE_DISASSEMBLER LLVMInitializeX86Disassembler
+
+/* LLVM name for the native Target init function, if available */
+#define LLVM_NATIVE_TARGET LLVMInitializeX86Target
+
+/* LLVM name for the native TargetInfo init function, if available */
+#define LLVM_NATIVE_TARGETINFO LLVMInitializeX86TargetInfo
+
+/* LLVM name for the native target MC init function, if available */
+#define LLVM_NATIVE_TARGETMC LLVMInitializeX86TargetMC
+
+/* Define if this is Unixish platform */
+#define LLVM_ON_UNIX 1
+
+/* Define if this is Win32ish platform */
+/* #undef LLVM_ON_WIN32 */
+
+/* Define to path to circo program if found or 'echo circo' otherwise */
+/* #undef LLVM_PATH_CIRCO */
+
+/* Define to path to dot program if found or 'echo dot' otherwise */
+/* #undef LLVM_PATH_DOT */
+
+/* Define to path to dotty program if found or 'echo dotty' otherwise */
+/* #undef LLVM_PATH_DOTTY */
+
+/* Define to path to fdp program if found or 'echo fdp' otherwise */
+/* #undef LLVM_PATH_FDP */
+
+/* Define to path to Graphviz program if found or 'echo Graphviz' otherwise */
+/* #undef LLVM_PATH_GRAPHVIZ */
+
+/* Define to path to gv program if found or 'echo gv' otherwise */
+/* #undef LLVM_PATH_GV */
+
+/* Define to path to neato program if found or 'echo neato' otherwise */
+/* #undef LLVM_PATH_NEATO */
+
+/* Define to path to twopi program if found or 'echo twopi' otherwise */
+/* #undef LLVM_PATH_TWOPI */
+
+/* Define to path to xdot.py program if found or 'echo xdot.py' otherwise */
+/* #undef LLVM_PATH_XDOT_PY */
+
+/* Installation prefix directory */
+#define LLVM_PREFIX ""
+
+/* Define if we have the Intel JIT API runtime support library */
+#define LLVM_USE_INTEL_JITEVENTS 0
+
+/* Define if we have the oprofile JIT-support library */
+#define LLVM_USE_OPROFILE 0
+
+/* Major version of the LLVM API */
+#define LLVM_VERSION_MAJOR 3
+
+/* Minor version of the LLVM API */
+#define LLVM_VERSION_MINOR 3
+
+#endif
diff --git a/lib/clang/include/llvm/IR/Intrinsics.gen b/lib/clang/include/llvm/IR/Intrinsics.gen
new file mode 100644
index 0000000..a3dbd63
--- /dev/null
+++ b/lib/clang/include/llvm/IR/Intrinsics.gen
@@ -0,0 +1,2 @@
+/* $FreeBSD$ */
+#include "Intrinsics.inc.h"
diff --git a/lib/clang/include/llvm/Support/DataTypes.h b/lib/clang/include/llvm/Support/DataTypes.h
new file mode 100644
index 0000000..d0fdb7c
--- /dev/null
+++ b/lib/clang/include/llvm/Support/DataTypes.h
@@ -0,0 +1,113 @@
+/* $FreeBSD$ */
+/* include/llvm/Support/DataTypes.h.  Generated from DataTypes.h.in by configure.  */
+/*===-- include/System/DataTypes.h - Define fixed size types -----*- C -*-===*\
+|*                                                                            *|
+|*                     The LLVM Compiler Infrastructure                       *|
+|*                                                                            *|
+|* This file is distributed under the University of Illinois Open Source      *|
+|* License. See LICENSE.TXT for details.                                      *|
+|*                                                                            *|
+|*===----------------------------------------------------------------------===*|
+|*                                                                            *|
+|* This file contains definitions to figure out the size of _HOST_ data types.*|
+|* This file is important because different host OS's define different macros,*|
+|* which makes portability tough.  This file exports the following            *|
+|* definitions:                                                               *|
+|*                                                                            *|
+|*   [u]int(32|64)_t : typedefs for signed and unsigned 32/64 bit system types*|
+|*   [U]INT(8|16|32|64)_(MIN|MAX) : Constants for the min and max values.     *|
+|*                                                                            *|
+|* No library is required when using these functions.                         *|
+|*                                                                            *|
+|*===----------------------------------------------------------------------===*/
+
+/* Please leave this file C-compatible. */
+
+#ifndef SUPPORT_DATATYPES_H
+#define SUPPORT_DATATYPES_H
+
+#define HAVE_SYS_TYPES_H 1
+#define HAVE_INTTYPES_H 1
+#define HAVE_STDINT_H 1
+#define HAVE_UINT64_T 1
+/* #undef HAVE_U_INT64_T */
+
+#ifdef __cplusplus
+#include <cmath>
+#else
+#include <math.h>
+#endif
+
+/* Note that this header's correct operation depends on __STDC_LIMIT_MACROS
+   being defined.  We would define it here, but in order to prevent Bad Things
+   happening when system headers or C++ STL headers include stdint.h before we
+   define it here, we define it on the g++ command line (in Makefile.rules). */
+#if !defined(__STDC_LIMIT_MACROS)
+# error "Must #define __STDC_LIMIT_MACROS before #including System/DataTypes.h"
+#endif
+
+#if !defined(__STDC_CONSTANT_MACROS)
+# error "Must #define __STDC_CONSTANT_MACROS before " \
+        "#including System/DataTypes.h"
+#endif
+
+/* Note that <inttypes.h> includes <stdint.h>, if this is a C99 system. */
+#ifdef HAVE_SYS_TYPES_H
+#include <sys/types.h>
+#endif
+
+#ifdef HAVE_INTTYPES_H
+#include <inttypes.h>
+#endif
+
+#ifdef HAVE_STDINT_H
+#include <stdint.h>
+#endif
+
+#ifdef _AIX
+#include "llvm/Support/AIXDataTypesFix.h"
+#endif
+
+/* Handle incorrect definition of uint64_t as u_int64_t */
+#ifndef HAVE_UINT64_T
+#ifdef HAVE_U_INT64_T
+typedef u_int64_t uint64_t;
+#else
+# error "Don't have a definition for uint64_t on this platform"
+#endif
+#endif
+
+#ifdef _OpenBSD_
+#define INT8_MAX 127
+#define INT8_MIN -128
+#define UINT8_MAX 255
+#define INT16_MAX 32767
+#define INT16_MIN -32768
+#define UINT16_MAX 65535
+#define INT32_MAX 2147483647
+#define INT32_MIN -2147483648
+#define UINT32_MAX 4294967295U
+#endif
+
+/* Set defaults for constants which we cannot find. */
+#if !defined(INT64_MAX)
+# define INT64_MAX 9223372036854775807LL
+#endif
+#if !defined(INT64_MIN)
+# define INT64_MIN ((-INT64_MAX)-1)
+#endif
+#if !defined(UINT64_MAX)
+# define UINT64_MAX 0xffffffffffffffffULL
+#endif
+
+#if __GNUC__ > 3
+#define END_WITH_NULL __attribute__((sentinel))
+#else
+#define END_WITH_NULL
+#endif
+
+#ifndef HUGE_VALF
+#define HUGE_VALF (float)HUGE_VAL
+#endif
+
+#endif  /* SUPPORT_DATATYPES_H */
diff --git a/lib/clang/libclanganalysis/Makefile b/lib/clang/libclanganalysis/Makefile
new file mode 100644
index 0000000..40deb80
--- /dev/null
+++ b/lib/clang/libclanganalysis/Makefile
@@ -0,0 +1,37 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clanganalysis
+
+SRCDIR=	tools/clang/lib/Analysis
+SRCS=	AnalysisDeclContext.cpp \
+	BodyFarm.cpp \
+	CFG.cpp \
+	CFGReachabilityAnalysis.cpp \
+	CFGStmtMap.cpp \
+	CallGraph.cpp \
+	CocoaConventions.cpp \
+	Dominators.cpp \
+	FormatString.cpp \
+	LiveVariables.cpp \
+	ObjCNoReturn.cpp \
+	PostOrderCFGView.cpp \
+	PrintfFormatString.cpp \
+	ProgramPoint.cpp \
+	PseudoConstantAnalysis.cpp \
+	ReachableCode.cpp \
+	ScanfFormatString.cpp \
+	ThreadSafety.cpp \
+	UninitializedValues.cpp
+
+TGHDRS=	AttrList \
+	Attrs \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticAnalysisKinds \
+	DiagnosticCommonKinds \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangarcmigrate/Makefile b/lib/clang/libclangarcmigrate/Makefile
new file mode 100644
index 0000000..1604a50
--- /dev/null
+++ b/lib/clang/libclangarcmigrate/Makefile
@@ -0,0 +1,40 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangarcmigrate
+
+SRCDIR=	tools/clang/lib/ARCMigrate
+SRCS=	ARCMT.cpp \
+	ARCMTActions.cpp \
+	FileRemapper.cpp \
+	ObjCMT.cpp \
+	PlistReporter.cpp \
+	TransAPIUses.cpp \
+	TransARCAssign.cpp \
+	TransAutoreleasePool.cpp \
+	TransBlockObjCVariable.cpp \
+	TransEmptyStatementsAndDealloc.cpp \
+	TransGCAttrs.cpp \
+	TransGCCalls.cpp \
+	TransProperties.cpp \
+	TransProtectedScope.cpp \
+	TransRetainReleaseDealloc.cpp \
+	TransUnbridgedCasts.cpp \
+	TransUnusedInitDelegate.cpp \
+	TransZeroOutPropsInDealloc.cpp \
+	TransformActions.cpp \
+	Transforms.cpp
+
+TGHDRS=	AttrList \
+	AttrParsedAttrList \
+	Attrs \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticCommonKinds \
+	DiagnosticGroups \
+	DiagnosticSemaKinds \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangast/Makefile b/lib/clang/libclangast/Makefile
new file mode 100644
index 0000000..a8677255
--- /dev/null
+++ b/lib/clang/libclangast/Makefile
@@ -0,0 +1,82 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangast
+
+SRCDIR=	tools/clang/lib/AST
+SRCS=	APValue.cpp \
+	ASTConsumer.cpp \
+	ASTContext.cpp \
+	ASTDiagnostic.cpp \
+	ASTDumper.cpp \
+	ASTImporter.cpp \
+	AttrImpl.cpp \
+	CXXInheritance.cpp \
+	Comment.cpp \
+	CommentBriefParser.cpp \
+	CommentCommandTraits.cpp \
+	CommentLexer.cpp \
+	CommentParser.cpp \
+	CommentSema.cpp \
+	Decl.cpp \
+	DeclBase.cpp \
+	DeclCXX.cpp \
+	DeclFriend.cpp \
+	DeclGroup.cpp \
+	DeclObjC.cpp \
+	DeclOpenMP.cpp \
+	DeclPrinter.cpp \
+	DeclTemplate.cpp \
+	DeclarationName.cpp \
+	DumpXML.cpp \
+	Expr.cpp \
+	ExprCXX.cpp \
+	ExprClassification.cpp \
+	ExprConstant.cpp \
+	ExternalASTSource.cpp \
+	InheritViz.cpp \
+	ItaniumCXXABI.cpp \
+	ItaniumMangle.cpp \
+	LambdaMangleContext.cpp \
+	Mangle.cpp \
+	MicrosoftCXXABI.cpp \
+	MicrosoftMangle.cpp \
+	NSAPI.cpp \
+	NestedNameSpecifier.cpp \
+	ParentMap.cpp \
+	RawCommentList.cpp \
+	RecordLayout.cpp \
+	RecordLayoutBuilder.cpp \
+	SelectorLocationsKind.cpp \
+	Stmt.cpp \
+	StmtIterator.cpp \
+	StmtPrinter.cpp \
+	StmtProfile.cpp \
+	StmtViz.cpp \
+	TemplateBase.cpp \
+	TemplateName.cpp \
+	Type.cpp \
+	TypeLoc.cpp \
+	TypePrinter.cpp \
+	VTTBuilder.cpp \
+	VTableBuilder.cpp
+
+TGHDRS=	AttrDump \
+	AttrImpl \
+	AttrList \
+	Attrs \
+	CommentCommandInfo \
+	CommentCommandList \
+	CommentHTMLNamedCharacterReferences \
+	CommentHTMLTags \
+	CommentHTMLTagsProperties \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticASTKinds \
+	DiagnosticCommentKinds \
+	DiagnosticCommonKinds \
+	DiagnosticSemaKinds \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangbasic/Makefile b/lib/clang/libclangbasic/Makefile
new file mode 100644
index 0000000..16bae4c
--- /dev/null
+++ b/lib/clang/libclangbasic/Makefile
@@ -0,0 +1,42 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangbasic
+
+SRCDIR=	tools/clang/lib/Basic
+SRCS=	Builtins.cpp \
+	CharInfo.cpp \
+	Diagnostic.cpp \
+	DiagnosticIDs.cpp \
+	FileManager.cpp \
+	FileSystemStatCache.cpp \
+	IdentifierTable.cpp \
+	LangOptions.cpp \
+	Module.cpp \
+	ObjCRuntime.cpp \
+	OpenMPKinds.cpp \
+	OperatorPrecedence.cpp \
+	SourceLocation.cpp \
+	SourceManager.cpp \
+	TargetInfo.cpp \
+	Targets.cpp \
+	TokenKinds.cpp \
+	Version.cpp \
+	VersionTuple.cpp
+
+TGHDRS=	DiagnosticAnalysisKinds \
+	DiagnosticASTKinds \
+	DiagnosticCommentKinds \
+	DiagnosticCommonKinds \
+	DiagnosticDriverKinds \
+	DiagnosticFrontendKinds \
+	DiagnosticGroups \
+	DiagnosticIndexName \
+	DiagnosticLexKinds \
+	DiagnosticParseKinds \
+	DiagnosticSemaKinds \
+	DiagnosticSerializationKinds \
+	arm_neon
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangcodegen/Makefile b/lib/clang/libclangcodegen/Makefile
new file mode 100644
index 0000000..cf58049
--- /dev/null
+++ b/lib/clang/libclangcodegen/Makefile
@@ -0,0 +1,60 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangcodegen
+
+SRCDIR=	tools/clang/lib/CodeGen
+SRCS=	BackendUtil.cpp \
+	CGAtomic.cpp \
+	CGBlocks.cpp \
+	CGBuiltin.cpp \
+	CGCUDANV.cpp \
+	CGCUDARuntime.cpp \
+	CGCXX.cpp \
+	CGCXXABI.cpp \
+	CGCall.cpp \
+	CGClass.cpp \
+	CGCleanup.cpp \
+	CGDebugInfo.cpp \
+	CGDecl.cpp \
+	CGDeclCXX.cpp \
+	CGException.cpp \
+	CGExpr.cpp \
+	CGExprAgg.cpp \
+	CGExprCXX.cpp \
+	CGExprComplex.cpp \
+	CGExprConstant.cpp \
+	CGExprScalar.cpp \
+	CGObjC.cpp \
+	CGObjCGNU.cpp \
+	CGObjCMac.cpp \
+	CGObjCRuntime.cpp \
+	CGOpenCLRuntime.cpp \
+	CGRTTI.cpp \
+	CGRecordLayoutBuilder.cpp \
+	CGStmt.cpp \
+	CGVTT.cpp \
+	CGVTables.cpp \
+	CodeGenAction.cpp \
+	CodeGenFunction.cpp \
+	CodeGenModule.cpp \
+	CodeGenTBAA.cpp \
+	CodeGenTypes.cpp \
+	ItaniumCXXABI.cpp \
+	MicrosoftCXXABI.cpp \
+	ModuleBuilder.cpp \
+	TargetInfo.cpp
+
+TGHDRS=	AttrList \
+	Attrs \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticCommonKinds \
+	DiagnosticFrontendKinds \
+	Intrinsics \
+	StmtNodes \
+	arm_neon
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangdriver/Makefile b/lib/clang/libclangdriver/Makefile
new file mode 100644
index 0000000..aae2a05
--- /dev/null
+++ b/lib/clang/libclangdriver/Makefile
@@ -0,0 +1,31 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangdriver
+
+SRCDIR=	tools/clang/lib/Driver
+SRCS=	Action.cpp \
+	Arg.cpp \
+	ArgList.cpp \
+	CC1AsOptions.cpp \
+	Compilation.cpp \
+	Driver.cpp \
+	DriverOptions.cpp \
+	Job.cpp \
+	OptTable.cpp \
+	Option.cpp \
+	Phases.cpp \
+	Tool.cpp \
+	ToolChain.cpp \
+	ToolChains.cpp \
+	Tools.cpp \
+	Types.cpp \
+	WindowsToolChain.cpp
+
+TGHDRS=	CC1AsOptions \
+	DiagnosticCommonKinds \
+	DiagnosticDriverKinds \
+	Options
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangedit/Makefile b/lib/clang/libclangedit/Makefile
new file mode 100644
index 0000000..f403b00
--- /dev/null
+++ b/lib/clang/libclangedit/Makefile
@@ -0,0 +1,20 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangedit
+
+SRCDIR=	tools/clang/lib/Edit
+SRCS=	Commit.cpp \
+	EditedSource.cpp \
+	RewriteObjCFoundationAPI.cpp
+
+TGHDRS=	AttrList \
+	Attrs \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	StmtNodes \
+	DiagnosticCommonKinds
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangfrontend/Makefile b/lib/clang/libclangfrontend/Makefile
new file mode 100644
index 0000000..4ea3556
--- /dev/null
+++ b/lib/clang/libclangfrontend/Makefile
@@ -0,0 +1,53 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangfrontend
+
+SRCDIR=	tools/clang/lib/Frontend
+SRCS=	ASTConsumers.cpp \
+	ASTMerge.cpp \
+	ASTUnit.cpp \
+	CacheTokens.cpp \
+	ChainedDiagnosticConsumer.cpp \
+	ChainedIncludesSource.cpp \
+	CompilerInstance.cpp \
+	CompilerInvocation.cpp \
+	CreateInvocationFromCommandLine.cpp \
+	DependencyFile.cpp \
+	DependencyGraph.cpp \
+	DiagnosticRenderer.cpp \
+	FrontendAction.cpp \
+	FrontendActions.cpp \
+	FrontendOptions.cpp \
+	HeaderIncludeGen.cpp \
+	InitHeaderSearch.cpp \
+	InitPreprocessor.cpp \
+	LangStandards.cpp \
+	LayoutOverrideSource.cpp \
+	LogDiagnosticPrinter.cpp \
+	MultiplexConsumer.cpp \
+	PrintPreprocessedOutput.cpp \
+	SerializedDiagnosticPrinter.cpp \
+	TextDiagnostic.cpp \
+	TextDiagnosticBuffer.cpp \
+	TextDiagnosticPrinter.cpp \
+	VerifyDiagnosticConsumer.cpp \
+	Warnings.cpp
+
+TGHDRS=	AttrList \
+	AttrParsedAttrList \
+	Attrs \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticASTKinds \
+	DiagnosticCommonKinds \
+	DiagnosticDriverKinds \
+	DiagnosticFrontendKinds \
+	DiagnosticLexKinds \
+	DiagnosticSemaKinds \
+	Options \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangfrontendtool/Makefile b/lib/clang/libclangfrontendtool/Makefile
new file mode 100644
index 0000000..f20aa35
--- /dev/null
+++ b/lib/clang/libclangfrontendtool/Makefile
@@ -0,0 +1,14 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangfrontendtool
+
+SRCDIR=	tools/clang/lib/FrontendTool
+SRCS=	ExecuteCompilerInvocation.cpp
+
+TGHDRS=	DiagnosticCommonKinds \
+	DiagnosticFrontendKinds \
+	Options
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclanglex/Makefile b/lib/clang/libclanglex/Makefile
new file mode 100644
index 0000000..3a2873f
--- /dev/null
+++ b/lib/clang/libclanglex/Makefile
@@ -0,0 +1,35 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clanglex
+
+SRCDIR=	tools/clang/lib/Lex
+SRCS=	HeaderMap.cpp \
+	HeaderSearch.cpp \
+	Lexer.cpp \
+	LiteralSupport.cpp \
+	MacroArgs.cpp \
+	MacroInfo.cpp \
+	ModuleMap.cpp \
+	PPCaching.cpp \
+	PPCallbacks.cpp \
+	PPConditionalDirectiveRecord.cpp \
+	PPDirectives.cpp \
+	PPExpressions.cpp \
+	PPLexerChange.cpp \
+	PPMacroExpansion.cpp \
+	PTHLexer.cpp \
+	Pragma.cpp \
+	PreprocessingRecord.cpp \
+	Preprocessor.cpp \
+	PreprocessorLexer.cpp \
+	ScratchBuffer.cpp \
+	TokenConcatenation.cpp \
+	TokenLexer.cpp
+
+TGHDRS=	AttrSpellings \
+	DiagnosticCommonKinds \
+	DiagnosticLexKinds
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangparse/Makefile b/lib/clang/libclangparse/Makefile
new file mode 100644
index 0000000..279d003
--- /dev/null
+++ b/lib/clang/libclangparse/Makefile
@@ -0,0 +1,36 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangparse
+
+SRCDIR=	tools/clang/lib/Parse
+SRCS=	ParseAST.cpp \
+	ParseCXXInlineMethods.cpp \
+	ParseDecl.cpp \
+	ParseDeclCXX.cpp \
+	ParseExpr.cpp \
+	ParseExprCXX.cpp \
+	ParseInit.cpp \
+	ParseObjc.cpp \
+	ParseOpenMP.cpp \
+	ParsePragma.cpp \
+	ParseStmt.cpp \
+	ParseTemplate.cpp \
+	ParseTentative.cpp \
+	Parser.cpp
+
+TGHDRS=	AttrLateParsed \
+	AttrList \
+	AttrParsedAttrList \
+	AttrExprArgs \
+	Attrs \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticCommonKinds \
+	DiagnosticParseKinds \
+	DiagnosticSemaKinds \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangrewritecore/Makefile b/lib/clang/libclangrewritecore/Makefile
new file mode 100644
index 0000000..80115ee
--- /dev/null
+++ b/lib/clang/libclangrewritecore/Makefile
@@ -0,0 +1,20 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangrewritecore
+
+SRCDIR=	tools/clang/lib/Rewrite/Core
+SRCS=	DeltaTree.cpp \
+	HTMLRewrite.cpp \
+	RewriteRope.cpp \
+	Rewriter.cpp \
+	TokenRewriter.cpp
+
+TGHDRS=	AttrList \
+	Attrs \
+	DeclNodes \
+	DiagnosticCommonKinds \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangrewritefrontend/Makefile b/lib/clang/libclangrewritefrontend/Makefile
new file mode 100644
index 0000000..8c41669
--- /dev/null
+++ b/lib/clang/libclangrewritefrontend/Makefile
@@ -0,0 +1,26 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangrewritefrontend
+
+SRCDIR=	tools/clang/lib/Rewrite/Frontend
+SRCS=	FixItRewriter.cpp \
+	FrontendActions.cpp \
+	HTMLPrint.cpp \
+	InclusionRewriter.cpp \
+	RewriteMacros.cpp \
+	RewriteModernObjC.cpp \
+	RewriteObjC.cpp \
+	RewriteTest.cpp
+
+TGHDRS=	AttrList \
+	AttrParsedAttrList \
+	Attrs \
+	CommentCommandList \
+	DeclNodes \
+	DiagnosticCommonKinds \
+	DiagnosticFrontendKinds \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangsema/Makefile b/lib/clang/libclangsema/Makefile
new file mode 100644
index 0000000..c9f56d4
--- /dev/null
+++ b/lib/clang/libclangsema/Makefile
@@ -0,0 +1,71 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangsema
+
+SRCDIR=	tools/clang/lib/Sema
+SRCS=	AnalysisBasedWarnings.cpp \
+	AttributeList.cpp \
+	CodeCompleteConsumer.cpp \
+	DeclSpec.cpp \
+	DelayedDiagnostic.cpp \
+	IdentifierResolver.cpp \
+	JumpDiagnostics.cpp \
+	MultiplexExternalSemaSource.cpp \
+	Scope.cpp \
+	ScopeInfo.cpp \
+	Sema.cpp \
+	SemaAccess.cpp \
+	SemaAttr.cpp \
+	SemaCXXScopeSpec.cpp \
+	SemaCast.cpp \
+	SemaChecking.cpp \
+	SemaCodeComplete.cpp \
+	SemaConsumer.cpp \
+	SemaDecl.cpp \
+	SemaDeclAttr.cpp \
+	SemaDeclCXX.cpp \
+	SemaDeclObjC.cpp \
+	SemaExceptionSpec.cpp \
+	SemaExpr.cpp \
+	SemaExprCXX.cpp \
+	SemaExprMember.cpp \
+	SemaExprObjC.cpp \
+	SemaFixItUtils.cpp \
+	SemaInit.cpp \
+	SemaLambda.cpp \
+	SemaLookup.cpp \
+	SemaObjCProperty.cpp \
+	SemaOpenMP.cpp \
+	SemaOverload.cpp \
+	SemaPseudoObject.cpp \
+	SemaStmt.cpp \
+	SemaStmtAsm.cpp \
+	SemaStmtAttr.cpp \
+	SemaTemplate.cpp \
+	SemaTemplateDeduction.cpp \
+	SemaTemplateInstantiate.cpp \
+	SemaTemplateInstantiateDecl.cpp \
+	SemaTemplateVariadic.cpp \
+	SemaType.cpp \
+	TargetAttributesSema.cpp
+
+TGHDRS=	AttrList \
+	AttrParsedAttrKinds \
+	AttrParsedAttrList \
+	AttrSpellingListIndex \
+	AttrTemplateInstantiate \
+	Attrs \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticASTKinds \
+	DiagnosticCommentKinds \
+	DiagnosticCommonKinds \
+	DiagnosticParseKinds \
+	DiagnosticSemaKinds \
+	StmtNodes \
+	arm_neon
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangserialization/Makefile b/lib/clang/libclangserialization/Makefile
new file mode 100644
index 0000000..3a6a65e
--- /dev/null
+++ b/lib/clang/libclangserialization/Makefile
@@ -0,0 +1,34 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangserialization
+
+SRCDIR=	tools/clang/lib/Serialization
+SRCS=	ASTCommon.cpp \
+	ASTReader.cpp \
+	ASTReaderDecl.cpp \
+	ASTReaderStmt.cpp \
+	ASTWriter.cpp \
+	ASTWriterDecl.cpp \
+	ASTWriterStmt.cpp \
+	GeneratePCH.cpp \
+	GlobalModuleIndex.cpp \
+	Module.cpp \
+	ModuleManager.cpp
+
+TGHDRS=	AttrList \
+	AttrPCHRead \
+	AttrPCHWrite \
+	AttrParsedAttrList \
+	Attrs \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticCommonKinds \
+	DiagnosticFrontendKinds \
+	DiagnosticSemaKinds \
+	DiagnosticSerializationKinds \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangstaticanalyzercheckers/Makefile b/lib/clang/libclangstaticanalyzercheckers/Makefile
new file mode 100644
index 0000000..10968d2
--- /dev/null
+++ b/lib/clang/libclangstaticanalyzercheckers/Makefile
@@ -0,0 +1,85 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangstaticanalyzercheckers
+
+SRCDIR=	tools/clang/lib/StaticAnalyzer/Checkers
+SRCS=	AllocationDiagnostics.cpp \
+	AnalyzerStatsChecker.cpp \
+	ArrayBoundChecker.cpp \
+	ArrayBoundCheckerV2.cpp \
+	BasicObjCFoundationChecks.cpp \
+	BoolAssignmentChecker.cpp \
+	BuiltinFunctionChecker.cpp \
+	CStringChecker.cpp \
+	CStringSyntaxChecker.cpp \
+	CallAndMessageChecker.cpp \
+	CastSizeChecker.cpp \
+	CastToStructChecker.cpp \
+	CheckObjCDealloc.cpp \
+	CheckObjCInstMethSignature.cpp \
+	CheckSecuritySyntaxOnly.cpp \
+	CheckSizeofPointer.cpp \
+	CheckerDocumentation.cpp \
+	ChrootChecker.cpp \
+	ClangCheckers.cpp \
+	CommonBugCategories.cpp \
+	DeadStoresChecker.cpp \
+	DebugCheckers.cpp \
+	DereferenceChecker.cpp \
+	DirectIvarAssignment.cpp \
+	DivZeroChecker.cpp \
+	DynamicTypePropagation.cpp \
+	ExprInspectionChecker.cpp \
+	FixedAddressChecker.cpp \
+	GenericTaintChecker.cpp \
+	IdempotentOperationChecker.cpp \
+	IvarInvalidationChecker.cpp \
+	LLVMConventionsChecker.cpp \
+	MacOSKeychainAPIChecker.cpp \
+	MacOSXAPIChecker.cpp \
+	MallocChecker.cpp \
+	MallocOverflowSecurityChecker.cpp \
+	MallocSizeofChecker.cpp \
+	NSAutoreleasePoolChecker.cpp \
+	NSErrorChecker.cpp \
+	NonNullParamChecker.cpp \
+	NoReturnFunctionChecker.cpp \
+	ObjCAtSyncChecker.cpp \
+	ObjCContainersASTChecker.cpp \
+	ObjCContainersChecker.cpp \
+	ObjCMissingSuperCallChecker.cpp \
+	ObjCSelfInitChecker.cpp \
+	ObjCUnusedIVarsChecker.cpp \
+	PointerArithChecker.cpp \
+	PointerSubChecker.cpp \
+	PthreadLockChecker.cpp \
+	RetainCountChecker.cpp \
+	ReturnPointerRangeChecker.cpp \
+	ReturnUndefChecker.cpp \
+	SimpleStreamChecker.cpp \
+	StackAddrEscapeChecker.cpp \
+	StreamChecker.cpp \
+	TaintTesterChecker.cpp \
+	TraversalChecker.cpp \
+	UndefBranchChecker.cpp \
+	UndefCapturedBlockVarChecker.cpp \
+	UndefResultChecker.cpp \
+	UndefinedArraySubscriptChecker.cpp \
+	UndefinedAssignmentChecker.cpp \
+	UnixAPIChecker.cpp \
+	UnreachableCodeChecker.cpp \
+	VLASizeChecker.cpp \
+	VirtualCallChecker.cpp
+
+TGHDRS=	AttrList \
+	Attrs \
+	Checkers \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticCommonKinds \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangstaticanalyzercore/Makefile b/lib/clang/libclangstaticanalyzercore/Makefile
new file mode 100644
index 0000000..eda991e
--- /dev/null
+++ b/lib/clang/libclangstaticanalyzercore/Makefile
@@ -0,0 +1,55 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangstaticanalyzercore
+
+SRCDIR=	tools/clang/lib/StaticAnalyzer/Core
+SRCS=	APSIntType.cpp \
+	AnalysisManager.cpp \
+	AnalyzerOptions.cpp \
+	BasicValueFactory.cpp \
+	BlockCounter.cpp \
+	BugReporter.cpp \
+	BugReporterVisitors.cpp \
+	CallEvent.cpp \
+	Checker.cpp \
+	CheckerContext.cpp \
+	CheckerHelpers.cpp \
+	CheckerManager.cpp \
+	CheckerRegistry.cpp \
+	ConstraintManager.cpp \
+	CoreEngine.cpp \
+	Environment.cpp \
+	ExplodedGraph.cpp \
+	ExprEngine.cpp \
+	ExprEngineC.cpp \
+	ExprEngineCXX.cpp \
+	ExprEngineCallAndReturn.cpp \
+	ExprEngineObjC.cpp \
+	FunctionSummary.cpp \
+	HTMLDiagnostics.cpp \
+	MemRegion.cpp \
+	PathDiagnostic.cpp \
+	PlistDiagnostics.cpp \
+	ProgramState.cpp \
+	RangeConstraintManager.cpp \
+	RegionStore.cpp \
+	SValBuilder.cpp \
+	SVals.cpp \
+	SimpleConstraintManager.cpp \
+	SimpleSValBuilder.cpp \
+	Store.cpp \
+	SubEngine.cpp \
+	SymbolManager.cpp \
+	TextPathDiagnostics.cpp
+
+TGHDRS=	AttrList \
+	Attrs \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticCommonKinds \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libclangstaticanalyzerfrontend/Makefile b/lib/clang/libclangstaticanalyzerfrontend/Makefile
new file mode 100644
index 0000000..de7b326
--- /dev/null
+++ b/lib/clang/libclangstaticanalyzerfrontend/Makefile
@@ -0,0 +1,22 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	clangstaticanalyzerfrontend
+
+SRCDIR=	tools/clang/lib/StaticAnalyzer/Frontend
+SRCS=	AnalysisConsumer.cpp \
+	CheckerRegistration.cpp \
+	FrontendActions.cpp
+
+TGHDRS=	AttrList \
+	Attrs \
+	Checkers \
+	CommentCommandList \
+	CommentNodes \
+	DeclNodes \
+	DiagnosticCommonKinds \
+	DiagnosticFrontendKinds \
+	StmtNodes
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmanalysis/Makefile b/lib/clang/libllvmanalysis/Makefile
new file mode 100644
index 0000000..1bd8e9e
--- /dev/null
+++ b/lib/clang/libllvmanalysis/Makefile
@@ -0,0 +1,73 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmanalysis
+
+SRCDIR=	lib/Analysis
+SRCS=	AliasAnalysis.cpp \
+	AliasAnalysisCounter.cpp \
+	AliasAnalysisEvaluator.cpp \
+	AliasDebugger.cpp \
+	AliasSetTracker.cpp \
+	Analysis.cpp \
+	BasicAliasAnalysis.cpp \
+	BranchProbabilityInfo.cpp \
+	CFGPrinter.cpp \
+	CaptureTracking.cpp \
+	CodeMetrics.cpp \
+	ConstantFolding.cpp \
+	CostModel.cpp \
+	DependenceAnalysis.cpp \
+	DomPrinter.cpp \
+	DominanceFrontier.cpp \
+	IVUsers.cpp \
+	InstCount.cpp \
+	InstructionSimplify.cpp \
+	Interval.cpp \
+	IntervalPartition.cpp \
+	LazyValueInfo.cpp \
+	LibCallAliasAnalysis.cpp \
+	LibCallSemantics.cpp \
+	Lint.cpp \
+	Loads.cpp \
+	LoopInfo.cpp \
+	LoopPass.cpp \
+	MemDepPrinter.cpp \
+	MemoryBuiltins.cpp \
+	MemoryDependenceAnalysis.cpp \
+	ModuleDebugInfoPrinter.cpp \
+	NoAliasAnalysis.cpp \
+	PHITransAddr.cpp \
+	PathNumbering.cpp \
+	PathProfileInfo.cpp \
+	PathProfileVerifier.cpp \
+	PostDominators.cpp \
+	ProfileDataLoader.cpp \
+	ProfileDataLoaderPass.cpp \
+	ProfileEstimatorPass.cpp \
+	ProfileInfo.cpp \
+	ProfileInfoLoader.cpp \
+	ProfileInfoLoaderPass.cpp \
+	ProfileVerifierPass.cpp \
+	PtrUseVisitor.cpp \
+	RegionInfo.cpp \
+	RegionPass.cpp \
+	RegionPrinter.cpp \
+	ScalarEvolution.cpp \
+	ScalarEvolutionAliasAnalysis.cpp \
+	ScalarEvolutionExpander.cpp \
+	ScalarEvolutionNormalization.cpp \
+	SparsePropagation.cpp \
+	TargetTransformInfo.cpp \
+	Trace.cpp \
+	TypeBasedAliasAnalysis.cpp \
+	ValueTracking.cpp
+
+.if ${MK_CLANG_EXTRAS} != "no"
+SRCS+=	BlockFrequencyInfo.cpp
+.endif
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmarchive/Makefile b/lib/clang/libllvmarchive/Makefile
new file mode 100644
index 0000000..d553405
--- /dev/null
+++ b/lib/clang/libllvmarchive/Makefile
@@ -0,0 +1,12 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmarchive
+
+SRCDIR=	lib/Archive
+SRCS=	Archive.cpp \
+	ArchiveReader.cpp \
+	ArchiveWriter.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmarmasmparser/Makefile b/lib/clang/libllvmarmasmparser/Makefile
new file mode 100644
index 0000000..134d8a2
--- /dev/null
+++ b/lib/clang/libllvmarmasmparser/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmarmasmparser
+
+SRCDIR=	lib/Target/ARM/AsmParser
+INCDIR=	lib/Target/ARM
+SRCS=	ARMAsmParser.cpp
+
+TGHDRS=	ARMGenAsmMatcher \
+	ARMGenInstrInfo \
+	ARMGenRegisterInfo \
+	ARMGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmarmcodegen/Makefile b/lib/clang/libllvmarmcodegen/Makefile
new file mode 100644
index 0000000..db57418
--- /dev/null
+++ b/lib/clang/libllvmarmcodegen/Makefile
@@ -0,0 +1,53 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmarmcodegen
+
+SRCDIR=	lib/Target/ARM
+SRCS=	A15SDOptimizer.cpp \
+	ARMAsmPrinter.cpp \
+	ARMBaseInstrInfo.cpp \
+	ARMBaseRegisterInfo.cpp \
+	ARMCodeEmitter.cpp \
+	ARMConstantIslandPass.cpp \
+	ARMConstantPoolValue.cpp \
+	ARMExpandPseudoInsts.cpp \
+	ARMFastISel.cpp \
+	ARMFrameLowering.cpp \
+	ARMHazardRecognizer.cpp \
+	ARMISelDAGToDAG.cpp \
+	ARMISelLowering.cpp \
+	ARMInstrInfo.cpp \
+	ARMJITInfo.cpp \
+	ARMLoadStoreOptimizer.cpp \
+	ARMMCInstLower.cpp \
+	ARMMachineFunctionInfo.cpp \
+	ARMRegisterInfo.cpp \
+	ARMSelectionDAGInfo.cpp \
+	ARMSubtarget.cpp \
+	ARMTargetMachine.cpp \
+	ARMTargetObjectFile.cpp \
+	ARMTargetTransformInfo.cpp \
+	MLxExpansionPass.cpp \
+	Thumb1FrameLowering.cpp \
+	Thumb1InstrInfo.cpp \
+	Thumb1RegisterInfo.cpp \
+	Thumb2ITBlockPass.cpp \
+	Thumb2InstrInfo.cpp \
+	Thumb2RegisterInfo.cpp \
+	Thumb2SizeReduction.cpp
+
+TGHDRS=	ARMGenAsmWriter \
+	ARMGenCallingConv \
+	ARMGenCodeEmitter \
+	ARMGenDAGISel \
+	ARMGenFastISel \
+	ARMGenInstrInfo \
+	ARMGenMCCodeEmitter \
+	ARMGenMCPseudoLowering \
+	ARMGenRegisterInfo \
+	ARMGenSubtargetInfo \
+	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmarmdesc/Makefile b/lib/clang/libllvmarmdesc/Makefile
new file mode 100644
index 0000000..777e669
--- /dev/null
+++ b/lib/clang/libllvmarmdesc/Makefile
@@ -0,0 +1,24 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmarmdesc
+
+SRCDIR=	lib/Target/ARM/MCTargetDesc
+SRCS=	ARMAsmBackend.cpp \
+	ARMELFObjectWriter.cpp \
+	ARMELFStreamer.cpp \
+	ARMMachObjectWriter.cpp \
+	ARMMCAsmInfo.cpp \
+	ARMMCCodeEmitter.cpp \
+	ARMMCExpr.cpp \
+	ARMMCTargetDesc.cpp \
+	ARMUnwindOpAsm.cpp
+CFLAGS+= -I${LLVM_SRCS}/${SRCDIR}/..
+
+TGHDRS=	ARMGenInstrInfo \
+	ARMGenMCCodeEmitter \
+	ARMGenRegisterInfo \
+	ARMGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmarmdisassembler/Makefile b/lib/clang/libllvmarmdisassembler/Makefile
new file mode 100644
index 0000000..6af7265
--- /dev/null
+++ b/lib/clang/libllvmarmdisassembler/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmarmdisassembler
+
+SRCDIR=	lib/Target/ARM/Disassembler
+INCDIR=	lib/Target/ARM
+SRCS=	ARMDisassembler.cpp
+
+TGHDRS=	ARMGenDisassemblerTables \
+	ARMGenInstrInfo \
+	ARMGenRegisterInfo \
+	ARMGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmarminfo/Makefile b/lib/clang/libllvmarminfo/Makefile
new file mode 100644
index 0000000..1da434c
--- /dev/null
+++ b/lib/clang/libllvmarminfo/Makefile
@@ -0,0 +1,15 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmarminfo
+
+SRCDIR=	lib/Target/ARM/TargetInfo
+INCDIR=	lib/Target/ARM
+SRCS=	ARMTargetInfo.cpp
+
+TGHDRS=	ARMGenInstrInfo \
+	ARMGenRegisterInfo \
+	ARMGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmarminstprinter/Makefile b/lib/clang/libllvmarminstprinter/Makefile
new file mode 100644
index 0000000..67b8fee
--- /dev/null
+++ b/lib/clang/libllvmarminstprinter/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmarminstprinter
+
+SRCDIR=	lib/Target/ARM/InstPrinter
+INCDIR=	lib/Target/ARM
+SRCS=	ARMInstPrinter.cpp
+
+TGHDRS=	ARMGenAsmWriter \
+	ARMGenInstrInfo \
+	ARMGenRegisterInfo \
+	ARMGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmasmparser/Makefile b/lib/clang/libllvmasmparser/Makefile
new file mode 100644
index 0000000..bb8f0df
--- /dev/null
+++ b/lib/clang/libllvmasmparser/Makefile
@@ -0,0 +1,12 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmasmparser
+
+SRCDIR=	lib/AsmParser
+SRCS=	LLLexer.cpp \
+	LLParser.cpp \
+	Parser.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmasmprinter/Makefile b/lib/clang/libllvmasmprinter/Makefile
new file mode 100644
index 0000000..5df0898
--- /dev/null
+++ b/lib/clang/libllvmasmprinter/Makefile
@@ -0,0 +1,24 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmasmprinter
+
+SRCDIR=	lib/CodeGen/AsmPrinter
+SRCS=	ARMException.cpp \
+	AsmPrinter.cpp \
+	AsmPrinterDwarf.cpp \
+	AsmPrinterInlineAsm.cpp \
+	DIE.cpp \
+	DwarfAccelTable.cpp \
+	DwarfCFIException.cpp \
+	DwarfCompileUnit.cpp \
+	DwarfDebug.cpp \
+	DwarfException.cpp \
+	ErlangGCPrinter.cpp \
+	OcamlGCPrinter.cpp \
+	Win64Exception.cpp
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmbitreader/Makefile b/lib/clang/libllvmbitreader/Makefile
new file mode 100644
index 0000000..6add8a3
--- /dev/null
+++ b/lib/clang/libllvmbitreader/Makefile
@@ -0,0 +1,14 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmbitreader
+
+SRCDIR=	lib/Bitcode/Reader
+SRCS=	BitReader.cpp \
+	BitcodeReader.cpp \
+	BitstreamReader.cpp
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmbitwriter/Makefile b/lib/clang/libllvmbitwriter/Makefile
new file mode 100644
index 0000000..a99d1ac
--- /dev/null
+++ b/lib/clang/libllvmbitwriter/Makefile
@@ -0,0 +1,13 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmbitwriter
+
+SRCDIR=	lib/Bitcode/Writer
+SRCS=	BitWriter.cpp \
+	BitcodeWriter.cpp \
+	BitcodeWriterPass.cpp \
+	ValueEnumerator.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmcodegen/Makefile b/lib/clang/libllvmcodegen/Makefile
new file mode 100644
index 0000000..1d41a6a
--- /dev/null
+++ b/lib/clang/libllvmcodegen/Makefile
@@ -0,0 +1,121 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmcodegen
+
+SRCDIR=	lib/CodeGen
+SRCS=	AggressiveAntiDepBreaker.cpp \
+	AllocationOrder.cpp \
+	Analysis.cpp \
+	BasicTargetTransformInfo.cpp \
+	BranchFolding.cpp \
+	CalcSpillWeights.cpp \
+	CallingConvLower.cpp \
+	CodeGen.cpp \
+	CriticalAntiDepBreaker.cpp \
+	DFAPacketizer.cpp \
+	DeadMachineInstructionElim.cpp \
+	DwarfEHPrepare.cpp \
+	EarlyIfConversion.cpp \
+	EdgeBundles.cpp \
+	ErlangGC.cpp \
+	ExecutionDepsFix.cpp \
+	ExpandISelPseudos.cpp \
+	ExpandPostRAPseudos.cpp \
+	GCMetadata.cpp \
+	GCMetadataPrinter.cpp \
+	GCStrategy.cpp \
+	IfConversion.cpp \
+	InlineSpiller.cpp \
+	InterferenceCache.cpp \
+	IntrinsicLowering.cpp \
+	JITCodeEmitter.cpp \
+	LLVMTargetMachine.cpp \
+	LatencyPriorityQueue.cpp \
+	LexicalScopes.cpp \
+	LiveDebugVariables.cpp \
+	LiveInterval.cpp \
+	LiveIntervalAnalysis.cpp \
+	LiveIntervalUnion.cpp \
+	LiveRangeCalc.cpp \
+	LiveRangeEdit.cpp \
+	LiveRegMatrix.cpp \
+	LiveStackAnalysis.cpp \
+	LiveVariables.cpp \
+	LocalStackSlotAllocation.cpp \
+	MachineBasicBlock.cpp \
+	MachineBlockFrequencyInfo.cpp \
+	MachineBlockPlacement.cpp \
+	MachineBranchProbabilityInfo.cpp \
+	MachineCSE.cpp \
+	MachineCodeEmitter.cpp \
+	MachineCopyPropagation.cpp \
+	MachineDominators.cpp \
+	MachineFunction.cpp \
+	MachineFunctionAnalysis.cpp \
+	MachineFunctionPass.cpp \
+	MachineFunctionPrinterPass.cpp \
+	MachineInstr.cpp \
+	MachineInstrBundle.cpp \
+	MachineLICM.cpp \
+	MachineLoopInfo.cpp \
+	MachineModuleInfo.cpp \
+	MachineModuleInfoImpls.cpp \
+	MachinePassRegistry.cpp \
+	MachinePostDominators.cpp \
+	MachineRegisterInfo.cpp \
+	MachineSSAUpdater.cpp \
+	MachineScheduler.cpp \
+	MachineSink.cpp \
+	MachineTraceMetrics.cpp \
+	MachineVerifier.cpp \
+	OcamlGC.cpp \
+	OptimizePHIs.cpp \
+	PHIElimination.cpp \
+	PHIEliminationUtils.cpp \
+	Passes.cpp \
+	PeepholeOptimizer.cpp \
+	PostRASchedulerList.cpp \
+	ProcessImplicitDefs.cpp \
+	PrologEpilogInserter.cpp \
+	PseudoSourceValue.cpp \
+	RegAllocBase.cpp \
+	RegAllocBasic.cpp \
+	RegAllocFast.cpp \
+	RegAllocGreedy.cpp \
+	RegAllocPBQP.cpp \
+	RegisterClassInfo.cpp \
+	RegisterCoalescer.cpp \
+	RegisterPressure.cpp \
+	RegisterScavenging.cpp \
+	ScheduleDAG.cpp \
+	ScheduleDAGInstrs.cpp \
+	ScheduleDAGPrinter.cpp \
+	ScoreboardHazardRecognizer.cpp \
+	ShadowStackGC.cpp \
+	ShrinkWrapping.cpp \
+	SjLjEHPrepare.cpp \
+	SlotIndexes.cpp \
+	SpillPlacement.cpp \
+	Spiller.cpp \
+	SplitKit.cpp \
+	StackColoring.cpp \
+	StackProtector.cpp \
+	StackSlotColoring.cpp \
+	StrongPHIElimination.cpp \
+	TailDuplication.cpp \
+	TargetFrameLoweringImpl.cpp \
+	TargetInstrInfo.cpp \
+	TargetLoweringBase.cpp \
+	TargetLoweringObjectFileImpl.cpp \
+	TargetOptionsImpl.cpp \
+	TargetRegisterInfo.cpp \
+	TargetSchedule.cpp \
+	TwoAddressInstructionPass.cpp \
+	UnreachableBlockElim.cpp \
+	VirtRegMap.cpp
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmcore/Makefile b/lib/clang/libllvmcore/Makefile
new file mode 100644
index 0000000..4cbf3d6
--- /dev/null
+++ b/lib/clang/libllvmcore/Makefile
@@ -0,0 +1,49 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmcore
+
+SRCDIR=	lib/IR
+SRCS=	AsmWriter.cpp \
+	Attributes.cpp \
+	AutoUpgrade.cpp \
+	BasicBlock.cpp \
+	ConstantFold.cpp \
+	Constants.cpp \
+	Core.cpp \
+	DIBuilder.cpp \
+	DataLayout.cpp \
+	DebugInfo.cpp \
+	DebugLoc.cpp \
+	Dominators.cpp \
+	Function.cpp \
+	GCOV.cpp \
+	GVMaterializer.cpp \
+	Globals.cpp \
+	IRBuilder.cpp \
+	InlineAsm.cpp \
+	Instruction.cpp \
+	Instructions.cpp \
+	IntrinsicInst.cpp \
+	LLVMContext.cpp \
+	LLVMContextImpl.cpp \
+	LeakDetector.cpp \
+	Metadata.cpp \
+	Module.cpp \
+	Pass.cpp \
+	PassManager.cpp \
+	PassRegistry.cpp \
+	PrintModulePass.cpp \
+	Type.cpp \
+	TypeFinder.cpp \
+	Use.cpp \
+	User.cpp \
+	Value.cpp \
+	ValueSymbolTable.cpp \
+	ValueTypes.cpp \
+	Verifier.cpp
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmdebuginfo/Makefile b/lib/clang/libllvmdebuginfo/Makefile
new file mode 100644
index 0000000..72218ad
--- /dev/null
+++ b/lib/clang/libllvmdebuginfo/Makefile
@@ -0,0 +1,21 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmdebuginfo
+
+SRCDIR=	lib/DebugInfo
+SRCS=	DIContext.cpp \
+	DWARFAbbreviationDeclaration.cpp \
+	DWARFCompileUnit.cpp \
+	DWARFContext.cpp \
+	DWARFDebugAbbrev.cpp \
+	DWARFDebugArangeSet.cpp \
+	DWARFDebugAranges.cpp \
+	DWARFDebugFrame.cpp \
+	DWARFDebugInfoEntry.cpp \
+	DWARFDebugLine.cpp \
+	DWARFDebugRangeList.cpp \
+	DWARFFormValue.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmexecutionengine/Makefile b/lib/clang/libllvmexecutionengine/Makefile
new file mode 100644
index 0000000..3ec39c78
--- /dev/null
+++ b/lib/clang/libllvmexecutionengine/Makefile
@@ -0,0 +1,12 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmexecutionengine
+
+SRCDIR=	lib/ExecutionEngine
+SRCS=	ExecutionEngine.cpp \
+	ExecutionEngineBindings.cpp \
+	TargetSelect.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvminstcombine/Makefile b/lib/clang/libllvminstcombine/Makefile
new file mode 100644
index 0000000..3752aef
--- /dev/null
+++ b/lib/clang/libllvminstcombine/Makefile
@@ -0,0 +1,24 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvminstcombine
+
+SRCDIR=	lib/Transforms/InstCombine
+SRCS=	InstCombineAddSub.cpp \
+	InstCombineAndOrXor.cpp \
+	InstCombineCalls.cpp \
+	InstCombineCasts.cpp \
+	InstCombineCompares.cpp \
+	InstCombineLoadStoreAlloca.cpp \
+	InstCombineMulDivRem.cpp \
+	InstCombinePHI.cpp \
+	InstCombineSelect.cpp \
+	InstCombineShifts.cpp \
+	InstCombineSimplifyDemanded.cpp \
+	InstCombineVectorOps.cpp \
+	InstructionCombining.cpp
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvminstrumentation/Makefile b/lib/clang/libllvminstrumentation/Makefile
new file mode 100644
index 0000000..e5e8b59
--- /dev/null
+++ b/lib/clang/libllvminstrumentation/Makefile
@@ -0,0 +1,22 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvminstrumentation
+
+SRCDIR=	lib/Transforms/Instrumentation
+SRCS=	AddressSanitizer.cpp \
+	BlackList.cpp \
+	BoundsChecking.cpp \
+	EdgeProfiling.cpp \
+	GCOVProfiling.cpp \
+	MemorySanitizer.cpp \
+	Instrumentation.cpp \
+	OptimalEdgeProfiling.cpp \
+	PathProfiling.cpp \
+	ProfilingUtils.cpp \
+	ThreadSanitizer.cpp
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvminterpreter/Makefile b/lib/clang/libllvminterpreter/Makefile
new file mode 100644
index 0000000..06fcca4
--- /dev/null
+++ b/lib/clang/libllvminterpreter/Makefile
@@ -0,0 +1,14 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvminterpreter
+
+SRCDIR=	lib/ExecutionEngine/Interpreter
+SRCS=	Execution.cpp \
+	ExternalFunctions.cpp \
+	Interpreter.cpp \
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmipa/Makefile b/lib/clang/libllvmipa/Makefile
new file mode 100644
index 0000000..85b75af
--- /dev/null
+++ b/lib/clang/libllvmipa/Makefile
@@ -0,0 +1,21 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmipa
+
+SRCDIR=	lib/Analysis/IPA
+SRCS=	CallGraph.cpp \
+	CallGraphSCCPass.cpp \
+	CallPrinter.cpp \
+	FindUsedTypes.cpp \
+	GlobalsModRef.cpp \
+	InlineCost.cpp
+
+.if ${MK_CLANG_EXTRAS} != "no"
+SRCS+=	IPA.cpp
+.endif
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmipo/Makefile b/lib/clang/libllvmipo/Makefile
new file mode 100644
index 0000000..b1e9016
--- /dev/null
+++ b/lib/clang/libllvmipo/Makefile
@@ -0,0 +1,35 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmipo
+
+SRCDIR=	lib/Transforms/IPO
+SRCS=	ArgumentPromotion.cpp \
+	BarrierNoopPass.cpp \
+	ConstantMerge.cpp \
+	DeadArgumentElimination.cpp \
+	ExtractGV.cpp \
+	FunctionAttrs.cpp \
+	GlobalDCE.cpp \
+	GlobalOpt.cpp \
+	IPConstantPropagation.cpp \
+	InlineAlways.cpp \
+	InlineSimple.cpp \
+	Inliner.cpp \
+	Internalize.cpp \
+	LoopExtractor.cpp \
+	MergeFunctions.cpp \
+	PartialInlining.cpp \
+	PassManagerBuilder.cpp \
+	PruneEH.cpp \
+	StripDeadPrototypes.cpp \
+	StripSymbols.cpp
+
+.if ${MK_CLANG_EXTRAS} != "no"
+SRCS+=	IPO.cpp
+.endif
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmirreader/Makefile b/lib/clang/libllvmirreader/Makefile
new file mode 100644
index 0000000..d9f7e69
--- /dev/null
+++ b/lib/clang/libllvmirreader/Makefile
@@ -0,0 +1,10 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmirreader
+
+SRCDIR=	lib/IRReader
+SRCS=	IRReader.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmjit/Makefile b/lib/clang/libllvmjit/Makefile
new file mode 100644
index 0000000..682f704
--- /dev/null
+++ b/lib/clang/libllvmjit/Makefile
@@ -0,0 +1,13 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmjit
+
+SRCDIR=	lib/ExecutionEngine/JIT
+SRCS=	JIT.cpp \
+	JITDwarfEmitter.cpp \
+	JITEmitter.cpp \
+	JITMemoryManager.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmlinker/Makefile b/lib/clang/libllvmlinker/Makefile
new file mode 100644
index 0000000..711b369
--- /dev/null
+++ b/lib/clang/libllvmlinker/Makefile
@@ -0,0 +1,10 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmlinker
+
+SRCDIR=	lib/Linker
+SRCS=	LinkModules.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmmc/Makefile b/lib/clang/libllvmmc/Makefile
new file mode 100644
index 0000000..3986ba6
--- /dev/null
+++ b/lib/clang/libllvmmc/Makefile
@@ -0,0 +1,55 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmmc
+
+SRCDIR=	lib/MC
+SRCS=	ELFObjectWriter.cpp \
+	MCAsmBackend.cpp \
+	MCAsmInfo.cpp \
+	MCAsmInfoCOFF.cpp \
+	MCAsmInfoDarwin.cpp \
+	MCAsmStreamer.cpp \
+	MCAssembler.cpp \
+	MCAtom.cpp \
+	MCCodeEmitter.cpp \
+	MCCodeGenInfo.cpp \
+	MCContext.cpp \
+	MCDwarf.cpp \
+	MCELF.cpp \
+	MCELFObjectTargetWriter.cpp \
+	MCELFStreamer.cpp \
+	MCExpr.cpp \
+	MCInst.cpp \
+	MCInstPrinter.cpp \
+	MCInstrAnalysis.cpp \
+	MCLabel.cpp \
+	MCMachOStreamer.cpp \
+	MCMachObjectTargetWriter.cpp \
+	MCModule.cpp \
+	MCNullStreamer.cpp \
+	MCObjectFileInfo.cpp \
+	MCObjectStreamer.cpp \
+	MCObjectWriter.cpp \
+	MCPureStreamer.cpp \
+	MCRegisterInfo.cpp \
+	MCSection.cpp \
+	MCSectionCOFF.cpp \
+	MCSectionELF.cpp \
+	MCSectionMachO.cpp \
+	MCStreamer.cpp \
+	MCSubtargetInfo.cpp \
+	MCSymbol.cpp \
+	MCValue.cpp \
+	MCWin64EH.cpp \
+	MachObjectWriter.cpp \
+	SubtargetFeature.cpp \
+	WinCOFFObjectWriter.cpp \
+	WinCOFFStreamer.cpp
+
+.if ${MK_CLANG_EXTRAS} != "no"
+SRCS+=	MCDisassembler.cpp
+.endif
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmmcdisassembler/Makefile b/lib/clang/libllvmmcdisassembler/Makefile
new file mode 100644
index 0000000..cfcf919
--- /dev/null
+++ b/lib/clang/libllvmmcdisassembler/Makefile
@@ -0,0 +1,10 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmmcdisassembler
+
+SRCDIR=	lib/MC/MCDisassembler
+SRCS=	Disassembler.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmmcjit/Makefile b/lib/clang/libllvmmcjit/Makefile
new file mode 100644
index 0000000..ea3cf07
--- /dev/null
+++ b/lib/clang/libllvmmcjit/Makefile
@@ -0,0 +1,11 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmmcjit
+
+SRCDIR=	lib/ExecutionEngine/MCJIT
+SRCS=	MCJIT.cpp \
+	SectionMemoryManager.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmmcparser/Makefile b/lib/clang/libllvmmcparser/Makefile
new file mode 100644
index 0000000..b39926a
--- /dev/null
+++ b/lib/clang/libllvmmcparser/Makefile
@@ -0,0 +1,18 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmmcparser
+
+SRCDIR=	lib/MC/MCParser
+SRCS=	AsmLexer.cpp \
+	AsmParser.cpp \
+	COFFAsmParser.cpp \
+	DarwinAsmParser.cpp \
+	ELFAsmParser.cpp \
+	MCAsmLexer.cpp \
+	MCAsmParser.cpp \
+	MCAsmParserExtension.cpp \
+	MCTargetAsmParser.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmmipsasmparser/Makefile b/lib/clang/libllvmmipsasmparser/Makefile
new file mode 100644
index 0000000..0572f8d
--- /dev/null
+++ b/lib/clang/libllvmmipsasmparser/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmmipsasmparser
+
+SRCDIR=	lib/Target/Mips/AsmParser
+INCDIR=	lib/Target/Mips
+SRCS=	MipsAsmParser.cpp
+
+TGHDRS=	MipsGenAsmMatcher \
+	MipsGenInstrInfo \
+	MipsGenRegisterInfo \
+	MipsGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmmipscodegen/Makefile b/lib/clang/libllvmmipscodegen/Makefile
new file mode 100644
index 0000000..e5a99c9
--- /dev/null
+++ b/lib/clang/libllvmmipscodegen/Makefile
@@ -0,0 +1,49 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmmipscodegen
+
+SRCDIR=	lib/Target/Mips
+SRCS=	Mips16FrameLowering.cpp \
+	Mips16ISelDAGToDAG.cpp \
+	Mips16ISelLowering.cpp \
+	Mips16InstrInfo.cpp \
+	Mips16RegisterInfo.cpp \
+	MipsAnalyzeImmediate.cpp \
+	MipsAsmPrinter.cpp \
+	MipsCodeEmitter.cpp \
+	MipsConstantIslandPass.cpp \
+	MipsDelaySlotFiller.cpp \
+	MipsFrameLowering.cpp \
+	MipsISelDAGToDAG.cpp \
+	MipsISelLowering.cpp \
+	MipsInstrInfo.cpp \
+	MipsJITInfo.cpp \
+	MipsLongBranch.cpp \
+	MipsMCInstLower.cpp \
+	MipsMachineFunction.cpp \
+	MipsModuleISelDAGToDAG.cpp \
+	MipsOs16.cpp \
+	MipsRegisterInfo.cpp \
+	MipsSEFrameLowering.cpp \
+	MipsSEISelDAGToDAG.cpp \
+	MipsSEISelLowering.cpp \
+	MipsSEInstrInfo.cpp \
+	MipsSERegisterInfo.cpp \
+	MipsSelectionDAGInfo.cpp \
+	MipsSubtarget.cpp \
+	MipsTargetMachine.cpp \
+	MipsTargetObjectFile.cpp
+
+TGHDRS=	Intrinsics \
+	MipsGenAsmWriter \
+	MipsGenCallingConv \
+	MipsGenCodeEmitter \
+	MipsGenDAGISel \
+	MipsGenInstrInfo \
+	MipsGenMCPseudoLowering \
+	MipsGenRegisterInfo \
+	MipsGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmmipsdesc/Makefile b/lib/clang/libllvmmipsdesc/Makefile
new file mode 100644
index 0000000..c5e60c6
--- /dev/null
+++ b/lib/clang/libllvmmipsdesc/Makefile
@@ -0,0 +1,23 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmmipsdesc
+
+SRCDIR=	lib/Target/Mips/MCTargetDesc
+SRCS=	MipsAsmBackend.cpp \
+	MipsDirectObjLower.cpp \
+	MipsELFObjectWriter.cpp \
+	MipsELFStreamer.cpp \
+	MipsMCAsmInfo.cpp \
+	MipsMCCodeEmitter.cpp \
+	MipsMCTargetDesc.cpp \
+	MipsReginfo.cpp
+CFLAGS+= -I${LLVM_SRCS}/${SRCDIR}/..
+
+TGHDRS=	MipsGenInstrInfo \
+	MipsGenMCCodeEmitter \
+	MipsGenRegisterInfo \
+	MipsGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmmipsdisassembler/Makefile b/lib/clang/libllvmmipsdisassembler/Makefile
new file mode 100644
index 0000000..41d2062
--- /dev/null
+++ b/lib/clang/libllvmmipsdisassembler/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmmipsdisassembler
+
+SRCDIR=	lib/Target/Mips/Disassembler
+INCDIR=	lib/Target/Mips
+SRCS=	MipsDisassembler.cpp
+
+TGHDRS=	MipsGenDisassemblerTables \
+	MipsGenInstrInfo \
+	MipsGenRegisterInfo \
+	MipsGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmmipsinfo/Makefile b/lib/clang/libllvmmipsinfo/Makefile
new file mode 100644
index 0000000..c65c8c8
--- /dev/null
+++ b/lib/clang/libllvmmipsinfo/Makefile
@@ -0,0 +1,15 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmmipsinfo
+
+SRCDIR=	lib/Target/Mips/TargetInfo
+INCDIR=	lib/Target/Mips
+SRCS=	MipsTargetInfo.cpp
+
+TGHDRS=	MipsGenInstrInfo \
+	MipsGenRegisterInfo \
+	MipsGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmmipsinstprinter/Makefile b/lib/clang/libllvmmipsinstprinter/Makefile
new file mode 100644
index 0000000..39df7cc
--- /dev/null
+++ b/lib/clang/libllvmmipsinstprinter/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmmipsinstprinter
+
+SRCDIR=	lib/Target/Mips/InstPrinter
+INCDIR=	lib/Target/Mips
+SRCS=	MipsInstPrinter.cpp
+
+TGHDRS=	MipsGenAsmWriter \
+	MipsGenInstrInfo \
+	MipsGenRegisterInfo \
+	MipsGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmobjcarcopts/Makefile b/lib/clang/libllvmobjcarcopts/Makefile
new file mode 100644
index 0000000..5c47aa8
--- /dev/null
+++ b/lib/clang/libllvmobjcarcopts/Makefile
@@ -0,0 +1,20 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmobjcarcopts
+
+SRCDIR=	lib/Transforms/ObjCARC
+SRCS=	ObjCARC.cpp \
+	ObjCARCOpts.cpp \
+	ObjCARCExpand.cpp \
+	ObjCARCAPElim.cpp \
+	ObjCARCAliasAnalysis.cpp \
+	ObjCARCUtil.cpp \
+	ObjCARCContract.cpp \
+	DependencyAnalysis.cpp \
+	ProvenanceAnalysis.cpp
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmobject/Makefile b/lib/clang/libllvmobject/Makefile
new file mode 100644
index 0000000..7358c13
--- /dev/null
+++ b/lib/clang/libllvmobject/Makefile
@@ -0,0 +1,17 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmobject
+
+SRCDIR=	lib/Object
+SRCS=	Archive.cpp \
+	Binary.cpp \
+	COFFObjectFile.cpp \
+	ELFObjectFile.cpp \
+	Error.cpp \
+	MachOObjectFile.cpp \
+	Object.cpp \
+	ObjectFile.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmpowerpccodegen/Makefile b/lib/clang/libllvmpowerpccodegen/Makefile
new file mode 100644
index 0000000..0c77b5c
--- /dev/null
+++ b/lib/clang/libllvmpowerpccodegen/Makefile
@@ -0,0 +1,35 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmpowerpccodegen
+
+SRCDIR=	lib/Target/PowerPC
+SRCS=	PPCAsmPrinter.cpp \
+	PPCBranchSelector.cpp \
+	PPCCTRLoops.cpp \
+	PPCCodeEmitter.cpp \
+	PPCFrameLowering.cpp \
+	PPCHazardRecognizers.cpp \
+	PPCISelDAGToDAG.cpp \
+	PPCISelLowering.cpp \
+	PPCInstrInfo.cpp \
+	PPCJITInfo.cpp \
+	PPCMCInstLower.cpp \
+	PPCMachineFunctionInfo.cpp \
+	PPCRegisterInfo.cpp \
+	PPCSelectionDAGInfo.cpp \
+	PPCSubtarget.cpp \
+	PPCTargetMachine.cpp \
+	PPCTargetTransformInfo.cpp
+
+TGHDRS=	Intrinsics \
+	PPCGenCallingConv \
+	PPCGenCodeEmitter \
+	PPCGenDAGISel \
+	PPCGenInstrInfo \
+	PPCGenMCCodeEmitter \
+	PPCGenRegisterInfo \
+	PPCGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmpowerpcdesc/Makefile b/lib/clang/libllvmpowerpcdesc/Makefile
new file mode 100644
index 0000000..e48b484
--- /dev/null
+++ b/lib/clang/libllvmpowerpcdesc/Makefile
@@ -0,0 +1,21 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmpowerpcdesc
+
+SRCDIR=	lib/Target/PowerPC/MCTargetDesc
+SRCS=	PPCAsmBackend.cpp \
+	PPCMCAsmInfo.cpp \
+	PPCMCCodeEmitter.cpp \
+	PPCMCTargetDesc.cpp \
+	PPCPredicates.cpp \
+	PPCELFObjectWriter.cpp
+CFLAGS+= -I${LLVM_SRCS}/${SRCDIR}/..
+
+TGHDRS=	PPCGenInstrInfo \
+	PPCGenMCCodeEmitter \
+	PPCGenRegisterInfo \
+	PPCGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmpowerpcinfo/Makefile b/lib/clang/libllvmpowerpcinfo/Makefile
new file mode 100644
index 0000000..03bba0e
--- /dev/null
+++ b/lib/clang/libllvmpowerpcinfo/Makefile
@@ -0,0 +1,15 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmpowerpcinfo
+
+SRCDIR=	lib/Target/PowerPC/TargetInfo
+INCDIR=	lib/Target/PowerPC
+SRCS=	PowerPCTargetInfo.cpp
+
+TGHDRS=	PPCGenInstrInfo \
+	PPCGenRegisterInfo \
+	PPCGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmpowerpcinstprinter/Makefile b/lib/clang/libllvmpowerpcinstprinter/Makefile
new file mode 100644
index 0000000..ac98321
--- /dev/null
+++ b/lib/clang/libllvmpowerpcinstprinter/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmpowerpcinstprinter
+
+SRCDIR=	lib/Target/PowerPC/InstPrinter
+INCDIR=	lib/Target/PowerPC
+SRCS=	PPCInstPrinter.cpp
+
+TGHDRS=	PPCGenAsmWriter \
+	PPCGenInstrInfo \
+	PPCGenRegisterInfo \
+	PPCGenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmruntimedyld/Makefile b/lib/clang/libllvmruntimedyld/Makefile
new file mode 100644
index 0000000..02ca4bd
--- /dev/null
+++ b/lib/clang/libllvmruntimedyld/Makefile
@@ -0,0 +1,13 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmruntimedyld
+
+SRCDIR=	lib/ExecutionEngine/RuntimeDyld
+SRCS=	GDBRegistrar.cpp \
+	RuntimeDyld.cpp \
+	RuntimeDyldELF.cpp \
+	RuntimeDyldMachO.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmscalaropts/Makefile b/lib/clang/libllvmscalaropts/Makefile
new file mode 100644
index 0000000..38d945c
--- /dev/null
+++ b/lib/clang/libllvmscalaropts/Makefile
@@ -0,0 +1,50 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmscalaropts
+
+SRCDIR=	lib/Transforms/Scalar
+SRCS=	ADCE.cpp \
+	BasicBlockPlacement.cpp \
+	CodeGenPrepare.cpp \
+	ConstantProp.cpp \
+	CorrelatedValuePropagation.cpp \
+	DCE.cpp \
+	DeadStoreElimination.cpp \
+	EarlyCSE.cpp \
+	GlobalMerge.cpp \
+	GVN.cpp \
+	IndVarSimplify.cpp \
+	JumpThreading.cpp \
+	LICM.cpp \
+	LoopDeletion.cpp \
+	LoopIdiomRecognize.cpp \
+	LoopInstSimplify.cpp \
+	LoopRotation.cpp \
+	LoopStrengthReduce.cpp \
+	LoopUnrollPass.cpp \
+	LoopUnswitch.cpp \
+	LowerAtomic.cpp \
+	MemCpyOptimizer.cpp \
+	Reassociate.cpp \
+	Reg2Mem.cpp \
+	SCCP.cpp \
+	SROA.cpp \
+	Scalar.cpp \
+	ScalarReplAggregates.cpp \
+	SimplifyCFGPass.cpp \
+	SimplifyLibCalls.cpp \
+	Sink.cpp \
+	TailRecursionElimination.cpp
+
+.if ${MK_CLANG_EXTRAS} != "no"
+SRCS+=	LoopInstSimplify.cpp \
+	LowerAtomic.cpp \
+	Reg2Mem.cpp \
+	Scalar.cpp
+.endif
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmselectiondag/Makefile b/lib/clang/libllvmselectiondag/Makefile
new file mode 100644
index 0000000..7543102
--- /dev/null
+++ b/lib/clang/libllvmselectiondag/Makefile
@@ -0,0 +1,34 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmselectiondag
+
+SRCDIR=	lib/CodeGen/SelectionDAG
+SRCS=	DAGCombiner.cpp \
+	FastISel.cpp \
+	FunctionLoweringInfo.cpp \
+	InstrEmitter.cpp \
+	LegalizeDAG.cpp \
+	LegalizeFloatTypes.cpp \
+	LegalizeIntegerTypes.cpp \
+	LegalizeTypes.cpp \
+	LegalizeTypesGeneric.cpp \
+	LegalizeVectorOps.cpp \
+	LegalizeVectorTypes.cpp \
+	ResourcePriorityQueue.cpp \
+	ScheduleDAGFast.cpp \
+	ScheduleDAGRRList.cpp \
+	ScheduleDAGSDNodes.cpp \
+	ScheduleDAGVLIW.cpp \
+	SelectionDAG.cpp \
+	SelectionDAGBuilder.cpp \
+	SelectionDAGDumper.cpp \
+	SelectionDAGISel.cpp \
+	SelectionDAGPrinter.cpp \
+	TargetLowering.cpp \
+	TargetSelectionDAGInfo.cpp
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmsupport/Makefile b/lib/clang/libllvmsupport/Makefile
new file mode 100644
index 0000000..6d043b4
--- /dev/null
+++ b/lib/clang/libllvmsupport/Makefile
@@ -0,0 +1,101 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmsupport
+
+SRCDIR=	lib/Support
+SRCS=	APFloat.cpp \
+	APInt.cpp \
+	APSInt.cpp \
+	Allocator.cpp \
+	Atomic.cpp \
+	BlockFrequency.cpp \
+	BranchProbability.cpp \
+	CommandLine.cpp \
+	ConstantRange.cpp \
+	ConvertUTF.c \
+	ConvertUTFWrapper.cpp \
+	CrashRecoveryContext.cpp \
+	DAGDeltaAlgorithm.cpp \
+	Debug.cpp \
+	DeltaAlgorithm.cpp \
+	Dwarf.cpp \
+	DynamicLibrary.cpp \
+	Errno.cpp \
+	ErrorHandling.cpp \
+	FileOutputBuffer.cpp \
+	FoldingSet.cpp \
+	FormattedStream.cpp \
+	GraphWriter.cpp \
+	Hashing.cpp \
+	Host.cpp \
+	IncludeFile.cpp \
+	IntEqClasses.cpp \
+	IntervalMap.cpp \
+	IntrusiveRefCntPtr.cpp \
+	IsInf.cpp \
+	IsNAN.cpp \
+	Locale.cpp \
+	LockFileManager.cpp \
+	ManagedStatic.cpp \
+	Memory.cpp \
+	MemoryBuffer.cpp \
+	MemoryObject.cpp \
+	Mutex.cpp \
+	Path.cpp \
+	PathV2.cpp \
+	PluginLoader.cpp \
+	PrettyStackTrace.cpp \
+	Process.cpp \
+	Program.cpp \
+	RWMutex.cpp \
+	Regex.cpp \
+	SearchForAddressOfSpecialSymbol.cpp \
+	Signals.cpp \
+	SmallPtrSet.cpp \
+	SmallVector.cpp \
+	SourceMgr.cpp \
+	Statistic.cpp \
+	StreamableMemoryObject.cpp \
+	StringExtras.cpp \
+	StringMap.cpp \
+	StringPool.cpp \
+	StringRef.cpp \
+	TargetRegistry.cpp \
+	ThreadLocal.cpp \
+	Threading.cpp \
+	TimeValue.cpp \
+	Timer.cpp \
+	ToolOutputFile.cpp \
+	Triple.cpp \
+	Twine.cpp \
+	Valgrind.cpp \
+	Watchdog.cpp \
+	YAMLParser.cpp \
+	YAMLTraits.cpp \
+	circular_raw_ostream.cpp \
+	raw_os_ostream.cpp \
+	raw_ostream.cpp \
+	regcomp.c \
+	regerror.c \
+	regexec.c \
+	regfree.c \
+	regstrlcpy.c \
+	system_error.cpp
+
+.if ${MK_CLANG_EXTRAS} != "no"
+SRCS+=	Compression.cpp \
+	DataExtractor.cpp \
+	DataStream.cpp \
+	Disassembler.cpp \
+	FileUtilities.cpp \
+	SystemUtils.cpp
+.endif
+
+.include "../clang.lib.mk"
+
+# Ugly hack to work around CLOCK_PROCESS_CPUTIME_ID not being properly defined
+# between r239347 and r245428.
+CXXFLAGS.Process.cpp=	-DCLOCK_PROCESS_CPUTIME_ID=15
+CXXFLAGS+=		${CXXFLAGS.${.IMPSRC:T}}
diff --git a/lib/clang/libllvmtablegen/Makefile b/lib/clang/libllvmtablegen/Makefile
new file mode 100644
index 0000000..9a764b3
--- /dev/null
+++ b/lib/clang/libllvmtablegen/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmtablegen
+
+SRCDIR=	lib/TableGen
+SRCS=	Error.cpp \
+	Main.cpp \
+	Record.cpp \
+	StringMatcher.cpp \
+	TableGenBackend.cpp \
+	TGLexer.cpp \
+	TGParser.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmtarget/Makefile b/lib/clang/libllvmtarget/Makefile
new file mode 100644
index 0000000..b85fbec
--- /dev/null
+++ b/lib/clang/libllvmtarget/Makefile
@@ -0,0 +1,18 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmtarget
+
+SRCDIR=	lib/Target
+SRCS=	Mangler.cpp \
+	Target.cpp \
+	TargetIntrinsicInfo.cpp \
+	TargetJITInfo.cpp \
+	TargetLibraryInfo.cpp \
+	TargetLoweringObjectFile.cpp \
+	TargetMachine.cpp \
+	TargetMachineC.cpp \
+	TargetSubtargetInfo.cpp
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmtransformutils/Makefile b/lib/clang/libllvmtransformutils/Makefile
new file mode 100644
index 0000000..cfdc85f
--- /dev/null
+++ b/lib/clang/libllvmtransformutils/Makefile
@@ -0,0 +1,46 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmtransformutils
+
+SRCDIR=	lib/Transforms/Utils
+SRCS=	BasicBlockUtils.cpp \
+	BreakCriticalEdges.cpp \
+	BuildLibCalls.cpp \
+	BypassSlowDivision.cpp \
+	CloneFunction.cpp \
+	CloneModule.cpp \
+	CmpInstAnalysis.cpp \
+	CodeExtractor.cpp \
+	DemoteRegToStack.cpp \
+	InlineFunction.cpp \
+	InstructionNamer.cpp \
+	IntegerDivision.cpp \
+	LCSSA.cpp \
+	Local.cpp \
+	LoopSimplify.cpp \
+	LoopUnroll.cpp \
+	LoopUnrollRuntime.cpp \
+	LowerExpectIntrinsic.cpp \
+	LowerInvoke.cpp \
+	LowerSwitch.cpp \
+	Mem2Reg.cpp \
+	MetaRenamer.cpp \
+	ModuleUtils.cpp \
+	PromoteMemoryToRegister.cpp \
+	SSAUpdater.cpp \
+	SimplifyCFG.cpp \
+	SimplifyIndVar.cpp \
+	SimplifyInstructions.cpp \
+	SimplifyLibCalls.cpp \
+	UnifyFunctionExitNodes.cpp \
+	ValueMapper.cpp
+
+.if ${MK_CLANG_EXTRAS} != "no"
+SRCS+=	Utils.cpp
+.endif
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmvectorize/Makefile b/lib/clang/libllvmvectorize/Makefile
new file mode 100644
index 0000000..9a760fa
--- /dev/null
+++ b/lib/clang/libllvmvectorize/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmvectorize
+
+SRCDIR=	lib/Transforms/Vectorize
+SRCS=	BBVectorize.cpp \
+	LoopVectorize.cpp \
+	SLPVectorizer.cpp \
+	VecUtils.cpp \
+	Vectorize.cpp
+
+TGHDRS=	Intrinsics
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmx86asmparser/Makefile b/lib/clang/libllvmx86asmparser/Makefile
new file mode 100644
index 0000000..0d32f9c
--- /dev/null
+++ b/lib/clang/libllvmx86asmparser/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmx86asmparser
+
+SRCDIR=	lib/Target/X86/AsmParser
+INCDIR=	lib/Target/X86
+SRCS=	X86AsmParser.cpp
+
+TGHDRS=	X86GenAsmMatcher \
+	X86GenInstrInfo \
+	X86GenRegisterInfo \
+	X86GenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmx86codegen/Makefile b/lib/clang/libllvmx86codegen/Makefile
new file mode 100644
index 0000000..ed7ab8e
--- /dev/null
+++ b/lib/clang/libllvmx86codegen/Makefile
@@ -0,0 +1,38 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmx86codegen
+
+SRCDIR=	lib/Target/X86
+SRCS=	X86AsmPrinter.cpp \
+	X86COFFMachineModuleInfo.cpp \
+	X86CodeEmitter.cpp \
+	X86FastISel.cpp \
+	X86FixupLEAs.cpp \
+	X86FloatingPoint.cpp \
+	X86FrameLowering.cpp \
+	X86ISelDAGToDAG.cpp \
+	X86ISelLowering.cpp \
+	X86InstrInfo.cpp \
+	X86JITInfo.cpp \
+	X86MCInstLower.cpp \
+	X86MachineFunctionInfo.cpp \
+	X86PadShortFunction.cpp \
+	X86RegisterInfo.cpp \
+	X86SelectionDAGInfo.cpp \
+	X86Subtarget.cpp \
+	X86TargetMachine.cpp \
+	X86TargetObjectFile.cpp \
+	X86TargetTransformInfo.cpp \
+	X86VZeroUpper.cpp
+
+TGHDRS=	Intrinsics \
+	X86GenCallingConv \
+	X86GenDAGISel \
+	X86GenFastISel \
+	X86GenInstrInfo \
+	X86GenRegisterInfo \
+	X86GenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmx86desc/Makefile b/lib/clang/libllvmx86desc/Makefile
new file mode 100644
index 0000000..a177129
--- /dev/null
+++ b/lib/clang/libllvmx86desc/Makefile
@@ -0,0 +1,21 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmx86desc
+
+SRCDIR=	lib/Target/X86/MCTargetDesc
+SRCS=	X86AsmBackend.cpp \
+	X86ELFObjectWriter.cpp \
+	X86MachObjectWriter.cpp \
+	X86MCAsmInfo.cpp \
+	X86MCCodeEmitter.cpp \
+	X86MCTargetDesc.cpp \
+	X86WinCOFFObjectWriter.cpp
+CFLAGS+= -I${LLVM_SRCS}/${SRCDIR}/..
+
+TGHDRS=	X86GenInstrInfo \
+	X86GenRegisterInfo \
+	X86GenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmx86disassembler/Makefile b/lib/clang/libllvmx86disassembler/Makefile
new file mode 100644
index 0000000..fbaa5c6
--- /dev/null
+++ b/lib/clang/libllvmx86disassembler/Makefile
@@ -0,0 +1,19 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmx86disassembler
+
+SRCDIR=	lib/Target/X86/Disassembler
+INCDIR=	lib/Target/X86
+SRCS=	X86Disassembler.cpp
+
+.if ${MK_CLANG_EXTRAS} != "no"
+SRCS+=	X86DisassemblerDecoder.c
+.endif
+
+TGHDRS=	X86GenDisassemblerTables \
+	X86GenInstrInfo \
+	X86GenRegisterInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmx86info/Makefile b/lib/clang/libllvmx86info/Makefile
new file mode 100644
index 0000000..bc1a7d7
--- /dev/null
+++ b/lib/clang/libllvmx86info/Makefile
@@ -0,0 +1,15 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmx86info
+
+SRCDIR=	lib/Target/X86/TargetInfo
+INCDIR=	lib/Target/X86
+SRCS=	X86TargetInfo.cpp
+
+TGHDRS=	X86GenInstrInfo \
+	X86GenRegisterInfo \
+	X86GenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmx86instprinter/Makefile b/lib/clang/libllvmx86instprinter/Makefile
new file mode 100644
index 0000000..308f91c
--- /dev/null
+++ b/lib/clang/libllvmx86instprinter/Makefile
@@ -0,0 +1,19 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmx86instprinter
+
+SRCDIR=	lib/Target/X86/InstPrinter
+INCDIR=	lib/Target/X86
+SRCS=	X86ATTInstPrinter.cpp \
+	X86InstComments.cpp \
+	X86IntelInstPrinter.cpp
+
+TGHDRS=	X86GenAsmWriter \
+	X86GenAsmWriter1 \
+	X86GenInstrInfo \
+	X86GenRegisterInfo \
+	X86GenSubtargetInfo
+
+.include "../clang.lib.mk"
diff --git a/lib/clang/libllvmx86utils/Makefile b/lib/clang/libllvmx86utils/Makefile
new file mode 100644
index 0000000..8355e7e
--- /dev/null
+++ b/lib/clang/libllvmx86utils/Makefile
@@ -0,0 +1,11 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+LIB=	llvmx86utils
+
+SRCDIR=	lib/Target/X86/Utils
+INCDIR=	lib/Target/X86
+SRCS=	X86ShuffleDecode.cpp
+
+.include "../clang.lib.mk"
diff --git a/usr.bin/clang/Makefile b/usr.bin/clang/Makefile
new file mode 100644
index 0000000..db5fae7
--- /dev/null
+++ b/usr.bin/clang/Makefile
@@ -0,0 +1,28 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+SUBDIR=	clang clang-tblgen tblgen
+
+.if ${MK_CLANG_EXTRAS} != "no" && !defined(TOOLS_PREFIX)
+SUBDIR+=bugpoint \
+	llc \
+	lli \
+	llvm-ar \
+	llvm-as \
+	llvm-bcanalyzer \
+	llvm-diff \
+	llvm-dis \
+	llvm-extract \
+	llvm-link \
+	llvm-mc \
+	llvm-nm \
+	llvm-objdump \
+	llvm-prof \
+	llvm-ranlib \
+	llvm-rtdyld \
+	macho-dump \
+	opt
+.endif
+
+.include <bsd.subdir.mk>
diff --git a/usr.bin/clang/bugpoint/Makefile b/usr.bin/clang/bugpoint/Makefile
new file mode 100644
index 0000000..6599b03
--- /dev/null
+++ b/usr.bin/clang/bugpoint/Makefile
@@ -0,0 +1,39 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=bugpoint
+
+SRCDIR=	tools/bugpoint
+SRCS=	BugDriver.cpp \
+	CrashDebugger.cpp \
+	ExecutionDriver.cpp \
+	ExtractFunction.cpp \
+	FindBugs.cpp \
+	Miscompilation.cpp \
+	OptimizerDriver.cpp \
+	ToolRunner.cpp \
+	bugpoint.cpp
+
+TGHDRS=	Intrinsics
+LIBDEPS=llvmirreader \
+	llvmbitwriter \
+	llvmbitreader \
+	llvmlinker \
+	llvmipo \
+	llvmobjcarcopts \
+	llvmvectorize \
+	llvmscalaropts \
+	llvminstcombine \
+	llvminstrumentation \
+	llvmtransformutils \
+	llvmipa \
+	llvmanalysis \
+	llvmtarget \
+	llvmmc \
+	llvmobject \
+	llvmasmparser \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/bugpoint/bugpoint.1 b/usr.bin/clang/bugpoint/bugpoint.1
new file mode 100644
index 0000000..4a180f4
--- /dev/null
+++ b/usr.bin/clang/bugpoint/bugpoint.1
@@ -0,0 +1,300 @@
+.\" $FreeBSD$
+.TH "BUGPOINT" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+bugpoint \- automatic test case reduction tool
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBbugpoint\fP [\fIoptions\fP] [\fIinput LLVM ll/bc files\fP] [\fILLVM passes\fP] \fB\-\-args\fP
+\fIprogram arguments\fP
+.SH DESCRIPTION
+.sp
+\fBbugpoint\fP narrows down the source of problems in LLVM tools and passes.  It
+can be used to debug three types of failures: optimizer crashes, miscompilations
+by optimizers, or bad native code generation (including problems in the static
+and JIT compilers).  It aims to reduce large test cases to small, useful ones.
+For more information on the design and inner workings of \fBbugpoint\fP, as well as
+advice for using bugpoint, see \fIllvm/docs/Bugpoint.html\fP in the LLVM
+distribution.
+.SH OPTIONS
+.sp
+\fB\-\-additional\-so\fP \fIlibrary\fP
+.INDENT 0.0
+.INDENT 3.5
+Load the dynamic shared object \fIlibrary\fP into the test program whenever it is
+run.  This is useful if you are debugging programs which depend on non\-LLVM
+libraries (such as the X or curses libraries) to run.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-append\-exit\-code\fP=\fI{true,false}\fP
+.INDENT 0.0
+.INDENT 3.5
+Append the test programs exit code to the output file so that a change in exit
+code is considered a test failure. Defaults to false.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-args\fP \fIprogram args\fP
+.INDENT 0.0
+.INDENT 3.5
+Pass all arguments specified after \fB\-\-args\fP to the test program whenever it runs.
+Note that if any of the \fIprogram args\fP start with a "\fB\-\fP", you should use:
+.INDENT 0.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+bugpoint [bugpoint args] \-\-args \-\- [program args]
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.sp
+The "\fB\-\-\fP" right after the \fB\-\-args\fP option tells \fBbugpoint\fP to consider
+any options starting with "\fB\-\fP" to be part of the \fB\-\-args\fP option, not as
+options to \fBbugpoint\fP itself.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-tool\-args\fP \fItool args\fP
+.INDENT 0.0
+.INDENT 3.5
+Pass all arguments specified after \fB\-\-tool\-args\fP to the LLVM tool under test
+(\fBllc\fP, \fBlli\fP, etc.) whenever it runs.  You should use this option in the
+following way:
+.INDENT 0.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+bugpoint [bugpoint args] \-\-tool\-args \-\- [tool args]
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.sp
+The "\fB\-\-\fP" right after the \fB\-\-tool\-args\fP option tells \fBbugpoint\fP to
+consider any options starting with "\fB\-\fP" to be part of the \fB\-\-tool\-args\fP
+option, not as options to \fBbugpoint\fP itself. (See \fB\-\-args\fP, above.)
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-safe\-tool\-args\fP \fItool args\fP
+.INDENT 0.0
+.INDENT 3.5
+Pass all arguments specified after \fB\-\-safe\-tool\-args\fP to the "safe" execution
+tool.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-gcc\-tool\-args\fP \fIgcc tool args\fP
+.INDENT 0.0
+.INDENT 3.5
+Pass all arguments specified after \fB\-\-gcc\-tool\-args\fP to the invocation of
+\fBgcc\fP.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-opt\-args\fP \fIopt args\fP
+.INDENT 0.0
+.INDENT 3.5
+Pass all arguments specified after \fB\-\-opt\-args\fP to the invocation of \fBopt\fP.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-disable\-{dce,simplifycfg}\fP
+.INDENT 0.0
+.INDENT 3.5
+Do not run the specified passes to clean up and reduce the size of the test
+program. By default, \fBbugpoint\fP uses these passes internally when attempting to
+reduce test programs.  If you\(aqre trying to find a bug in one of these passes,
+\fBbugpoint\fP may crash.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-enable\-valgrind\fP
+.INDENT 0.0
+.INDENT 3.5
+Use valgrind to find faults in the optimization phase. This will allow
+bugpoint to find otherwise asymptomatic problems caused by memory
+mis\-management.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-find\-bugs\fP
+.INDENT 0.0
+.INDENT 3.5
+Continually randomize the specified passes and run them on the test program
+until a bug is found or the user kills \fBbugpoint\fP.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-help\fP
+.INDENT 0.0
+.INDENT 3.5
+Print a summary of command line options.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-input\fP \fIfilename\fP
+.INDENT 0.0
+.INDENT 3.5
+Open \fIfilename\fP and redirect the standard input of the test program, whenever
+it runs, to come from that file.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-load\fP \fIplugin\fP
+.INDENT 0.0
+.INDENT 3.5
+Load the dynamic object \fIplugin\fP into \fBbugpoint\fP itself.  This object should
+register new optimization passes.  Once loaded, the object will add new command
+line options to enable various optimizations.  To see the new complete list of
+optimizations, use the \fB\-help\fP and \fB\-\-load\fP options together; for example:
+.INDENT 0.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+bugpoint \-\-load myNewPass.so \-help
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-mlimit\fP \fImegabytes\fP
+.INDENT 0.0
+.INDENT 3.5
+Specifies an upper limit on memory usage of the optimization and codegen. Set
+to zero to disable the limit.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-output\fP \fIfilename\fP
+.INDENT 0.0
+.INDENT 3.5
+Whenever the test program produces output on its standard output stream, it
+should match the contents of \fIfilename\fP (the "reference output"). If you
+do not use this option, \fBbugpoint\fP will attempt to generate a reference output
+by compiling the program with the "safe" backend and running it.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-profile\-info\-file\fP \fIfilename\fP
+.INDENT 0.0
+.INDENT 3.5
+Profile file loaded by \fB\-\-profile\-loader\fP.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-run\-{int,jit,llc,custom}\fP
+.INDENT 0.0
+.INDENT 3.5
+Whenever the test program is compiled, \fBbugpoint\fP should generate code for it
+using the specified code generator.  These options allow you to choose the
+interpreter, the JIT compiler, the static native code compiler, or a
+custom command (see \fB\-\-exec\-command\fP) respectively.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-safe\-{llc,custom}\fP
+.INDENT 0.0
+.INDENT 3.5
+When debugging a code generator, \fBbugpoint\fP should use the specified code
+generator as the "safe" code generator. This is a known\-good code generator
+used to generate the "reference output" if it has not been provided, and to
+compile portions of the program that as they are excluded from the testcase.
+These options allow you to choose the
+static native code compiler, or a custom command, (see \fB\-\-exec\-command\fP)
+respectively. The interpreter and the JIT backends cannot currently
+be used as the "safe" backends.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-exec\-command\fP \fIcommand\fP
+.INDENT 0.0
+.INDENT 3.5
+This option defines the command to use with the \fB\-\-run\-custom\fP and
+\fB\-\-safe\-custom\fP options to execute the bitcode testcase. This can
+be useful for cross\-compilation.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-compile\-command\fP \fIcommand\fP
+.INDENT 0.0
+.INDENT 3.5
+This option defines the command to use with the \fB\-\-compile\-custom\fP
+option to compile the bitcode testcase. This can be useful for
+testing compiler output without running any link or execute stages. To
+generate a reduced unit test, you may add CHECK directives to the
+testcase and pass the name of an executable compile\-command script in this form:
+.INDENT 0.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+#!/bin/sh
+llc "$@"
+not FileCheck [bugpoint input file].ll < bugpoint\-test\-program.s
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.sp
+This script will "fail" as long as FileCheck passes. So the result
+will be the minimum bitcode that passes FileCheck.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-safe\-path\fP \fIpath\fP
+.INDENT 0.0
+.INDENT 3.5
+This option defines the path to the command to execute with the
+\fB\-\-safe\-{int,jit,llc,custom}\fP
+option.
+.UNINDENT
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBbugpoint\fP succeeds in finding a problem, it will exit with 0.  Otherwise,
+if an error occurs, it will exit with a non\-zero value.
+.SH SEE ALSO
+.sp
+opt|opt
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/clang-tblgen/Makefile b/usr.bin/clang/clang-tblgen/Makefile
new file mode 100644
index 0000000..5cfa83d
--- /dev/null
+++ b/usr.bin/clang/clang-tblgen/Makefile
@@ -0,0 +1,23 @@
+# $FreeBSD$
+
+NO_MAN=
+.include <bsd.own.mk>
+
+PROG_CXX=clang-tblgen
+
+SRCDIR=	tools/clang/utils/TableGen
+SRCS=	ClangASTNodesEmitter.cpp \
+	ClangAttrEmitter.cpp \
+	ClangCommentCommandInfoEmitter.cpp \
+	ClangCommentHTMLNamedCharacterReferenceEmitter.cpp \
+	ClangCommentHTMLTagsEmitter.cpp \
+	ClangDiagnosticsEmitter.cpp \
+	ClangSACheckersEmitter.cpp \
+	NeonEmitter.cpp \
+	OptParserEmitter.cpp \
+	TableGen.cpp
+
+LIBDEPS=llvmtablegen \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/clang.prog.mk b/usr.bin/clang/clang.prog.mk
new file mode 100644
index 0000000..9ebac4f
--- /dev/null
+++ b/usr.bin/clang/clang.prog.mk
@@ -0,0 +1,14 @@
+# $FreeBSD$
+
+LLVM_SRCS= ${.CURDIR}/../../../contrib/llvm
+
+.include "../../lib/clang/clang.build.mk"
+
+.for lib in ${LIBDEPS}
+DPADD+=	${.OBJDIR}/../../../lib/clang/lib${lib}/lib${lib}.a
+LDADD+=	${.OBJDIR}/../../../lib/clang/lib${lib}/lib${lib}.a
+.endfor
+
+BINDIR?= /usr/bin
+
+.include <bsd.prog.mk>
diff --git a/usr.bin/clang/clang/Makefile b/usr.bin/clang/clang/Makefile
new file mode 100644
index 0000000..27c2cf1
--- /dev/null
+++ b/usr.bin/clang/clang/Makefile
@@ -0,0 +1,113 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=clang
+
+SRCDIR=	tools/clang/tools/driver
+SRCS=	cc1_main.cpp \
+	cc1as_main.cpp \
+	driver.cpp
+
+.if ${MK_SHARED_TOOLCHAIN} == "no"
+NO_SHARED?= yes
+.endif
+
+LINKS=	${BINDIR}/clang ${BINDIR}/clang++ \
+	${BINDIR}/clang ${BINDIR}/clang-cpp
+MLINKS=	clang.1 clang++.1 \
+	clang.1 clang-cpp.1
+.if ${MK_CLANG_IS_CC} != "no"
+LINKS+=	${BINDIR}/clang ${BINDIR}/cc \
+	${BINDIR}/clang ${BINDIR}/c++ \
+	${BINDIR}/clang ${BINDIR}/CC \
+	${BINDIR}/clang ${BINDIR}/cpp
+MLINKS+= clang.1 cc.1 \
+	clang.1 c++.1 \
+	clang.1 CC.1 \
+	clang.1 cpp.1
+.endif
+
+TGHDRS=	CC1AsOptions \
+	DiagnosticCommonKinds \
+	DiagnosticDriverKinds \
+	DiagnosticFrontendKinds \
+	DiagnosticLexKinds \
+	DiagnosticSemaKinds \
+	Options
+
+.if !defined(EARLY_BUILD) && defined(MK_CLANG_FULL) && ${MK_CLANG_FULL} != "no"
+_clangstaticanalyzer= \
+	clangstaticanalyzerfrontend \
+	clangstaticanalyzercheckers \
+	clangstaticanalyzercore
+_clangarcmigrate= \
+	clangarcmigrate
+_clangrewriter= \
+	clangrewritefrontend \
+	clangrewritecore
+.endif # !EARLY_BUILD && MK_CLANG_FULL
+
+LIBDEPS=clangfrontendtool \
+	clangfrontend \
+	clangdriver \
+	clangserialization \
+	clangcodegen \
+	clangparse \
+	clangsema \
+	${_clangstaticanalyzer} \
+	${_clangarcmigrate} \
+	${_clangrewriter} \
+	clanganalysis \
+	clangedit \
+	clangast \
+	clangbasic \
+	clanglex \
+	llvmlinker \
+	llvmirreader \
+	llvmipo \
+	llvmvectorize \
+	llvminstrumentation \
+	llvmbitwriter \
+	llvmbitreader \
+	llvmasmparser \
+	llvmarmdisassembler \
+	llvmarmcodegen \
+	llvmarmasmparser \
+	llvmarmdesc \
+	llvmarminfo \
+	llvmarminstprinter \
+	llvmmipsdisassembler \
+	llvmmipscodegen \
+	llvmmipsasmparser \
+	llvmmipsdesc \
+	llvmmipsinfo \
+	llvmmipsinstprinter \
+	llvmpowerpccodegen \
+	llvmpowerpcdesc \
+	llvmpowerpcinfo \
+	llvmpowerpcinstprinter \
+	llvmx86disassembler \
+	llvmx86asmparser \
+	llvmx86codegen \
+	llvmselectiondag \
+	llvmasmprinter \
+	llvmmcparser \
+	llvmcodegen \
+	llvmobjcarcopts \
+	llvmscalaropts \
+	llvminstcombine \
+	llvmtransformutils \
+	llvmipa \
+	llvmanalysis \
+	llvmx86desc \
+	llvmx86info \
+	llvmtarget \
+	llvmx86instprinter \
+	llvmmc \
+	llvmobject \
+	llvmx86utils \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/clang/clang.1 b/usr.bin/clang/clang/clang.1
new file mode 100644
index 0000000..3f0689f
--- /dev/null
+++ b/usr.bin/clang/clang/clang.1
@@ -0,0 +1,512 @@
+.\" $FreeBSD$
+.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
+.\"
+.\" Standard preamble:
+.\" ========================================================================
+.de Sp \" Vertical space (when we can't use .PP)
+.if t .sp .5v
+.if n .sp
+..
+.de Vb \" Begin verbatim text
+.ft CW
+.nf
+.ne \\$1
+..
+.de Ve \" End verbatim text
+.ft R
+.fi
+..
+.\" Set up some character translations and predefined strings.  \*(-- will
+.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
+.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
+.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
+.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
+.\" nothing in troff, for use with C<>.
+.tr \(*W-
+.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
+.ie n \{\
+.    ds -- \(*W-
+.    ds PI pi
+.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
+.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
+.    ds L" ""
+.    ds R" ""
+.    ds C` ""
+.    ds C' ""
+'br\}
+.el\{\
+.    ds -- \|\(em\|
+.    ds PI \(*p
+.    ds L" ``
+.    ds R" ''
+'br\}
+.\"
+.\" Escape single quotes in literal strings from groff's Unicode transform.
+.ie \n(.g .ds Aq \(aq
+.el       .ds Aq '
+.\"
+.\" If the F register is turned on, we'll generate index entries on stderr for
+.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
+.\" entries marked with X<> in POD.  Of course, you'll have to process the
+.\" output yourself in some meaningful fashion.
+.ie \nF \{\
+.    de IX
+.    tm Index:\\$1\t\\n%\t"\\$2"
+..
+.    nr % 0
+.    rr F
+.\}
+.el \{\
+.    de IX
+..
+.\}
+.\"
+.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
+.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
+.    \" fudge factors for nroff and troff
+.if n \{\
+.    ds #H 0
+.    ds #V .8m
+.    ds #F .3m
+.    ds #[ \f1
+.    ds #] \fP
+.\}
+.if t \{\
+.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
+.    ds #V .6m
+.    ds #F 0
+.    ds #[ \&
+.    ds #] \&
+.\}
+.    \" simple accents for nroff and troff
+.if n \{\
+.    ds ' \&
+.    ds ` \&
+.    ds ^ \&
+.    ds , \&
+.    ds ~ ~
+.    ds /
+.\}
+.if t \{\
+.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
+.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
+.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
+.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
+.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
+.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
+.\}
+.    \" troff and (daisy-wheel) nroff accents
+.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
+.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
+.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
+.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
+.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
+.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
+.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
+.ds ae a\h'-(\w'a'u*4/10)'e
+.ds Ae A\h'-(\w'A'u*4/10)'E
+.    \" corrections for vroff
+.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
+.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
+.    \" for low resolution devices (crt and lpr)
+.if \n(.H>23 .if \n(.V>19 \
+\{\
+.    ds : e
+.    ds 8 ss
+.    ds o a
+.    ds d- d\h'-1'\(ga
+.    ds D- D\h'-1'\(hy
+.    ds th \o'bp'
+.    ds Th \o'LP'
+.    ds ae ae
+.    ds Ae AE
+.\}
+.rm #[ #] #H #V #F C
+.\" ========================================================================
+.\"
+.IX Title "CLANG 1"
+.TH CLANG 1 "2013-06-10" "clang 3.3" "Clang Tools Documentation"
+.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
+.\" way too many mistakes in technical documents.
+.if n .ad l
+.nh
+.SH "NAME"
+clang \- the Clang C, C++, and Objective\-C compiler
+.SH "SYNOPSIS"
+.IX Header "SYNOPSIS"
+\&\fBclang\fR [\fB\-c\fR|\fB\-S\fR|\fB\-E\fR] \fB\-std=\fR\fIstandard\fR \fB\-g\fR
+  [\fB\-O0\fR|\fB\-O1\fR|\fB\-O2\fR|\fB\-Os\fR|\fB\-Oz\fR|\fB\-O3\fR|\fB\-Ofast\fR|\fB\-O4\fR]
+  \fB\-W\fR\fIwarnings...\fR \fB\-pedantic\fR
+  \fB\-I\fR\fIdir...\fR \fB\-L\fR\fIdir...\fR
+  \fB\-D\fR\fImacro[=defn]\fR
+  \fB\-f\fR\fIfeature-option...\fR
+  \fB\-m\fR\fImachine-option...\fR
+  \fB\-o\fR \fIoutput-file\fR
+  \fB\-stdlib=\fR\fIlibrary\fR 
+  \fIinput-filenames\fR
+.SH "DESCRIPTION"
+.IX Header "DESCRIPTION"
+\&\fBclang\fR is a C, \*(C+, and Objective-C compiler which encompasses preprocessing,
+parsing, optimization, code generation, assembly, and linking.  Depending on
+which high-level mode setting is passed, Clang will stop before doing a full
+link.  While Clang is highly integrated, it is important to understand the
+stages of compilation, to understand how to invoke it.  These stages are:
+.IP "\fBDriver\fR" 4
+.IX Item "Driver"
+The \fBclang\fR executable is actually a small driver which controls the overall
+execution of other tools such as the compiler, assembler and linker.  Typically
+you do not need to interact with the driver, but you transparently use it to run
+the other tools.
+.IP "\fBPreprocessing\fR" 4
+.IX Item "Preprocessing"
+This stage handles tokenization of the input source file, macro expansion,
+#include expansion and handling of other preprocessor directives.  The output of
+this stage is typically called a \*(L".i\*(R" (for C), \*(L".ii\*(R" (for \*(C+), \*(L".mi\*(R" (for 
+Objective-C) , or \*(L".mii\*(R" (for Objective\-\*(C+) file.
+.IP "\fBParsing and Semantic Analysis\fR" 4
+.IX Item "Parsing and Semantic Analysis"
+This stage parses the input file, translating preprocessor tokens into a parse
+tree.  Once in the form of a parser tree, it applies semantic analysis to compute
+types for expressions as well and determine whether the code is well formed. This
+stage is responsible for generating most of the compiler warnings as well as
+parse errors.  The output of this stage is an \*(L"Abstract Syntax Tree\*(R" (\s-1AST\s0).
+.IP "\fBCode Generation and Optimization\fR" 4
+.IX Item "Code Generation and Optimization"
+This stage translates an \s-1AST\s0 into low-level intermediate code (known as \*(L"\s-1LLVM\s0
+\&\s-1IR\s0\*(R") and ultimately to machine code.  This phase is responsible for optimizing
+the generated code and handling target-specific code generation.  The output of
+this stage is typically called a \*(L".s\*(R" file or \*(L"assembly\*(R" file.
+.Sp
+Clang also supports the use of an integrated assembler, in which the code
+generator produces object files directly. This avoids the overhead of generating
+the \*(L".s\*(R" file and of calling the target assembler.
+.IP "\fBAssembler\fR" 4
+.IX Item "Assembler"
+This stage runs the target assembler to translate the output of the compiler
+into a target object file.  The output of this stage is typically called a \*(L".o\*(R"
+file or \*(L"object\*(R" file.
+.IP "\fBLinker\fR" 4
+.IX Item "Linker"
+This stage runs the target linker to merge multiple object files into an
+executable or dynamic library.  The output of this stage is typically called an
+\&\*(L"a.out\*(R", \*(L".dylib\*(R" or \*(L".so\*(R" file.
+.PP
+The Clang compiler supports a large number of options to control each of these
+stages.  In addition to compilation of code, Clang also supports other tools:
+.PP
+\&\fBClang Static Analyzer\fR
+.PP
+The Clang Static Analyzer is a tool that scans source code to try to find bugs
+through code analysis.  This tool uses many parts of Clang and is built into the
+same driver.
+.SH "OPTIONS"
+.IX Header "OPTIONS"
+.SS "Stage Selection Options"
+.IX Subsection "Stage Selection Options"
+.IP "\fB\-E\fR" 4
+.IX Item "-E"
+Run the preprocessor stage.
+.IP "\fB\-fsyntax\-only\fR" 4
+.IX Item "-fsyntax-only"
+Run the preprocessor, parser and type checking stages.
+.IP "\fB\-S\fR" 4
+.IX Item "-S"
+Run the previous stages as well as \s-1LLVM\s0 generation and optimization stages and
+target-specific code generation, producing an assembly file.
+.IP "\fB\-c\fR" 4
+.IX Item "-c"
+Run all of the above, plus the assembler, generating a target \*(L".o\*(R" object file.
+.IP "\fBno stage selection option\fR" 4
+.IX Item "no stage selection option"
+If no stage selection option is specified, all stages above are run, and the
+linker is run to combine the results into an executable or shared library.
+.IP "\fB\-\-analyze\fR" 4
+.IX Item "--analyze"
+Run the Clang Static Analyzer.
+.SS "Language Selection and Mode Options"
+.IX Subsection "Language Selection and Mode Options"
+.IP "\fB\-x\fR \fIlanguage\fR" 4
+.IX Item "-x language"
+Treat subsequent input files as having type \fIlanguage\fR.
+.IP "\fB\-std\fR=\fIlanguage\fR" 4
+.IX Item "-std=language"
+Specify the language standard to compile for.
+.IP "\fB\-stdlib\fR=\fIlibrary\fR" 4
+.IX Item "-stdlib=library"
+Specify the \*(C+ standard library to use; supported options are libstdc++ and
+libc++.
+.IP "\fB\-ansi\fR" 4
+.IX Item "-ansi"
+Same as \fB\-std=c89\fR.
+.IP "\fB\-ObjC++\fR" 4
+.IX Item "-ObjC++"
+Treat source input files as Objective\-\*(C+ inputs.
+.IP "\fB\-ObjC\fR" 4
+.IX Item "-ObjC"
+Treat source input files as Objective-C inputs.
+.IP "\fB\-trigraphs\fR" 4
+.IX Item "-trigraphs"
+Enable trigraphs.
+.IP "\fB\-ffreestanding\fR" 4
+.IX Item "-ffreestanding"
+Indicate that the file should be compiled for a freestanding, not a hosted,
+environment.
+.IP "\fB\-fno\-builtin\fR" 4
+.IX Item "-fno-builtin"
+Disable special handling and optimizations of builtin functions like strlen and
+malloc.
+.IP "\fB\-fmath\-errno\fR" 4
+.IX Item "-fmath-errno"
+Indicate that math functions should be treated as updating errno.
+.IP "\fB\-fpascal\-strings\fR" 4
+.IX Item "-fpascal-strings"
+Enable support for Pascal-style strings with \*(L"\epfoo\*(R".
+.IP "\fB\-fms\-extensions\fR" 4
+.IX Item "-fms-extensions"
+Enable support for Microsoft extensions.
+.IP "\fB\-fmsc\-version=\fR" 4
+.IX Item "-fmsc-version="
+Set _MSC_VER. Defaults to 1300 on Windows. Not set otherwise.
+.IP "\fB\-fborland\-extensions\fR" 4
+.IX Item "-fborland-extensions"
+Enable support for Borland extensions.
+.IP "\fB\-fwritable\-strings\fR" 4
+.IX Item "-fwritable-strings"
+Make all string literals default to writable.  This disables uniquing of
+strings and other optimizations.
+.IP "\fB\-flax\-vector\-conversions\fR" 4
+.IX Item "-flax-vector-conversions"
+Allow loose type checking rules for implicit vector conversions.
+.IP "\fB\-fblocks\fR" 4
+.IX Item "-fblocks"
+Enable the \*(L"Blocks\*(R" language feature.
+.IP "\fB\-fobjc\-gc\-only\fR" 4
+.IX Item "-fobjc-gc-only"
+Indicate that Objective-C code should be compiled in GC-only mode, which only
+works when Objective-C Garbage Collection is enabled.
+.IP "\fB\-fobjc\-gc\fR" 4
+.IX Item "-fobjc-gc"
+Indicate that Objective-C code should be compiled in hybrid-GC mode, which works
+with both \s-1GC\s0 and non-GC mode.
+.IP "\fB\-fobjc\-abi\-version\fR=\fIversion\fR" 4
+.IX Item "-fobjc-abi-version=version"
+Select the Objective-C \s-1ABI\s0 version to use. Available versions are 1 (legacy
+\&\*(L"fragile\*(R" \s-1ABI\s0), 2 (non-fragile \s-1ABI\s0 1), and 3 (non-fragile \s-1ABI\s0 2).
+.IP "\fB\-fobjc\-nonfragile\-abi\-version\fR=\fIversion\fR" 4
+.IX Item "-fobjc-nonfragile-abi-version=version"
+Select the Objective-C non-fragile \s-1ABI\s0 version to use by default. This will only
+be used as the Objective-C \s-1ABI\s0 when the non-fragile \s-1ABI\s0 is enabled (either via
+\&\-fobjc\-nonfragile\-abi, or because it is the platform default).
+.IP "\fB\-fobjc\-nonfragile\-abi\fR" 4
+.IX Item "-fobjc-nonfragile-abi"
+Enable use of the Objective-C non-fragile \s-1ABI\s0. On platforms for which this is
+the default \s-1ABI\s0, it can be disabled with \fB\-fno\-objc\-nonfragile\-abi\fR.
+.SS "Target Selection Options"
+.IX Subsection "Target Selection Options"
+Clang fully supports cross compilation as an inherent part of its design.
+Depending on how your version of Clang is configured, it may have support for
+a number of cross compilers, or may only support a native target.
+.IP "\fB\-arch\fR \fIarchitecture\fR" 4
+.IX Item "-arch architecture"
+Specify the architecture to build for.
+.IP "\fB\-mmacosx\-version\-min\fR=\fIversion\fR" 4
+.IX Item "-mmacosx-version-min=version"
+When building for Mac \s-1OS/X\s0, specify the minimum version supported by your
+application.
+.IP "\fB\-miphoneos\-version\-min\fR" 4
+.IX Item "-miphoneos-version-min"
+When building for iPhone \s-1OS\s0, specify the minimum version supported by your
+application.
+.IP "\fB\-march\fR=\fIcpu\fR" 4
+.IX Item "-march=cpu"
+Specify that Clang should generate code for a specific processor family member
+and later.  For example, if you specify \-march=i486, the compiler is allowed to
+generate instructions that are valid on i486 and later processors, but which
+may not exist on earlier ones.
+.SS "Code Generation Options"
+.IX Subsection "Code Generation Options"
+.IP "\fB\-O0\fR \fB\-O1\fR \fB\-O2\fR \fB\-Os\fR \fB\-Oz\fR \fB\-O3\fR \fB\-Ofast\fR \fB\-O4\fR" 4
+.IX Item "-O0 -O1 -O2 -Os -Oz -O3 -Ofast -O4"
+Specify which optimization level to use.  \fB\-O0\fR means \*(L"no optimization\*(R": this
+level compiles the fastest and generates the most debuggable code.  \fB\-O2\fR is a
+moderate level of optimization which enables most optimizations.  \fB\-Os\fR is like
+\&\fB\-O2\fR with extra optimizations to reduce code size.  \fB\-Oz\fR is like \fB\-Os\fR 
+(and thus \fB\-O2\fR), but reduces code size further.  \fB\-O3\fR is like \fB\-O2\fR,
+except that it enables optimizations that take longer to perform or that may
+generate larger code (in an attempt to make the program run faster).
+\&\fB\-Ofast\fR enables all the optimizations from \fB\-O3\fR along with other aggressive
+optimizations that may violate strict compliance with language standards. On
+supported platforms, \fB\-O4\fR enables link-time optimization; object files are
+stored in the \s-1LLVM\s0 bitcode file format and whole program optimization is done at
+link time. \fB\-O1\fR is somewhere between \fB\-O0\fR and \fB\-O2\fR.
+.IP "\fB\-g\fR" 4
+.IX Item "-g"
+Generate debug information.  Note that Clang debug information works best at
+\&\fB\-O0\fR.  At higher optimization levels, only line number information is
+currently available.
+.IP "\fB\-fexceptions\fR" 4
+.IX Item "-fexceptions"
+Enable generation of unwind information, this allows exceptions to be thrown
+through Clang compiled stack frames.  This is on by default in x86\-64.
+.IP "\fB\-ftrapv\fR" 4
+.IX Item "-ftrapv"
+Generate code to catch integer overflow errors.  Signed integer overflow is
+undefined in C, with this flag, extra code is generated to detect this and abort
+when it happens.
+.IP "\fB\-fvisibility\fR" 4
+.IX Item "-fvisibility"
+This flag sets the default visibility level.
+.IP "\fB\-fcommon\fR" 4
+.IX Item "-fcommon"
+This flag specifies that variables without initializers get common linkage.  It
+can be disabled with \fB\-fno\-common\fR.
+.IP "\fB\-ftls\-model\fR" 4
+.IX Item "-ftls-model"
+Set the default thread-local storage (\s-1TLS\s0) model to use for thread-local
+variables. Valid values are: \*(L"global-dynamic\*(R", \*(L"local-dynamic\*(R", \*(L"initial-exec\*(R"
+and \*(L"local-exec\*(R". The default is \*(L"global-dynamic\*(R". The default model can be
+overridden with the tls_model attribute. The compiler will try to choose a more
+efficient model if possible.
+.IP "\fB\-flto\fR \fB\-emit\-llvm\fR" 4
+.IX Item "-flto -emit-llvm"
+Generate output files in \s-1LLVM\s0 formats, suitable for link time optimization. When
+used with \fB\-S\fR this generates \s-1LLVM\s0 intermediate language assembly files,
+otherwise this generates \s-1LLVM\s0 bitcode format object files (which may be passed
+to the linker depending on the stage selection options).
+.SS "Driver Options"
+.IX Subsection "Driver Options"
+.IP "\fB\-###\fR" 4
+.IX Item "-###"
+Print the commands to run for this compilation.
+.IP "\fB\-\-help\fR" 4
+.IX Item "--help"
+Display available options.
+.IP "\fB\-Qunused\-arguments\fR" 4
+.IX Item "-Qunused-arguments"
+Don't emit warning for unused driver arguments.
+.IP "\fB\-Wa,\fR\fIargs\fR" 4
+.IX Item "-Wa,args"
+Pass the comma separated arguments in \fIargs\fR to the assembler.
+.IP "\fB\-Wl,\fR\fIargs\fR" 4
+.IX Item "-Wl,args"
+Pass the comma separated arguments in \fIargs\fR to the linker.
+.IP "\fB\-Wp,\fR\fIargs\fR" 4
+.IX Item "-Wp,args"
+Pass the comma separated arguments in \fIargs\fR to the preprocessor.
+.IP "\fB\-Xanalyzer\fR \fIarg\fR" 4
+.IX Item "-Xanalyzer arg"
+Pass \fIarg\fR to the static analyzer.
+.IP "\fB\-Xassembler\fR \fIarg\fR" 4
+.IX Item "-Xassembler arg"
+Pass \fIarg\fR to the assembler.
+.IP "\fB\-Xlinker\fR \fIarg\fR" 4
+.IX Item "-Xlinker arg"
+Pass \fIarg\fR to the linker.
+.IP "\fB\-Xpreprocessor\fR \fIarg\fR" 4
+.IX Item "-Xpreprocessor arg"
+Pass \fIarg\fR to the preprocessor.
+.IP "\fB\-o\fR \fIfile\fR" 4
+.IX Item "-o file"
+Write output to \fIfile\fR.
+.IP "\fB\-print\-file\-name\fR=\fIfile\fR" 4
+.IX Item "-print-file-name=file"
+Print the full library path of \fIfile\fR.
+.IP "\fB\-print\-libgcc\-file\-name\fR" 4
+.IX Item "-print-libgcc-file-name"
+Print the library path for \*(L"libgcc.a\*(R".
+.IP "\fB\-print\-prog\-name\fR=\fIname\fR" 4
+.IX Item "-print-prog-name=name"
+Print the full program path of \fIname\fR.
+.IP "\fB\-print\-search\-dirs\fR" 4
+.IX Item "-print-search-dirs"
+Print the paths used for finding libraries and programs.
+.IP "\fB\-save\-temps\fR" 4
+.IX Item "-save-temps"
+Save intermediate compilation results.
+.IP "\fB\-integrated\-as\fR \fB\-no\-integrated\-as\fR" 4
+.IX Item "-integrated-as -no-integrated-as"
+Used to enable and disable, respectively, the use of the integrated
+assembler. Whether the integrated assembler is on by default is target
+dependent.
+.IP "\fB\-time\fR" 4
+.IX Item "-time"
+Time individual commands.
+.IP "\fB\-ftime\-report\fR" 4
+.IX Item "-ftime-report"
+Print timing summary of each stage of compilation.
+.IP "\fB\-v\fR" 4
+.IX Item "-v"
+Show commands to run and use verbose output.
+.SS "Diagnostics Options"
+.IX Subsection "Diagnostics Options"
+.IP "\fB\-fshow\-column\fR \fB\-fshow\-source\-location\fR \fB\-fcaret\-diagnostics\fR \fB\-fdiagnostics\-fixit\-info\fR \fB\-fdiagnostics\-parseable\-fixits\fR \fB\-fdiagnostics\-print\-source\-range\-info\fR \fB\-fprint\-source\-range\-info\fR \fB\-fdiagnostics\-show\-option\fR \fB\-fmessage\-length\fR" 4
+.IX Item "-fshow-column -fshow-source-location -fcaret-diagnostics -fdiagnostics-fixit-info -fdiagnostics-parseable-fixits -fdiagnostics-print-source-range-info -fprint-source-range-info -fdiagnostics-show-option -fmessage-length"
+These options control how Clang prints out information about diagnostics (errors
+and warnings).  Please see the Clang User's Manual for more information.
+.SS "Preprocessor Options"
+.IX Subsection "Preprocessor Options"
+.IP "\fB\-D\fR\fImacroname=value\fR" 4
+.IX Item "-Dmacroname=value"
+Adds an implicit #define into the predefines buffer which is read before the
+source file is preprocessed.
+.IP "\fB\-U\fR\fImacroname\fR" 4
+.IX Item "-Umacroname"
+Adds an implicit #undef into the predefines buffer which is read before the
+source file is preprocessed.
+.IP "\fB\-include\fR \fIfilename\fR" 4
+.IX Item "-include filename"
+Adds an implicit #include into the predefines buffer which is read before the
+source file is preprocessed.
+.IP "\fB\-I\fR\fIdirectory\fR" 4
+.IX Item "-Idirectory"
+Add the specified directory to the search path for include files.
+.IP "\fB\-F\fR\fIdirectory\fR" 4
+.IX Item "-Fdirectory"
+Add the specified directory to the search path for framework include files.
+.IP "\fB\-nostdinc\fR" 4
+.IX Item "-nostdinc"
+Do not search the standard system directories or compiler builtin directories
+for include files.
+.IP "\fB\-nostdlibinc\fR" 4
+.IX Item "-nostdlibinc"
+Do not search the standard system directories for include files, but do search
+compiler builtin include directories.
+.IP "\fB\-nobuiltininc\fR" 4
+.IX Item "-nobuiltininc"
+Do not search clang's builtin directory for include files.
+.SH "ENVIRONMENT"
+.IX Header "ENVIRONMENT"
+.IP "\fB\s-1TMPDIR\s0\fR, \fB\s-1TEMP\s0\fR, \fB\s-1TMP\s0\fR" 4
+.IX Item "TMPDIR, TEMP, TMP"
+These environment variables are checked, in order, for the location to
+write temporary files used during the compilation process.
+.IP "\fB\s-1CPATH\s0\fR" 4
+.IX Item "CPATH"
+If this environment variable is present, it is treated as a delimited
+list of paths to be added to the default system include path list. The
+delimiter is the platform dependent delimiter, as used in the \fI\s-1PATH\s0\fR
+environment variable.
+.Sp
+Empty components in the environment variable are ignored.
+.IP "\fBC_INCLUDE_PATH\fR, \fB\s-1OBJC_INCLUDE_PATH\s0\fR, \fB\s-1CPLUS_INCLUDE_PATH\s0\fR, \fB\s-1OBJCPLUS_INCLUDE_PATH\s0\fR" 4
+.IX Item "C_INCLUDE_PATH, OBJC_INCLUDE_PATH, CPLUS_INCLUDE_PATH, OBJCPLUS_INCLUDE_PATH"
+These environment variables specify additional paths, as for \s-1CPATH\s0,
+which are only used when processing the appropriate language.
+.IP "\fB\s-1MACOSX_DEPLOYMENT_TARGET\s0\fR" 4
+.IX Item "MACOSX_DEPLOYMENT_TARGET"
+If \-mmacosx\-version\-min is unspecified, the default deployment target
+is read from this environment variable.  This option only affects darwin
+targets.
+.SH "BUGS"
+.IX Header "BUGS"
+To report bugs, please visit <http://llvm.org/bugs/>.  Most bug reports should
+include preprocessed source files (use the \fB\-E\fR option) and the full output of 
+the compiler, along with information to reproduce.
+.SH "SEE ALSO"
+.IX Header "SEE ALSO"
+.Vb 1
+\& as(1), ld(1)
+.Ve
+.SH "AUTHOR"
+.IX Header "AUTHOR"
+Maintained by the Clang / \s-1LLVM\s0 Team (<http://clang.llvm.org>).
diff --git a/usr.bin/clang/llc/Makefile b/usr.bin/clang/llc/Makefile
new file mode 100644
index 0000000..e75dd81
--- /dev/null
+++ b/usr.bin/clang/llc/Makefile
@@ -0,0 +1,52 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llc
+
+SRCDIR=	tools/llc
+SRCS=	llc.cpp
+
+LIBDEPS=llvmirreader \
+	llvmasmparser \
+	llvmbitreader \
+	llvmarmdisassembler \
+	llvmarmcodegen \
+	llvmarmasmparser \
+	llvmarmdesc \
+	llvmarminfo \
+	llvmarminstprinter \
+	llvmmipsdisassembler \
+	llvmmipscodegen \
+	llvmmipsasmparser \
+	llvmmipsdesc \
+	llvmmipsinfo \
+	llvmmipsinstprinter \
+	llvmpowerpccodegen \
+	llvmpowerpcdesc \
+	llvmpowerpcinfo \
+	llvmpowerpcinstprinter \
+	llvmx86disassembler \
+	llvmx86asmparser \
+	llvmx86codegen \
+	llvmselectiondag \
+	llvmasmprinter \
+	llvmmcparser \
+	llvmcodegen \
+	llvmobjcarcopts \
+	llvmscalaropts \
+	llvminstcombine \
+	llvmtransformutils \
+	llvmipa \
+	llvmanalysis \
+	llvmx86desc \
+	llvmx86info \
+	llvmtarget \
+	llvmx86instprinter \
+	llvmmc \
+	llvmobject \
+	llvmx86utils \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llc/llc.1 b/usr.bin/clang/llc/llc.1
new file mode 100644
index 0000000..e231f21
--- /dev/null
+++ b/usr.bin/clang/llc/llc.1
@@ -0,0 +1,265 @@
+.\" $FreeBSD$
+.TH "LLC" "1" "2013-06-10" "3.3" "LLVM"
+.SH NAME
+llc \- LLVM static compiler
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllc\fP [\fIoptions\fP] [\fIfilename\fP]
+.SH DESCRIPTION
+.sp
+The \fBllc\fP command compiles LLVM source inputs into assembly language
+for a specified architecture.  The assembly language output can then be passed
+through a native assembler and linker to generate a native executable.
+.sp
+The choice of architecture for the output assembly code is automatically
+determined from the input file, unless the \fI\%-march\fP option is used to
+override the default.
+.SH OPTIONS
+.sp
+If \fBfilename\fP is "\fB\-\fP" or omitted, \fBllc\fP reads from standard input.
+Otherwise, it will from \fBfilename\fP.  Inputs can be in either the LLVM assembly
+language format (\fB.ll\fP) or the LLVM bitcode format (\fB.bc\fP).
+.sp
+If the \fI\-o\fP option is omitted, then \fBllc\fP will send its output
+to standard output if the input is from standard input.  If the \fI\-o\fP
+option specifies "\fB\-\fP", then the output will also be sent to standard output.
+.sp
+If no \fI\-o\fP option is specified and an input file other than "\fB\-\fP" is
+specified, then \fBllc\fP creates the output filename by taking the input
+filename, removing any existing \fB.bc\fP extension, and adding a \fB.s\fP suffix.
+.sp
+Other \fBllc\fP options are described below.
+.SS End\-user Options
+.INDENT 0.0
+.TP
+.B \-help
+Print a summary of command line options.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-O=uint
+Generate code at different optimization levels.  These correspond to the
+\fB\-O0\fP, \fB\-O1\fP, \fB\-O2\fP, and \fB\-O3\fP optimization levels used by
+\fBllvm\-gcc\fP and \fBclang\fP.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-mtriple=<target triple>
+Override the target triple specified in the input file with the specified
+string.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-march=<arch>
+Specify the architecture for which to generate assembly, overriding the target
+encoded in the input file.  See the output of \fBllc \-help\fP for a list of
+valid architectures.  By default this is inferred from the target triple or
+autodetected to the current architecture.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-mcpu=<cpuname>
+Specify a specific chip in the current architecture to generate code for.
+By default this is inferred from the target triple and autodetected to
+the current architecture.  For a list of available CPUs, use:
+.INDENT 7.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+llvm\-as < /dev/null | llc \-march=xyz \-mcpu=help
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-filetype=<output file type>
+Specify what kind of output \fBllc\fP should generated.  Options are: \fBasm\fP
+for textual assembly ( \fB\(aq.s\(aq\fP), \fBobj\fP for native object files (\fB\(aq.o\(aq\fP)
+and \fBnull\fP for not emitting anything (for performance testing).
+.sp
+Note that not all targets support all options.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-mattr=a1,+a2,\-a3,...
+Override or control specific attributes of the target, such as whether SIMD
+operations are enabled or not.  The default set of attributes is set by the
+current CPU.  For a list of available attributes, use:
+.INDENT 7.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+llvm\-as < /dev/null | llc \-march=xyz \-mattr=help
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-disable\-fp\-elim
+Disable frame pointer elimination optimization.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-disable\-excess\-fp\-precision
+Disable optimizations that may produce excess precision for floating point.
+Note that this option can dramatically slow down code on some systems
+(e.g. X86).
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-enable\-no\-infs\-fp\-math
+Enable optimizations that assume no Inf values.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-enable\-no\-nans\-fp\-math
+Enable optimizations that assume no NAN values.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-enable\-unsafe\-fp\-math
+Enable optimizations that make unsafe assumptions about IEEE math (e.g. that
+addition is associative) or may not work for all input ranges.  These
+optimizations allow the code generator to make use of some instructions which
+would otherwise not be usable (such as \fBfsin\fP on X86).
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-enable\-correct\-eh\-support
+Instruct the \fBlowerinvoke\fP pass to insert code for correct exception
+handling support.  This is expensive and is by default omitted for efficiency.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-stats
+Print statistics recorded by code\-generation passes.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-time\-passes
+Record the amount of time needed for each pass and print a report to standard
+error.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-load=<dso_path>
+Dynamically load \fBdso_path\fP (a path to a dynamically shared object) that
+implements an LLVM target.  This will permit the target name to be used with
+the \fI\%-march\fP option so that code can be generated for that target.
+.UNINDENT
+.SS Tuning/Configuration Options
+.INDENT 0.0
+.TP
+.B \-\-print\-machineinstrs
+Print generated machine code between compilation phases (useful for debugging).
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-regalloc=<allocator>
+Specify the register allocator to use.  The default \fBallocator\fP is \fIlocal\fP.
+Valid register allocators are:
+.sp
+\fIsimple\fP
+.INDENT 7.0
+.INDENT 3.5
+Very simple "always spill" register allocator
+.UNINDENT
+.UNINDENT
+.sp
+\fIlocal\fP
+.INDENT 7.0
+.INDENT 3.5
+Local register allocator
+.UNINDENT
+.UNINDENT
+.sp
+\fIlinearscan\fP
+.INDENT 7.0
+.INDENT 3.5
+Linear scan global register allocator
+.UNINDENT
+.UNINDENT
+.sp
+\fIiterativescan\fP
+.INDENT 7.0
+.INDENT 3.5
+Iterative scan global register allocator
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-spiller=<spiller>
+Specify the spiller to use for register allocators that support it.  Currently
+this option is used only by the linear scan register allocator.  The default
+\fBspiller\fP is \fIlocal\fP.  Valid spillers are:
+.sp
+\fIsimple\fP
+.INDENT 7.0
+.INDENT 3.5
+Simple spiller
+.UNINDENT
+.UNINDENT
+.sp
+\fIlocal\fP
+.INDENT 7.0
+.INDENT 3.5
+Local spiller
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.SS Intel IA\-32\-specific Options
+.INDENT 0.0
+.TP
+.B \-\-x86\-asm\-syntax=[att|intel]
+Specify whether to emit assembly code in AT&T syntax (the default) or Intel
+syntax.
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBllc\fP succeeds, it will exit with 0.  Otherwise, if an error
+occurs, it will exit with a non\-zero value.
+.SH SEE ALSO
+.sp
+lli
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/lli/Makefile b/usr.bin/clang/lli/Makefile
new file mode 100644
index 0000000..1916fb0
--- /dev/null
+++ b/usr.bin/clang/lli/Makefile
@@ -0,0 +1,43 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=lli
+
+SRCDIR=	tools/lli
+SRCS=	lli.cpp \
+	RecordingMemoryManager.cpp \
+	RemoteTarget.cpp
+
+LIBDEPS=llvmx86disassembler \
+	llvmx86asmparser \
+	llvmirreader \
+	llvmasmparser \
+	llvmbitreader \
+	llvmx86codegen \
+	llvmx86desc \
+	llvmx86info \
+	llvmx86instprinter \
+	llvmx86utils \
+	llvmselectiondag \
+	llvmasmprinter \
+	llvmmcparser \
+	llvminterpreter \
+	llvmmcjit \
+	llvmjit \
+	llvmcodegen \
+	llvmobjcarcopts \
+	llvmscalaropts \
+	llvminstcombine \
+	llvmtransformutils \
+	llvmipa \
+	llvmanalysis \
+	llvmruntimedyld \
+	llvmexecutionengine \
+	llvmtarget \
+	llvmmc \
+	llvmobject \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/lli/lli.1 b/usr.bin/clang/lli/lli.1
new file mode 100644
index 0000000..16b8374
--- /dev/null
+++ b/usr.bin/clang/lli/lli.1
@@ -0,0 +1,350 @@
+.\" $FreeBSD$
+.TH "LLI" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+lli \- directly execute programs from LLVM bitcode
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBlli\fP [\fIoptions\fP] [\fIfilename\fP] [\fIprogram args\fP]
+.SH DESCRIPTION
+.sp
+\fBlli\fP directly executes programs in LLVM bitcode format.  It takes a program
+in LLVM bitcode format and executes it using a just\-in\-time compiler, if one is
+available for the current architecture, or an interpreter.  \fBlli\fP takes all of
+the same code generator options as llc|llc, but they are only effective when
+\fBlli\fP is using the just\-in\-time compiler.
+.sp
+If \fIfilename\fP is not specified, then \fBlli\fP reads the LLVM bitcode for the
+program from standard input.
+.sp
+The optional \fIargs\fP specified on the command line are passed to the program as
+arguments.
+.SH GENERAL OPTIONS
+.sp
+\fB\-fake\-argv0\fP=\fIexecutable\fP
+.INDENT 0.0
+.INDENT 3.5
+Override the \fBargv[0]\fP value passed into the executing program.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-force\-interpreter\fP=\fI{false,true}\fP
+.INDENT 0.0
+.INDENT 3.5
+If set to true, use the interpreter even if a just\-in\-time compiler is available
+for this architecture. Defaults to false.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-help\fP
+.INDENT 0.0
+.INDENT 3.5
+Print a summary of command line options.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-load\fP=\fIpluginfilename\fP
+.INDENT 0.0
+.INDENT 3.5
+Causes \fBlli\fP to load the plugin (shared object) named \fIpluginfilename\fP and use
+it for optimization.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-stats\fP
+.INDENT 0.0
+.INDENT 3.5
+Print statistics from the code\-generation passes. This is only meaningful for
+the just\-in\-time compiler, at present.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-time\-passes\fP
+.INDENT 0.0
+.INDENT 3.5
+Record the amount of time needed for each code\-generation pass and print it to
+standard error.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-version\fP
+.INDENT 0.0
+.INDENT 3.5
+Print out the version of \fBlli\fP and exit without doing anything else.
+.UNINDENT
+.UNINDENT
+.SH TARGET OPTIONS
+.sp
+\fB\-mtriple\fP=\fItarget triple\fP
+.INDENT 0.0
+.INDENT 3.5
+Override the target triple specified in the input bitcode file with the
+specified string.  This may result in a crash if you pick an
+architecture which is not compatible with the current system.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-march\fP=\fIarch\fP
+.INDENT 0.0
+.INDENT 3.5
+Specify the architecture for which to generate assembly, overriding the target
+encoded in the bitcode file.  See the output of \fBllc \-help\fP for a list of
+valid architectures.  By default this is inferred from the target triple or
+autodetected to the current architecture.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-mcpu\fP=\fIcpuname\fP
+.INDENT 0.0
+.INDENT 3.5
+Specify a specific chip in the current architecture to generate code for.
+By default this is inferred from the target triple and autodetected to
+the current architecture.  For a list of available CPUs, use:
+\fBllvm\-as < /dev/null | llc \-march=xyz \-mcpu=help\fP
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-mattr\fP=\fIa1,+a2,\-a3,...\fP
+.INDENT 0.0
+.INDENT 3.5
+Override or control specific attributes of the target, such as whether SIMD
+operations are enabled or not.  The default set of attributes is set by the
+current CPU.  For a list of available attributes, use:
+\fBllvm\-as < /dev/null | llc \-march=xyz \-mattr=help\fP
+.UNINDENT
+.UNINDENT
+.SH FLOATING POINT OPTIONS
+.sp
+\fB\-disable\-excess\-fp\-precision\fP
+.INDENT 0.0
+.INDENT 3.5
+Disable optimizations that may increase floating point precision.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-enable\-no\-infs\-fp\-math\fP
+.INDENT 0.0
+.INDENT 3.5
+Enable optimizations that assume no Inf values.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-enable\-no\-nans\-fp\-math\fP
+.INDENT 0.0
+.INDENT 3.5
+Enable optimizations that assume no NAN values.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-enable\-unsafe\-fp\-math\fP
+.INDENT 0.0
+.INDENT 3.5
+Causes \fBlli\fP to enable optimizations that may decrease floating point
+precision.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-soft\-float\fP
+.INDENT 0.0
+.INDENT 3.5
+Causes \fBlli\fP to generate software floating point library calls instead of
+equivalent hardware instructions.
+.UNINDENT
+.UNINDENT
+.SH CODE GENERATION OPTIONS
+.sp
+\fB\-code\-model\fP=\fImodel\fP
+.INDENT 0.0
+.INDENT 3.5
+Choose the code model from:
+.INDENT 0.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+default: Target default code model
+small: Small code model
+kernel: Kernel code model
+medium: Medium code model
+large: Large code model
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-disable\-post\-RA\-scheduler\fP
+.INDENT 0.0
+.INDENT 3.5
+Disable scheduling after register allocation.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-disable\-spill\-fusing\fP
+.INDENT 0.0
+.INDENT 3.5
+Disable fusing of spill code into instructions.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-enable\-correct\-eh\-support\fP
+.INDENT 0.0
+.INDENT 3.5
+Make the \-lowerinvoke pass insert expensive, but correct, EH code.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-jit\-enable\-eh\fP
+.INDENT 0.0
+.INDENT 3.5
+Exception handling should be enabled in the just\-in\-time compiler.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-join\-liveintervals\fP
+.INDENT 0.0
+.INDENT 3.5
+Coalesce copies (default=true).
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-nozero\-initialized\-in\-bss\fP Don\(aqt place zero\-initialized symbols into the BSS section.
+.sp
+\fB\-pre\-RA\-sched\fP=\fIscheduler\fP
+.INDENT 0.0
+.INDENT 3.5
+Instruction schedulers available (before register allocation):
+.INDENT 0.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+=default: Best scheduler for the target
+=none: No scheduling: breadth first sequencing
+=simple: Simple two pass scheduling: minimize critical path and maximize processor utilization
+=simple\-noitin: Simple two pass scheduling: Same as simple except using generic latency
+=list\-burr: Bottom\-up register reduction list scheduling
+=list\-tdrr: Top\-down register reduction list scheduling
+=list\-td: Top\-down list scheduler \-print\-machineinstrs \- Print generated machine code
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-regalloc\fP=\fIallocator\fP
+.INDENT 0.0
+.INDENT 3.5
+Register allocator to use (default=linearscan)
+.INDENT 0.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+=bigblock: Big\-block register allocator
+=linearscan: linear scan register allocator =local \-   local register allocator
+=simple: simple register allocator
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-relocation\-model\fP=\fImodel\fP
+.INDENT 0.0
+.INDENT 3.5
+Choose relocation model from:
+.INDENT 0.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+=default: Target default relocation model
+=static: Non\-relocatable code =pic \-   Fully relocatable, position independent code
+=dynamic\-no\-pic: Relocatable external references, non\-relocatable code
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-spiller\fP
+.INDENT 0.0
+.INDENT 3.5
+Spiller to use (default=local)
+.INDENT 0.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+=simple: simple spiller
+=local: local spiller
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-x86\-asm\-syntax\fP=\fIsyntax\fP
+.INDENT 0.0
+.INDENT 3.5
+Choose style of code to emit from X86 backend:
+.INDENT 0.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+=att: Emit AT&T\-style assembly
+=intel: Emit Intel\-style assembly
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBlli\fP fails to load the program, it will exit with an exit code of 1.
+Otherwise, it will return the exit code of the program it executes.
+.SH SEE ALSO
+.sp
+llc|llc
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-ar/Makefile b/usr.bin/clang/llvm-ar/Makefile
new file mode 100644
index 0000000..592be46
--- /dev/null
+++ b/usr.bin/clang/llvm-ar/Makefile
@@ -0,0 +1,15 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-ar
+
+SRCDIR=	tools/llvm-ar
+SRCS=	llvm-ar.cpp
+
+LIBDEPS=llvmarchive \
+	llvmbitreader \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-ar/llvm-ar.1 b/usr.bin/clang/llvm-ar/llvm-ar.1
new file mode 100644
index 0000000..b920cf5
--- /dev/null
+++ b/usr.bin/clang/llvm-ar/llvm-ar.1
@@ -0,0 +1,484 @@
+.\" $FreeBSD$
+.TH "LLVM-AR" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+llvm-ar \- LLVM archiver
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllvm\-ar\fP [\-]{dmpqrtx}[Rabfikou] [relpos] [count] <archive> [files...]
+.SH DESCRIPTION
+.sp
+The \fBllvm\-ar\fP command is similar to the common Unix utility, \fBar\fP. It
+archives several files together into a single file. The intent for this is
+to produce archive libraries by LLVM bitcode that can be linked into an
+LLVM program. However, the archive can contain any kind of file. By default,
+\fBllvm\-ar\fP generates a symbol table that makes linking faster because
+only the symbol table needs to be consulted, not each individual file member
+of the archive.
+.sp
+The \fBllvm\-ar\fP command can be used to \fIread\fP both SVR4 and BSD style archive
+files. However, it cannot be used to write them.  While the \fBllvm\-ar\fP command
+produces files that are \fIalmost\fP identical to the format used by other \fBar\fP
+implementations, it has two significant departures in order to make the
+archive appropriate for LLVM. The first departure is that \fBllvm\-ar\fP only
+uses BSD4.4 style long path names (stored immediately after the header) and
+never contains a string table for long names. The second departure is that the
+symbol table is formated for efficient construction of an in\-memory data
+structure that permits rapid (red\-black tree) lookups. Consequently, archives
+produced with \fBllvm\-ar\fP usually won\(aqt be readable or editable with any
+\fBar\fP implementation or useful for linking.  Using the \fBf\fP modifier to flatten
+file names will make the archive readable by other \fBar\fP implementations
+but not for linking because the symbol table format for LLVM is unique. If an
+SVR4 or BSD style archive is used with the \fBr\fP (replace) or \fBq\fP (quick
+update) operations, the archive will be reconstructed in LLVM format. This
+means that the string table will be dropped (in deference to BSD 4.4 long names)
+and an LLVM symbol table will be added (by default). The system symbol table
+will be retained.
+.sp
+Here\(aqs where \fBllvm\-ar\fP departs from previous \fBar\fP implementations:
+.sp
+\fISymbol Table\fP
+.INDENT 0.0
+.INDENT 3.5
+Since \fBllvm\-ar\fP is intended to archive bitcode files, the symbol table
+won\(aqt make much sense to anything but LLVM. Consequently, the symbol table\(aqs
+format has been simplified. It consists simply of a sequence of pairs
+of a file member index number as an LSB 4byte integer and a null\-terminated
+string.
+.UNINDENT
+.UNINDENT
+.sp
+\fILong Paths\fP
+.INDENT 0.0
+.INDENT 3.5
+Some \fBar\fP implementations (SVR4) use a separate file member to record long
+path names (> 15 characters). \fBllvm\-ar\fP takes the BSD 4.4 and Mac OS X
+approach which is to simply store the full path name immediately preceding
+the data for the file. The path name is null terminated and may contain the
+slash (/) character.
+.UNINDENT
+.UNINDENT
+.sp
+\fIDirectory Recursion\fP
+.INDENT 0.0
+.INDENT 3.5
+Most \fBar\fP implementations do not recurse through directories but simply
+ignore directories if they are presented to the program in the \fIfiles\fP
+option. \fBllvm\-ar\fP, however, can recurse through directory structures and
+add all the files under a directory, if requested.
+.UNINDENT
+.UNINDENT
+.sp
+\fITOC Verbose Output\fP
+.INDENT 0.0
+.INDENT 3.5
+When \fBllvm\-ar\fP prints out the verbose table of contents (\fBtv\fP option), it
+precedes the usual output with a character indicating the basic kind of
+content in the file. A blank means the file is a regular file. A \(aqB\(aq means
+the file is an LLVM bitcode file. An \(aqS\(aq means the file is the symbol table.
+.UNINDENT
+.UNINDENT
+.SH OPTIONS
+.sp
+The options to \fBllvm\-ar\fP are compatible with other \fBar\fP implementations.
+However, there are a few modifiers (\fIR\fP) that are not found in other \fBar\fP
+implementations. The options to \fBllvm\-ar\fP specify a single basic operation to
+perform on the archive, a variety of modifiers for that operation, the name of
+the archive file, and an optional list of file names. These options are used to
+determine how \fBllvm\-ar\fP should process the archive file.
+.sp
+The Operations and Modifiers are explained in the sections below. The minimal
+set of options is at least one operator and the name of the archive. Typically
+archive files end with a \fB.a\fP suffix, but this is not required. Following
+the \fIarchive\-name\fP comes a list of \fIfiles\fP that indicate the specific members
+of the archive to operate on. If the \fIfiles\fP option is not specified, it
+generally means either "none" or "all" members, depending on the operation.
+.SS Operations
+.sp
+d
+.INDENT 0.0
+.INDENT 3.5
+Delete files from the archive. No modifiers are applicable to this operation.
+The \fIfiles\fP options specify which members should be removed from the
+archive. It is not an error if a specified file does not appear in the archive.
+If no \fIfiles\fP are specified, the archive is not modified.
+.UNINDENT
+.UNINDENT
+.sp
+m[abi]
+.INDENT 0.0
+.INDENT 3.5
+Move files from one location in the archive to another. The \fIa\fP, \fIb\fP, and
+\fIi\fP modifiers apply to this operation. The \fIfiles\fP will all be moved
+to the location given by the modifiers. If no modifiers are used, the files
+will be moved to the end of the archive. If no \fIfiles\fP are specified, the
+archive is not modified.
+.UNINDENT
+.UNINDENT
+.sp
+p[k]
+.INDENT 0.0
+.INDENT 3.5
+Print files to the standard output. The \fIk\fP modifier applies to this
+operation. This operation simply prints the \fIfiles\fP indicated to the
+standard output. If no \fIfiles\fP are specified, the entire archive is printed.
+Printing bitcode files is ill\-advised as they might confuse your terminal
+settings. The \fIp\fP operation never modifies the archive.
+.UNINDENT
+.UNINDENT
+.sp
+q[Rf]
+.INDENT 0.0
+.INDENT 3.5
+Quickly append files to the end of the archive. The \fIR\fP, and \fIf\fP
+modifiers apply to this operation.  This operation quickly adds the
+\fIfiles\fP to the archive without checking for duplicates that should be
+removed first. If no \fIfiles\fP are specified, the archive is not modified.
+Because of the way that \fBllvm\-ar\fP constructs the archive file, its dubious
+whether the \fIq\fP operation is any faster than the \fIr\fP operation.
+.UNINDENT
+.UNINDENT
+.sp
+r[Rabfu]
+.INDENT 0.0
+.INDENT 3.5
+Replace or insert file members. The \fIR\fP, \fIa\fP, \fIb\fP, \fIf\fP, and \fIu\fP
+modifiers apply to this operation. This operation will replace existing
+\fIfiles\fP or insert them at the end of the archive if they do not exist. If no
+\fIfiles\fP are specified, the archive is not modified.
+.UNINDENT
+.UNINDENT
+.sp
+t[v]
+.INDENT 0.0
+.INDENT 3.5
+Print the table of contents. Without any modifiers, this operation just prints
+the names of the members to the standard output. With the \fIv\fP modifier,
+\fBllvm\-ar\fP also prints out the file type (B=bitcode, S=symbol
+table, blank=regular file), the permission mode, the owner and group, the
+size, and the date. If any \fIfiles\fP are specified, the listing is only for
+those files. If no \fIfiles\fP are specified, the table of contents for the
+whole archive is printed.
+.UNINDENT
+.UNINDENT
+.sp
+x[oP]
+.INDENT 0.0
+.INDENT 3.5
+Extract archive members back to files. The \fIo\fP modifier applies to this
+operation. This operation retrieves the indicated \fIfiles\fP from the archive
+and writes them back to the operating system\(aqs file system. If no
+\fIfiles\fP are specified, the entire archive is extract.
+.UNINDENT
+.UNINDENT
+.SS Modifiers (operation specific)
+.sp
+The modifiers below are specific to certain operations. See the Operations
+section (above) to determine which modifiers are applicable to which operations.
+.sp
+[a]
+.INDENT 0.0
+.INDENT 3.5
+When inserting or moving member files, this option specifies the destination of
+the new files as being after the \fIrelpos\fP member. If \fIrelpos\fP is not found,
+the files are placed at the end of the archive.
+.UNINDENT
+.UNINDENT
+.sp
+[b]
+.INDENT 0.0
+.INDENT 3.5
+When inserting or moving member files, this option specifies the destination of
+the new files as being before the \fIrelpos\fP member. If \fIrelpos\fP is not
+found, the files are placed at the end of the archive. This modifier is
+identical to the \fIi\fP modifier.
+.UNINDENT
+.UNINDENT
+.sp
+[f]
+.INDENT 0.0
+.INDENT 3.5
+Normally, \fBllvm\-ar\fP stores the full path name to a file as presented to it on
+the command line. With this option, truncated (15 characters max) names are
+used. This ensures name compatibility with older versions of \fBar\fP but may also
+thwart correct extraction of the files (duplicates may overwrite). If used with
+the \fIR\fP option, the directory recursion will be performed but the file names
+will all be flattened to simple file names.
+.UNINDENT
+.UNINDENT
+.sp
+[i]
+.INDENT 0.0
+.INDENT 3.5
+A synonym for the \fIb\fP option.
+.UNINDENT
+.UNINDENT
+.sp
+[k]
+.INDENT 0.0
+.INDENT 3.5
+Normally, \fBllvm\-ar\fP will not print the contents of bitcode files when the
+\fIp\fP operation is used. This modifier defeats the default and allows the
+bitcode members to be printed.
+.UNINDENT
+.UNINDENT
+.sp
+[N]
+.INDENT 0.0
+.INDENT 3.5
+This option is ignored by \fBllvm\-ar\fP but provided for compatibility.
+.UNINDENT
+.UNINDENT
+.sp
+[o]
+.INDENT 0.0
+.INDENT 3.5
+When extracting files, this option will cause \fBllvm\-ar\fP to preserve the
+original modification times of the files it writes.
+.UNINDENT
+.UNINDENT
+.sp
+[P]
+.INDENT 0.0
+.INDENT 3.5
+use full path names when matching
+.UNINDENT
+.UNINDENT
+.sp
+[R]
+.INDENT 0.0
+.INDENT 3.5
+This modifier instructions the \fIr\fP option to recursively process directories.
+Without \fIR\fP, directories are ignored and only those \fIfiles\fP that refer to
+files will be added to the archive. When \fIR\fP is used, any directories specified
+with \fIfiles\fP will be scanned (recursively) to find files to be added to the
+archive. Any file whose name begins with a dot will not be added.
+.UNINDENT
+.UNINDENT
+.sp
+[u]
+.INDENT 0.0
+.INDENT 3.5
+When replacing existing files in the archive, only replace those files that have
+a time stamp than the time stamp of the member in the archive.
+.UNINDENT
+.UNINDENT
+.SS Modifiers (generic)
+.sp
+The modifiers below may be applied to any operation.
+.sp
+[c]
+.INDENT 0.0
+.INDENT 3.5
+For all operations, \fBllvm\-ar\fP will always create the archive if it doesn\(aqt
+exist. Normally, \fBllvm\-ar\fP will print a warning message indicating that the
+archive is being created. Using this modifier turns off that warning.
+.UNINDENT
+.UNINDENT
+.sp
+[s]
+.INDENT 0.0
+.INDENT 3.5
+This modifier requests that an archive index (or symbol table) be added to the
+archive. This is the default mode of operation. The symbol table will contain
+all the externally visible functions and global variables defined by all the
+bitcode files in the archive. Using this modifier is more efficient that using
+llvm\-ranlib|llvm\-ranlib which also creates the symbol table.
+.UNINDENT
+.UNINDENT
+.sp
+[S]
+.INDENT 0.0
+.INDENT 3.5
+This modifier is the opposite of the \fIs\fP modifier. It instructs \fBllvm\-ar\fP to
+not build the symbol table. If both \fIs\fP and \fIS\fP are used, the last modifier to
+occur in the options will prevail.
+.UNINDENT
+.UNINDENT
+.sp
+[v]
+.INDENT 0.0
+.INDENT 3.5
+This modifier instructs \fBllvm\-ar\fP to be verbose about what it is doing. Each
+editing operation taken against the archive will produce a line of output saying
+what is being done.
+.UNINDENT
+.UNINDENT
+.SH STANDARDS
+.sp
+The \fBllvm\-ar\fP utility is intended to provide a superset of the IEEE Std 1003.2
+(POSIX.2) functionality for \fBar\fP. \fBllvm\-ar\fP can read both SVR4 and BSD4.4 (or
+Mac OS X) archives. If the \fBf\fP modifier is given to the \fBx\fP or \fBr\fP operations
+then \fBllvm\-ar\fP will write SVR4 compatible archives. Without this modifier,
+\fBllvm\-ar\fP will write BSD4.4 compatible archives that have long names
+immediately after the header and indicated using the "#1/ddd" notation for the
+name in the header.
+.SH FILE FORMAT
+.sp
+The file format for LLVM Archive files is similar to that of BSD 4.4 or Mac OSX
+archive files. In fact, except for the symbol table, the \fBar\fP commands on those
+operating systems should be able to read LLVM archive files. The details of the
+file format follow.
+.sp
+Each archive begins with the archive magic number which is the eight printable
+characters "!<arch>n" where n represents the newline character (0x0A).
+Following the magic number, the file is composed of even length members that
+begin with an archive header and end with a n padding character if necessary
+(to make the length even). Each file member is composed of a header (defined
+below), an optional newline\-terminated "long file name" and the contents of
+the file.
+.sp
+The fields of the header are described in the items below. All fields of the
+header contain only ASCII characters, are left justified and are right padded
+with space characters.
+.sp
+name \- char[16]
+.INDENT 0.0
+.INDENT 3.5
+This field of the header provides the name of the archive member. If the name is
+longer than 15 characters or contains a slash (/) character, then this field
+contains \fB#1/nnn\fP where \fBnnn\fP provides the length of the name and the \fB#1/\fP
+is literal.  In this case, the actual name of the file is provided in the \fBnnn\fP
+bytes immediately following the header. If the name is 15 characters or less, it
+is contained directly in this field and terminated with a slash (/) character.
+.UNINDENT
+.UNINDENT
+.sp
+date \- char[12]
+.INDENT 0.0
+.INDENT 3.5
+This field provides the date of modification of the file in the form of a
+decimal encoded number that provides the number of seconds since the epoch
+(since 00:00:00 Jan 1, 1970) per Posix specifications.
+.UNINDENT
+.UNINDENT
+.sp
+uid \- char[6]
+.INDENT 0.0
+.INDENT 3.5
+This field provides the user id of the file encoded as a decimal ASCII string.
+This field might not make much sense on non\-Unix systems. On Unix, it is the
+same value as the st_uid field of the stat structure returned by the stat(2)
+operating system call.
+.UNINDENT
+.UNINDENT
+.sp
+gid \- char[6]
+.INDENT 0.0
+.INDENT 3.5
+This field provides the group id of the file encoded as a decimal ASCII string.
+This field might not make much sense on non\-Unix systems. On Unix, it is the
+same value as the st_gid field of the stat structure returned by the stat(2)
+operating system call.
+.UNINDENT
+.UNINDENT
+.sp
+mode \- char[8]
+.INDENT 0.0
+.INDENT 3.5
+This field provides the access mode of the file encoded as an octal ASCII
+string. This field might not make much sense on non\-Unix systems. On Unix, it
+is the same value as the st_mode field of the stat structure returned by the
+stat(2) operating system call.
+.UNINDENT
+.UNINDENT
+.sp
+size \- char[10]
+.INDENT 0.0
+.INDENT 3.5
+This field provides the size of the file, in bytes, encoded as a decimal ASCII
+string.
+.UNINDENT
+.UNINDENT
+.sp
+fmag \- char[2]
+.INDENT 0.0
+.INDENT 3.5
+This field is the archive file member magic number. Its content is always the
+two characters back tick (0x60) and newline (0x0A). This provides some measure
+utility in identifying archive files that have been corrupted.
+.UNINDENT
+.UNINDENT
+.sp
+The LLVM symbol table has the special name "#_LLVM_SYM_TAB_#". It is presumed
+that no regular archive member file will want this name. The LLVM symbol table
+is simply composed of a sequence of triplets: byte offset, length of symbol,
+and the symbol itself. Symbols are not null or newline terminated. Here are
+the details on each of these items:
+.sp
+offset \- vbr encoded 32\-bit integer
+.INDENT 0.0
+.INDENT 3.5
+The offset item provides the offset into the archive file where the bitcode
+member is stored that is associated with the symbol. The offset value is 0
+based at the start of the first "normal" file member. To derive the actual
+file offset of the member, you must add the number of bytes occupied by the file
+signature (8 bytes) and the symbol tables. The value of this item is encoded
+using variable bit rate encoding to reduce the size of the symbol table.
+Variable bit rate encoding uses the high bit (0x80) of each byte to indicate
+if there are more bytes to follow. The remaining 7 bits in each byte carry bits
+from the value. The final byte does not have the high bit set.
+.UNINDENT
+.UNINDENT
+.sp
+length \- vbr encoded 32\-bit integer
+.INDENT 0.0
+.INDENT 3.5
+The length item provides the length of the symbol that follows. Like this
+\fIoffset\fP item, the length is variable bit rate encoded.
+.UNINDENT
+.UNINDENT
+.sp
+symbol \- character array
+.INDENT 0.0
+.INDENT 3.5
+The symbol item provides the text of the symbol that is associated with the
+\fIoffset\fP. The symbol is not terminated by any character. Its length is provided
+by the \fIlength\fP field. Note that is allowed (but unwise) to use non\-printing
+characters (even 0x00) in the symbol. This allows for multiple encodings of
+symbol names.
+.UNINDENT
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBllvm\-ar\fP succeeds, it will exit with 0.  A usage error, results
+in an exit code of 1. A hard (file system typically) error results in an
+exit code of 2. Miscellaneous or unknown errors result in an
+exit code of 3.
+.SH SEE ALSO
+.sp
+llvm\-ranlib|llvm\-ranlib, ar(1)
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-as/Makefile b/usr.bin/clang/llvm-as/Makefile
new file mode 100644
index 0000000..d3d0732
--- /dev/null
+++ b/usr.bin/clang/llvm-as/Makefile
@@ -0,0 +1,15 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-as
+
+SRCDIR=	tools/llvm-as
+SRCS=	llvm-as.cpp
+
+LIBDEPS=llvmbitwriter \
+	llvmasmparser \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-as/llvm-as.1 b/usr.bin/clang/llvm-as/llvm-as.1
new file mode 100644
index 0000000..79e6e39
--- /dev/null
+++ b/usr.bin/clang/llvm-as/llvm-as.1
@@ -0,0 +1,87 @@
+.\" $FreeBSD$
+.TH "LLVM-AS" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+llvm-as \- LLVM assembler
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllvm\-as\fP [\fIoptions\fP] [\fIfilename\fP]
+.SH DESCRIPTION
+.sp
+\fBllvm\-as\fP is the LLVM assembler.  It reads a file containing human\-readable
+LLVM assembly language, translates it to LLVM bitcode, and writes the result
+into a file or to standard output.
+.sp
+If \fIfilename\fP is omitted or is \fB\-\fP, then \fBllvm\-as\fP reads its input from
+standard input.
+.sp
+If an output file is not specified with the \fB\-o\fP option, then
+\fBllvm\-as\fP sends its output to a file or standard output by following
+these rules:
+.INDENT 0.0
+.IP \(bu 2
+If the input is standard input, then the output is standard output.
+.IP \(bu 2
+If the input is a file that ends with \fB.ll\fP, then the output file is of the
+same name, except that the suffix is changed to \fB.bc\fP.
+.IP \(bu 2
+If the input is a file that does not end with the \fB.ll\fP suffix, then the
+output file has the same name as the input file, except that the \fB.bc\fP
+suffix is appended.
+.UNINDENT
+.SH OPTIONS
+.INDENT 0.0
+.TP
+.B \fB\-f\fP
+Enable binary output on terminals.  Normally, \fBllvm\-as\fP will refuse to
+write raw bitcode output if the output stream is a terminal. With this option,
+\fBllvm\-as\fP will write raw bitcode regardless of the output device.
+.TP
+.B \fB\-help\fP
+Print a summary of command line options.
+.TP
+.B \fB\-o\fP \fIfilename\fP
+Specify the output file name.  If \fIfilename\fP is \fB\-\fP, then \fBllvm\-as\fP
+sends its output to standard output.
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBllvm\-as\fP succeeds, it will exit with 0.  Otherwise, if an error occurs, it
+will exit with a non\-zero value.
+.SH SEE ALSO
+.sp
+llvm\-dis|llvm\-dis, gccas|gccas
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-bcanalyzer/Makefile b/usr.bin/clang/llvm-bcanalyzer/Makefile
new file mode 100644
index 0000000..54446dc
--- /dev/null
+++ b/usr.bin/clang/llvm-bcanalyzer/Makefile
@@ -0,0 +1,14 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-bcanalyzer
+
+SRCDIR=	tools/llvm-bcanalyzer
+SRCS=	llvm-bcanalyzer.cpp
+
+LIBDEPS=llvmbitreader \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-bcanalyzer/llvm-bcanalyzer.1 b/usr.bin/clang/llvm-bcanalyzer/llvm-bcanalyzer.1
new file mode 100644
index 0000000..572d91b
--- /dev/null
+++ b/usr.bin/clang/llvm-bcanalyzer/llvm-bcanalyzer.1
@@ -0,0 +1,476 @@
+.\" $FreeBSD$
+.TH "LLVM-BCANALYZER" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+llvm-bcanalyzer \- LLVM bitcode analyzer
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllvm\-bcanalyzer\fP [\fIoptions\fP] [\fIfilename\fP]
+.SH DESCRIPTION
+.sp
+The \fBllvm\-bcanalyzer\fP command is a small utility for analyzing bitcode
+files.  The tool reads a bitcode file (such as generated with the
+\fBllvm\-as\fP tool) and produces a statistical report on the contents of
+the bitcode file.  The tool can also dump a low level but human readable
+version of the bitcode file.  This tool is probably not of much interest or
+utility except for those working directly with the bitcode file format.  Most
+LLVM users can just ignore this tool.
+.sp
+If \fIfilename\fP is omitted or is \fB\-\fP, then \fBllvm\-bcanalyzer\fP reads its
+input from standard input.  This is useful for combining the tool into a
+pipeline.  Output is written to the standard output.
+.SH OPTIONS
+.INDENT 0.0
+.TP
+.B \-nodetails
+Causes \fBllvm\-bcanalyzer\fP to abbreviate its output by writing out only
+a module level summary.  The details for individual functions are not
+displayed.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-dump
+Causes \fBllvm\-bcanalyzer\fP to dump the bitcode in a human readable
+format.  This format is significantly different from LLVM assembly and
+provides details about the encoding of the bitcode file.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-verify
+Causes \fBllvm\-bcanalyzer\fP to verify the module produced by reading the
+bitcode.  This ensures that the statistics generated are based on a consistent
+module.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-help
+Print a summary of command line options.
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBllvm\-bcanalyzer\fP succeeds, it will exit with 0.  Otherwise, if an
+error occurs, it will exit with a non\-zero value, usually 1.
+.SH SUMMARY OUTPUT DEFINITIONS
+.sp
+The following items are always printed by llvm\-bcanalyzer.  They comprize the
+summary output.
+.sp
+\fBBitcode Analysis Of Module\fP
+.INDENT 0.0
+.INDENT 3.5
+This just provides the name of the module for which bitcode analysis is being
+generated.
+.UNINDENT
+.UNINDENT
+.sp
+\fBBitcode Version Number\fP
+.INDENT 0.0
+.INDENT 3.5
+The bitcode version (not LLVM version) of the file read by the analyzer.
+.UNINDENT
+.UNINDENT
+.sp
+\fBFile Size\fP
+.INDENT 0.0
+.INDENT 3.5
+The size, in bytes, of the entire bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBModule Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The size, in bytes, of the module block.  Percentage is relative to File Size.
+.UNINDENT
+.UNINDENT
+.sp
+\fBFunction Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The size, in bytes, of all the function blocks.  Percentage is relative to File
+Size.
+.UNINDENT
+.UNINDENT
+.sp
+\fBGlobal Types Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The size, in bytes, of the Global Types Pool.  Percentage is relative to File
+Size.  This is the size of the definitions of all types in the bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBConstant Pool Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The size, in bytes, of the Constant Pool Blocks Percentage is relative to File
+Size.
+.UNINDENT
+.UNINDENT
+.sp
+\fBModule Globals Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+Ths size, in bytes, of the Global Variable Definitions and their initializers.
+Percentage is relative to File Size.
+.UNINDENT
+.UNINDENT
+.sp
+\fBInstruction List Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The size, in bytes, of all the instruction lists in all the functions.
+Percentage is relative to File Size.  Note that this value is also included in
+the Function Bytes.
+.UNINDENT
+.UNINDENT
+.sp
+\fBCompaction Table Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The size, in bytes, of all the compaction tables in all the functions.
+Percentage is relative to File Size.  Note that this value is also included in
+the Function Bytes.
+.UNINDENT
+.UNINDENT
+.sp
+\fBSymbol Table Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The size, in bytes, of all the symbol tables in all the functions.  Percentage is
+relative to File Size.  Note that this value is also included in the Function
+Bytes.
+.UNINDENT
+.UNINDENT
+.sp
+\fBDependent Libraries Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The size, in bytes, of the list of dependent libraries in the module.  Percentage
+is relative to File Size.  Note that this value is also included in the Module
+Global Bytes.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Bitcode Blocks\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of blocks of any kind in the bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Functions\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of function definitions in the bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Types\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of types defined in the Global Types Pool.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Constants\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of constants (of any type) defined in the Constant Pool.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Basic Blocks\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of basic blocks defined in all functions in the bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Instructions\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of instructions defined in all functions in the bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Long Instructions\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of long instructions defined in all functions in the bitcode
+file.  Long instructions are those taking greater than 4 bytes.  Typically long
+instructions are GetElementPtr with several indices, PHI nodes, and calls to
+functions with large numbers of arguments.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Operands\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of operands used in all instructions in the bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Compaction Tables\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of compaction tables in all functions in the bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Symbol Tables\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of symbol tables in all functions in the bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber Of Dependent Libs\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of dependent libraries found in the bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBTotal Instruction Size\fP
+.INDENT 0.0
+.INDENT 3.5
+The total size of the instructions in all functions in the bitcode file.
+.UNINDENT
+.UNINDENT
+.sp
+\fBAverage Instruction Size\fP
+.INDENT 0.0
+.INDENT 3.5
+The average number of bytes per instruction across all functions in the bitcode
+file.  This value is computed by dividing Total Instruction Size by Number Of
+Instructions.
+.UNINDENT
+.UNINDENT
+.sp
+\fBMaximum Type Slot Number\fP
+.INDENT 0.0
+.INDENT 3.5
+The maximum value used for a type\(aqs slot number.  Larger slot number values take
+more bytes to encode.
+.UNINDENT
+.UNINDENT
+.sp
+\fBMaximum Value Slot Number\fP
+.INDENT 0.0
+.INDENT 3.5
+The maximum value used for a value\(aqs slot number.  Larger slot number values take
+more bytes to encode.
+.UNINDENT
+.UNINDENT
+.sp
+\fBBytes Per Value\fP
+.INDENT 0.0
+.INDENT 3.5
+The average size of a Value definition (of any type).  This is computed by
+dividing File Size by the total number of values of any type.
+.UNINDENT
+.UNINDENT
+.sp
+\fBBytes Per Global\fP
+.INDENT 0.0
+.INDENT 3.5
+The average size of a global definition (constants and global variables).
+.UNINDENT
+.UNINDENT
+.sp
+\fBBytes Per Function\fP
+.INDENT 0.0
+.INDENT 3.5
+The average number of bytes per function definition.  This is computed by
+dividing Function Bytes by Number Of Functions.
+.UNINDENT
+.UNINDENT
+.sp
+\fB# of VBR 32\-bit Integers\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of 32\-bit integers encoded using the Variable Bit Rate
+encoding scheme.
+.UNINDENT
+.UNINDENT
+.sp
+\fB# of VBR 64\-bit Integers\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of 64\-bit integers encoded using the Variable Bit Rate encoding
+scheme.
+.UNINDENT
+.UNINDENT
+.sp
+\fB# of VBR Compressed Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of bytes consumed by the 32\-bit and 64\-bit integers that use
+the Variable Bit Rate encoding scheme.
+.UNINDENT
+.UNINDENT
+.sp
+\fB# of VBR Expanded Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of bytes that would have been consumed by the 32\-bit and 64\-bit
+integers had they not been compressed with the Variable Bit Rage encoding
+scheme.
+.UNINDENT
+.UNINDENT
+.sp
+\fBBytes Saved With VBR\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of bytes saved by using the Variable Bit Rate encoding scheme.
+The percentage is relative to # of VBR Expanded Bytes.
+.UNINDENT
+.UNINDENT
+.SH DETAILED OUTPUT DEFINITIONS
+.sp
+The following definitions occur only if the \-nodetails option was not given.
+The detailed output provides additional information on a per\-function basis.
+.sp
+\fBType\fP
+.INDENT 0.0
+.INDENT 3.5
+The type signature of the function.
+.UNINDENT
+.UNINDENT
+.sp
+\fBByte Size\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of bytes in the function\(aqs block.
+.UNINDENT
+.UNINDENT
+.sp
+\fBBasic Blocks\fP
+.INDENT 0.0
+.INDENT 3.5
+The number of basic blocks defined by the function.
+.UNINDENT
+.UNINDENT
+.sp
+\fBInstructions\fP
+.INDENT 0.0
+.INDENT 3.5
+The number of instructions defined by the function.
+.UNINDENT
+.UNINDENT
+.sp
+\fBLong Instructions\fP
+.INDENT 0.0
+.INDENT 3.5
+The number of instructions using the long instruction format in the function.
+.UNINDENT
+.UNINDENT
+.sp
+\fBOperands\fP
+.INDENT 0.0
+.INDENT 3.5
+The number of operands used by all instructions in the function.
+.UNINDENT
+.UNINDENT
+.sp
+\fBInstruction Size\fP
+.INDENT 0.0
+.INDENT 3.5
+The number of bytes consumed by instructions in the function.
+.UNINDENT
+.UNINDENT
+.sp
+\fBAverage Instruction Size\fP
+.INDENT 0.0
+.INDENT 3.5
+The average number of bytes consumed by the instructions in the function.
+This value is computed by dividing Instruction Size by Instructions.
+.UNINDENT
+.UNINDENT
+.sp
+\fBBytes Per Instruction\fP
+.INDENT 0.0
+.INDENT 3.5
+The average number of bytes used by the function per instruction.  This value
+is computed by dividing Byte Size by Instructions.  Note that this is not the
+same as Average Instruction Size.  It computes a number relative to the total
+function size not just the size of the instruction list.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber of VBR 32\-bit Integers\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of 32\-bit integers found in this function (for any use).
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber of VBR 64\-bit Integers\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of 64\-bit integers found in this function (for any use).
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber of VBR Compressed Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of bytes in this function consumed by the 32\-bit and 64\-bit
+integers that use the Variable Bit Rate encoding scheme.
+.UNINDENT
+.UNINDENT
+.sp
+\fBNumber of VBR Expanded Bytes\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of bytes in this function that would have been consumed by
+the 32\-bit and 64\-bit integers had they not been compressed with the Variable
+Bit Rate encoding scheme.
+.UNINDENT
+.UNINDENT
+.sp
+\fBBytes Saved With VBR\fP
+.INDENT 0.0
+.INDENT 3.5
+The total number of bytes saved in this function by using the Variable Bit
+Rate encoding scheme.  The percentage is relative to # of VBR Expanded Bytes.
+.UNINDENT
+.UNINDENT
+.SH SEE ALSO
+.sp
+\fB/CommandGuide/llvm\-dis\fP, \fB/BitCodeFormat\fP
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-diff/Makefile b/usr.bin/clang/llvm-diff/Makefile
new file mode 100644
index 0000000..527daa2
--- /dev/null
+++ b/usr.bin/clang/llvm-diff/Makefile
@@ -0,0 +1,19 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-diff
+
+SRCDIR=	tools/llvm-diff
+SRCS=	llvm-diff.cpp \
+	DiffConsumer.cpp \
+	DiffLog.cpp \
+	DifferenceEngine.cpp
+
+LIBDEPS=llvmirreader \
+	llvmbitreader \
+	llvmasmparser \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-diff/llvm-diff.1 b/usr.bin/clang/llvm-diff/llvm-diff.1
new file mode 100644
index 0000000..9d4446e
--- /dev/null
+++ b/usr.bin/clang/llvm-diff/llvm-diff.1
@@ -0,0 +1,77 @@
+.\" $FreeBSD$
+.TH "LLVM-DIFF" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+llvm-diff \- LLVM structural 'diff'
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllvm\-diff\fP [\fIoptions\fP] \fImodule 1\fP \fImodule 2\fP [\fIglobal name ...\fP]
+.SH DESCRIPTION
+.sp
+\fBllvm\-diff\fP compares the structure of two LLVM modules, primarily
+focusing on differences in function definitions.  Insignificant
+differences, such as changes in the ordering of globals or in the
+names of local values, are ignored.
+.sp
+An input module will be interpreted as an assembly file if its name
+ends in \(aq.ll\(aq;  otherwise it will be read in as a bitcode file.
+.sp
+If a list of global names is given, just the values with those names
+are compared; otherwise, all global values are compared, and
+diagnostics are produced for globals which only appear in one module
+or the other.
+.sp
+\fBllvm\-diff\fP compares two functions by comparing their basic blocks,
+beginning with the entry blocks.  If the terminators seem to match,
+then the corresponding successors are compared; otherwise they are
+ignored.  This algorithm is very sensitive to changes in control flow,
+which tend to stop any downstream changes from being detected.
+.sp
+\fBllvm\-diff\fP is intended as a debugging tool for writers of LLVM
+passes and frontends.  It does not have a stable output format.
+.SH EXIT STATUS
+.sp
+If \fBllvm\-diff\fP finds no differences between the modules, it will exit
+with 0 and produce no output.  Otherwise it will exit with a non\-zero
+value.
+.SH BUGS
+.sp
+Many important differences, like changes in linkage or function
+attributes, are not diagnosed.
+.sp
+Changes in memory behavior (for example, coalescing loads) can cause
+massive detected differences in blocks.
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-dis/Makefile b/usr.bin/clang/llvm-dis/Makefile
new file mode 100644
index 0000000..3fe3f78
--- /dev/null
+++ b/usr.bin/clang/llvm-dis/Makefile
@@ -0,0 +1,19 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-dis
+
+SRCDIR=	tools/llvm-dis
+SRCS=	llvm-dis.cpp
+
+TGHDRS=	Intrinsics
+LIBDEPS=llvmanalysis \
+	llvmtarget \
+	llvmmc \
+	llvmobject \
+	llvmbitreader \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-dis/llvm-dis.1 b/usr.bin/clang/llvm-dis/llvm-dis.1
new file mode 100644
index 0000000..fa3c012
--- /dev/null
+++ b/usr.bin/clang/llvm-dis/llvm-dis.1
@@ -0,0 +1,88 @@
+.\" $FreeBSD$
+.TH "LLVM-DIS" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+llvm-dis \- LLVM disassembler
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllvm\-dis\fP [\fIoptions\fP] [\fIfilename\fP]
+.SH DESCRIPTION
+.sp
+The \fBllvm\-dis\fP command is the LLVM disassembler.  It takes an LLVM
+bitcode file and converts it into human\-readable LLVM assembly language.
+.sp
+If filename is omitted or specified as \fB\-\fP, \fBllvm\-dis\fP reads its
+input from standard input.
+.sp
+If the input is being read from standard input, then \fBllvm\-dis\fP
+will send its output to standard output by default.  Otherwise, the
+output will be written to a file named after the input file, with
+a \fB.ll\fP suffix added (any existing \fB.bc\fP suffix will first be
+removed).  You can override the choice of output file using the
+\fB\-o\fP option.
+.SH OPTIONS
+.sp
+\fB\-f\fP
+.INDENT 0.0
+.INDENT 3.5
+Enable binary output on terminals.  Normally, \fBllvm\-dis\fP will refuse to
+write raw bitcode output if the output stream is a terminal. With this option,
+\fBllvm\-dis\fP will write raw bitcode regardless of the output device.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-help\fP
+.INDENT 0.0
+.INDENT 3.5
+Print a summary of command line options.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-o\fP \fIfilename\fP
+.INDENT 0.0
+.INDENT 3.5
+Specify the output file name.  If \fIfilename\fP is \-, then the output is sent
+to standard output.
+.UNINDENT
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBllvm\-dis\fP succeeds, it will exit with 0.  Otherwise, if an error
+occurs, it will exit with a non\-zero value.
+.SH SEE ALSO
+.sp
+llvm\-as|llvm\-as
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-extract/Makefile b/usr.bin/clang/llvm-extract/Makefile
new file mode 100644
index 0000000..007c9c7
--- /dev/null
+++ b/usr.bin/clang/llvm-extract/Makefile
@@ -0,0 +1,28 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-extract
+
+SRCDIR=	tools/llvm-extract
+SRCS=	llvm-extract.cpp
+
+LIBDEPS=llvmirreader \
+	llvmasmparser \
+	llvmbitwriter \
+	llvmbitreader \
+	llvmipo \
+	llvmobjcarcopts \
+	llvmvectorize \
+	llvmscalaropts \
+	llvminstcombine \
+	llvmtransformutils \
+	llvmipa \
+	llvmanalysis \
+	llvmtarget \
+	llvmmc \
+	llvmobject \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-extract/llvm-extract.1 b/usr.bin/clang/llvm-extract/llvm-extract.1
new file mode 100644
index 0000000..6871124
--- /dev/null
+++ b/usr.bin/clang/llvm-extract/llvm-extract.1
@@ -0,0 +1,128 @@
+.\" $FreeBSD$
+.TH "LLVM-EXTRACT" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+llvm-extract \- extract a function from an LLVM module
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllvm\-extract\fP [\fIoptions\fP] \fB\-\-func\fP \fIfunction\-name\fP [\fIfilename\fP]
+.SH DESCRIPTION
+.sp
+The \fBllvm\-extract\fP command takes the name of a function and extracts it from
+the specified LLVM bitcode file.  It is primarily used as a debugging tool to
+reduce test cases from larger programs that are triggering a bug.
+.sp
+In addition to extracting the bitcode of the specified function,
+\fBllvm\-extract\fP will also remove unreachable global variables, prototypes, and
+unused types.
+.sp
+The \fBllvm\-extract\fP command reads its input from standard input if filename is
+omitted or if filename is \-.  The output is always written to standard output,
+unless the \fB\-o\fP option is specified (see below).
+.SH OPTIONS
+.sp
+\fB\-f\fP
+.INDENT 0.0
+.INDENT 3.5
+Enable binary output on terminals.  Normally, \fBllvm\-extract\fP will refuse to
+write raw bitcode output if the output stream is a terminal. With this option,
+\fBllvm\-extract\fP will write raw bitcode regardless of the output device.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-func\fP \fIfunction\-name\fP
+.INDENT 0.0
+.INDENT 3.5
+Extract the function named \fIfunction\-name\fP from the LLVM bitcode. May be
+specified multiple times to extract multiple functions at once.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-rfunc\fP \fIfunction\-regular\-expr\fP
+.INDENT 0.0
+.INDENT 3.5
+Extract the function(s) matching \fIfunction\-regular\-expr\fP from the LLVM bitcode.
+All functions matching the regular expression will be extracted.  May be
+specified multiple times.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-glob\fP \fIglobal\-name\fP
+.INDENT 0.0
+.INDENT 3.5
+Extract the global variable named \fIglobal\-name\fP from the LLVM bitcode. May be
+specified multiple times to extract multiple global variables at once.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-rglob\fP \fIglob\-regular\-expr\fP
+.INDENT 0.0
+.INDENT 3.5
+Extract the global variable(s) matching \fIglobal\-regular\-expr\fP from the LLVM
+bitcode. All global variables matching the regular expression will be extracted.
+May be specified multiple times.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-help\fP
+.INDENT 0.0
+.INDENT 3.5
+Print a summary of command line options.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-o\fP \fIfilename\fP
+.INDENT 0.0
+.INDENT 3.5
+Specify the output filename.  If filename is "\-" (the default), then
+\fBllvm\-extract\fP sends its output to standard output.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-S\fP
+.INDENT 0.0
+.INDENT 3.5
+Write output in LLVM intermediate language (instead of bitcode).
+.UNINDENT
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBllvm\-extract\fP succeeds, it will exit with 0.  Otherwise, if an error
+occurs, it will exit with a non\-zero value.
+.SH SEE ALSO
+.sp
+bugpoint|bugpoint
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-link/Makefile b/usr.bin/clang/llvm-link/Makefile
new file mode 100644
index 0000000..12591ae
--- /dev/null
+++ b/usr.bin/clang/llvm-link/Makefile
@@ -0,0 +1,24 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-link
+
+SRCDIR=	tools/llvm-link
+SRCS=	llvm-link.cpp
+
+LIBDEPS=llvmirreader \
+	llvmasmparser \
+	llvmbitwriter \
+	llvmbitreader \
+	llvmlinker \
+	llvmtransformutils \
+	llvmipa \
+	llvmanalysis \
+	llvmtarget \
+	llvmmc \
+	llvmobject \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-link/llvm-link.1 b/usr.bin/clang/llvm-link/llvm-link.1
new file mode 100644
index 0000000..46f24ee
--- /dev/null
+++ b/usr.bin/clang/llvm-link/llvm-link.1
@@ -0,0 +1,89 @@
+.\" $FreeBSD$
+.TH "LLVM-LINK" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+llvm-link \- LLVM bitcode linker
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllvm\-link\fP [\fIoptions\fP] \fIfilename ...\fP
+.SH DESCRIPTION
+.sp
+\fBllvm\-link\fP takes several LLVM bitcode files and links them together
+into a single LLVM bitcode file.  It writes the output file to standard output,
+unless the \fI\-o\fP option is used to specify a filename.
+.SH OPTIONS
+.INDENT 0.0
+.TP
+.B \-f
+Enable binary output on terminals.  Normally, \fBllvm\-link\fP will refuse
+to write raw bitcode output if the output stream is a terminal. With this
+option, \fBllvm\-link\fP will write raw bitcode regardless of the output
+device.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-o filename
+Specify the output file name.  If \fBfilename\fP is "\fB\-\fP", then
+\fBllvm\-link\fP will write its output to standard output.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-S
+Write output in LLVM intermediate language (instead of bitcode).
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-d
+If specified, \fBllvm\-link\fP prints a human\-readable version of the
+output bitcode file to standard error.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-help
+Print a summary of command line options.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-v
+Verbose mode.  Print information about what \fBllvm\-link\fP is doing.
+This typically includes a message for each bitcode file linked in and for each
+library found.
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBllvm\-link\fP succeeds, it will exit with 0.  Otherwise, if an error
+occurs, it will exit with a non\-zero value.
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-mc/Makefile b/usr.bin/clang/llvm-mc/Makefile
new file mode 100644
index 0000000..55a702b
--- /dev/null
+++ b/usr.bin/clang/llvm-mc/Makefile
@@ -0,0 +1,52 @@
+# $FreeBSD$
+
+NO_MAN=
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-mc
+
+SRCDIR=	tools/llvm-mc
+SRCS=	llvm-mc.cpp \
+	Disassembler.cpp
+
+LIBDEPS=llvmmcdisassembler \
+	llvmarmdisassembler \
+	llvmarmcodegen \
+	llvmarmasmparser \
+	llvmarmdesc \
+	llvmarminfo \
+	llvmarminstprinter \
+	llvmmipsdisassembler \
+	llvmmipscodegen \
+	llvmmipsasmparser \
+	llvmmipsdesc \
+	llvmmipsinfo \
+	llvmmipsinstprinter \
+	llvmpowerpccodegen \
+	llvmpowerpcdesc \
+	llvmpowerpcinfo \
+	llvmpowerpcinstprinter \
+	llvmx86disassembler \
+	llvmx86asmparser \
+	llvmx86codegen \
+	llvmselectiondag \
+	llvmasmprinter \
+	llvmmcparser \
+	llvmcodegen \
+	llvmobjcarcopts \
+	llvmscalaropts \
+	llvminstcombine \
+	llvmtransformutils \
+	llvmipa \
+	llvmanalysis \
+	llvmx86desc \
+	llvmx86info \
+	llvmtarget \
+	llvmx86instprinter \
+	llvmmc \
+	llvmobject \
+	llvmx86utils \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-nm/Makefile b/usr.bin/clang/llvm-nm/Makefile
new file mode 100644
index 0000000..bff0cdf
--- /dev/null
+++ b/usr.bin/clang/llvm-nm/Makefile
@@ -0,0 +1,16 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-nm
+
+SRCDIR=	tools/llvm-nm
+SRCS=	llvm-nm.cpp
+
+LIBDEPS=llvmobject \
+	llvmarchive \
+	llvmbitreader \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-nm/llvm-nm.1 b/usr.bin/clang/llvm-nm/llvm-nm.1
new file mode 100644
index 0000000..ddfabad
--- /dev/null
+++ b/usr.bin/clang/llvm-nm/llvm-nm.1
@@ -0,0 +1,213 @@
+.\" $FreeBSD$
+.TH "LLVM-NM" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+llvm-nm \- list LLVM bitcode and object file's symbol table
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllvm\-nm\fP [\fIoptions\fP] [\fIfilenames...\fP]
+.SH DESCRIPTION
+.sp
+The \fBllvm\-nm\fP utility lists the names of symbols from the LLVM bitcode
+files, object files, or \fBar\fP archives containing them, named on the
+command line. Each symbol is listed along with some simple information about its
+provenance. If no file name is specified, or \fI\-\fP is used as a file name,
+\fBllvm\-nm\fP will process a file on its standard input stream.
+.sp
+\fBllvm\-nm\fP\(aqs default output format is the traditional BSD \fBnm\fP
+output format. Each such output record consists of an (optional) 8\-digit
+hexadecimal address, followed by a type code character, followed by a name, for
+each symbol. One record is printed per line; fields are separated by spaces.
+When the address is omitted, it is replaced by 8 spaces.
+.sp
+Type code characters currently supported, and their meanings, are as follows:
+.sp
+U
+.INDENT 0.0
+.INDENT 3.5
+Named object is referenced but undefined in this bitcode file
+.UNINDENT
+.UNINDENT
+.sp
+C
+.INDENT 0.0
+.INDENT 3.5
+Common (multiple definitions link together into one def)
+.UNINDENT
+.UNINDENT
+.sp
+W
+.INDENT 0.0
+.INDENT 3.5
+Weak reference (multiple definitions link together into zero or one definitions)
+.UNINDENT
+.UNINDENT
+.sp
+t
+.INDENT 0.0
+.INDENT 3.5
+Local function (text) object
+.UNINDENT
+.UNINDENT
+.sp
+T
+.INDENT 0.0
+.INDENT 3.5
+Global function (text) object
+.UNINDENT
+.UNINDENT
+.sp
+d
+.INDENT 0.0
+.INDENT 3.5
+Local data object
+.UNINDENT
+.UNINDENT
+.sp
+D
+.INDENT 0.0
+.INDENT 3.5
+Global data object
+.UNINDENT
+.UNINDENT
+.sp
+?
+.INDENT 0.0
+.INDENT 3.5
+Something unrecognizable
+.UNINDENT
+.UNINDENT
+.sp
+Because LLVM bitcode files typically contain objects that are not considered to
+have addresses until they are linked into an executable image or dynamically
+compiled "just\-in\-time", \fBllvm\-nm\fP does not print an address for any
+symbol in a LLVM bitcode file, even symbols which are defined in the bitcode
+file.
+.SH OPTIONS
+.INDENT 0.0
+.TP
+.B \-B    (default)
+Use BSD output format. Alias for \fI\-\-format=bsd\fP.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-P
+Use POSIX.2 output format. Alias for \fI\-\-format=posix\fP.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-debug\-syms, \-a
+Show all symbols, even debugger only.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-defined\-only
+Print only symbols defined in this file (as opposed to
+symbols which may be referenced by objects in this file, but not
+defined in this file.)
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-dynamic, \-D
+Display dynamic symbols instead of normal symbols.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-extern\-only, \-g
+Print only symbols whose definitions are external; that is, accessible
+from other files.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-format=format, \-f format
+Select an output format; \fIformat\fP may be \fIsysv\fP, \fIposix\fP, or \fIbsd\fP. The default
+is \fIbsd\fP.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-help
+Print a summary of command\-line options and their meanings.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-no\-sort, \-p
+Shows symbols in order encountered.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-numeric\-sort, \-n, \-v
+Sort symbols by address.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-print\-file\-name, \-A, \-o
+Precede each symbol with the file it came from.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-print\-size, \-S
+Show symbol size instead of address.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-size\-sort
+Sort symbols by size.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-\-undefined\-only, \-u
+Print only symbols referenced but not defined in this file.
+.UNINDENT
+.SH BUGS
+.INDENT 0.0
+.INDENT 3.5
+.INDENT 0.0
+.IP \(bu 2
+\fBllvm\-nm\fP cannot demangle C++ mangled names, like GNU \fBnm\fP
+can.
+.IP \(bu 2
+\fBllvm\-nm\fP does not support the full set of arguments that GNU
+\fBnm\fP does.
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.SH EXIT STATUS
+.sp
+\fBllvm\-nm\fP exits with an exit code of zero.
+.SH SEE ALSO
+.sp
+llvm\-dis|llvm\-dis, ar(1), nm(1)
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-objdump/Makefile b/usr.bin/clang/llvm-objdump/Makefile
new file mode 100644
index 0000000..9e215a1
--- /dev/null
+++ b/usr.bin/clang/llvm-objdump/Makefile
@@ -0,0 +1,58 @@
+# $FreeBSD$
+
+NO_MAN=
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-objdump
+DPADD=	${LIBZ}
+LDADD=	-lz
+
+SRCDIR=	tools/llvm-objdump
+SRCS=	llvm-objdump.cpp \
+	COFFDump.cpp \
+	ELFDump.cpp \
+	MachODump.cpp \
+	MCFunction.cpp
+
+LIBDEPS=llvmmcdisassembler \
+	llvmdebuginfo \
+	llvmarmdisassembler \
+	llvmarmcodegen \
+	llvmarmasmparser \
+	llvmarmdesc \
+	llvmarminfo \
+	llvmarminstprinter \
+	llvmmipsdisassembler \
+	llvmmipscodegen \
+	llvmmipsasmparser \
+	llvmmipsdesc \
+	llvmmipsinfo \
+	llvmmipsinstprinter \
+	llvmpowerpccodegen \
+	llvmpowerpcdesc \
+	llvmpowerpcinfo \
+	llvmpowerpcinstprinter \
+	llvmx86disassembler \
+	llvmx86asmparser \
+	llvmx86codegen \
+	llvmselectiondag \
+	llvmasmprinter \
+	llvmmcparser \
+	llvmcodegen \
+	llvmobjcarcopts \
+	llvmscalaropts \
+	llvminstcombine \
+	llvmtransformutils \
+	llvmipa \
+	llvmanalysis \
+	llvmx86desc \
+	llvmx86info \
+	llvmtarget \
+	llvmx86instprinter \
+	llvmmc \
+	llvmobject \
+	llvmx86utils \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-prof/Makefile b/usr.bin/clang/llvm-prof/Makefile
new file mode 100644
index 0000000..3dff62a
--- /dev/null
+++ b/usr.bin/clang/llvm-prof/Makefile
@@ -0,0 +1,18 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-prof
+
+SRCDIR=	tools/llvm-prof
+SRCS=	llvm-prof.cpp
+
+LIBDEPS=llvmanalysis \
+	llvmtarget \
+	llvmmc \
+	llvmobject \
+	llvmbitreader \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-prof/llvm-prof.1 b/usr.bin/clang/llvm-prof/llvm-prof.1
new file mode 100644
index 0000000..ab5b603
--- /dev/null
+++ b/usr.bin/clang/llvm-prof/llvm-prof.1
@@ -0,0 +1,86 @@
+.\" $FreeBSD$
+.TH "LLVM-PROF" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+llvm-prof \- print execution profile of LLVM program
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllvm\-prof\fP [\fIoptions\fP] [\fIbitcode file\fP] [\fIllvmprof.out\fP]
+.SH DESCRIPTION
+.sp
+The \fBllvm\-prof\fP tool reads in an \fIllvmprof.out\fP file (which can
+optionally use a specific file with the third program argument), a bitcode file
+for the program, and produces a human readable report, suitable for determining
+where the program hotspots are.
+.sp
+This program is often used in conjunction with the \fIutils/profile.pl\fP
+script.  This script automatically instruments a program, runs it with the JIT,
+then runs \fBllvm\-prof\fP to format a report.  To get more information about
+\fIutils/profile.pl\fP, execute it with the \fB\-help\fP option.
+.SH OPTIONS
+.sp
+\fB\-\-annotated\-llvm\fP or \fB\-A\fP
+.INDENT 0.0
+.INDENT 3.5
+In addition to the normal report printed, print out the code for the
+program, annotated with execution frequency information. This can be
+particularly useful when trying to visualize how frequently basic blocks
+are executed.  This is most useful with basic block profiling
+information or better.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-print\-all\-code\fP
+.INDENT 0.0
+.INDENT 3.5
+Using this option enables the \fB\-\-annotated\-llvm\fP option, but it
+prints the entire module, instead of just the most commonly executed
+functions.
+.UNINDENT
+.UNINDENT
+.sp
+\fB\-\-time\-passes\fP
+.INDENT 0.0
+.INDENT 3.5
+Record the amount of time needed for each pass and print it to standard
+error.
+.UNINDENT
+.UNINDENT
+.SH EXIT STATUS
+.sp
+\fBllvm\-prof\fP returns 1 if it cannot load the bitcode file or the profile
+information. Otherwise, it exits with zero.
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-ranlib/Makefile b/usr.bin/clang/llvm-ranlib/Makefile
new file mode 100644
index 0000000..2414e1f
--- /dev/null
+++ b/usr.bin/clang/llvm-ranlib/Makefile
@@ -0,0 +1,15 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-ranlib
+
+SRCDIR=	tools/llvm-ranlib
+SRCS=	llvm-ranlib.cpp
+
+LIBDEPS=llvmarchive \
+	llvmbitreader \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/llvm-ranlib/llvm-ranlib.1 b/usr.bin/clang/llvm-ranlib/llvm-ranlib.1
new file mode 100644
index 0000000..ead004a
--- /dev/null
+++ b/usr.bin/clang/llvm-ranlib/llvm-ranlib.1
@@ -0,0 +1,80 @@
+.\" $FreeBSD$
+.TH "LLVM-RANLIB" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+llvm-ranlib \- Generate index for LLVM archive
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBllvm\-ranlib\fP [\-\-version] [\-help] <archive\-file>
+.SH DESCRIPTION
+.sp
+The \fBllvm\-ranlib\fP command is similar to the common Unix utility, \fBranlib\fP. It
+adds or updates the symbol table in an LLVM archive file. Note that using the
+\fBllvm\-ar\fP modifier \fIs\fP is usually more efficient than running \fBllvm\-ranlib\fP
+which is only provided only for completness and compatibility. Unlike other
+implementations of \fBranlib\fP, \fBllvm\-ranlib\fP indexes LLVM bitcode files, not
+native object modules. You can list the contents of the symbol table with the
+\fBllvm\-nm \-s\fP command.
+.SH OPTIONS
+.sp
+\fIarchive\-file\fP
+.INDENT 0.0
+.INDENT 3.5
+Specifies the archive\-file to which the symbol table is added or updated.
+.UNINDENT
+.UNINDENT
+.sp
+\fI\-\-version\fP
+.INDENT 0.0
+.INDENT 3.5
+Print the version of \fBllvm\-ranlib\fP and exit without building a symbol table.
+.UNINDENT
+.UNINDENT
+.sp
+\fI\-help\fP
+.INDENT 0.0
+.INDENT 3.5
+Print usage help for \fBllvm\-ranlib\fP and exit without building a symbol table.
+.UNINDENT
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBllvm\-ranlib\fP succeeds, it will exit with 0.  If an error occurs, a non\-zero
+exit code will be returned.
+.SH SEE ALSO
+.sp
+llvm\-ar|llvm\-ar, ranlib(1)
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/llvm-rtdyld/Makefile b/usr.bin/clang/llvm-rtdyld/Makefile
new file mode 100644
index 0000000..aae366a
--- /dev/null
+++ b/usr.bin/clang/llvm-rtdyld/Makefile
@@ -0,0 +1,56 @@
+# $FreeBSD$
+
+NO_MAN=
+.include <bsd.own.mk>
+
+PROG_CXX=llvm-rtdyld
+DPADD=	${LIBZ}
+LDADD=	-lz
+
+SRCDIR=	tools/llvm-rtdyld
+SRCS=	llvm-rtdyld.cpp
+
+LIBDEPS=llvmdebuginfo \
+	llvmjit \
+	llvmexecutionengine \
+	llvmruntimedyld \
+	llvmarmdisassembler \
+	llvmarmcodegen \
+	llvmarmasmparser \
+	llvmarmdesc \
+	llvmarminfo \
+	llvmarminstprinter \
+	llvmmipsdisassembler \
+	llvmmipscodegen \
+	llvmmipsasmparser \
+	llvmmipsdesc \
+	llvmmipsinfo \
+	llvmmipsinstprinter \
+	llvmpowerpccodegen \
+	llvmpowerpcdesc \
+	llvmpowerpcinfo \
+	llvmpowerpcinstprinter \
+	llvmx86disassembler \
+	llvmx86asmparser \
+	llvmx86codegen \
+	llvmselectiondag \
+	llvmasmprinter \
+	llvmmcparser \
+	llvmcodegen \
+	llvmobjcarcopts \
+	llvmscalaropts \
+	llvminstcombine \
+	llvmtransformutils \
+	llvmipa \
+	llvmanalysis \
+	llvmx86desc \
+	llvmx86info \
+	llvmtarget \
+	llvmx86instprinter \
+	llvmmc \
+	llvmobject \
+	llvmx86utils \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/macho-dump/Makefile b/usr.bin/clang/macho-dump/Makefile
new file mode 100644
index 0000000..bafd150
--- /dev/null
+++ b/usr.bin/clang/macho-dump/Makefile
@@ -0,0 +1,14 @@
+# $FreeBSD$
+
+NO_MAN=
+.include <bsd.own.mk>
+
+PROG_CXX=macho-dump
+
+SRCDIR=	tools/macho-dump
+SRCS=	macho-dump.cpp
+
+LIBDEPS=llvmobject \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/opt/Makefile b/usr.bin/clang/opt/Makefile
new file mode 100644
index 0000000..e881329
--- /dev/null
+++ b/usr.bin/clang/opt/Makefile
@@ -0,0 +1,60 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=opt
+
+SRCDIR=	tools/opt
+SRCS=	AnalysisWrappers.cpp \
+	GraphPrinters.cpp \
+	PrintSCC.cpp \
+	opt.cpp
+
+TGHDRS=	Intrinsics
+LIBDEPS=llvmarmdisassembler \
+	llvmarmcodegen \
+	llvmarmasmparser \
+	llvmarmdesc \
+	llvmarminfo \
+	llvmarminstprinter \
+	llvmmipsdisassembler \
+	llvmmipscodegen \
+	llvmmipsasmparser \
+	llvmmipsdesc \
+	llvmmipsinfo \
+	llvmmipsinstprinter \
+	llvmpowerpccodegen \
+	llvmpowerpcdesc \
+	llvmpowerpcinfo \
+	llvmpowerpcinstprinter \
+	llvmx86disassembler \
+	llvmx86asmparser \
+	llvmx86codegen \
+	llvmselectiondag \
+	llvmasmprinter \
+	llvmmcparser \
+	llvmcodegen \
+	llvmx86desc \
+	llvmx86info \
+	llvmx86instprinter \
+	llvmx86utils \
+	llvmipo \
+	llvmvectorize \
+	llvmobjcarcopts \
+	llvmscalaropts \
+	llvminstcombine \
+	llvminstrumentation \
+	llvmtransformutils \
+	llvmipa \
+	llvmanalysis \
+	llvmtarget \
+	llvmmc \
+	llvmobject \
+	llvmirreader \
+	llvmasmparser \
+	llvmbitwriter \
+	llvmbitreader \
+	llvmcore \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/opt/opt.1 b/usr.bin/clang/opt/opt.1
new file mode 100644
index 0000000..4ac0caa
--- /dev/null
+++ b/usr.bin/clang/opt/opt.1
@@ -0,0 +1,198 @@
+.\" $FreeBSD$
+.TH "OPT" "1" "2013-06-10" "3.3" "LLVM"
+.SH NAME
+opt \- LLVM optimizer
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBopt\fP [\fIoptions\fP] [\fIfilename\fP]
+.SH DESCRIPTION
+.sp
+The \fBopt\fP command is the modular LLVM optimizer and analyzer.  It
+takes LLVM source files as input, runs the specified optimizations or analyses
+on it, and then outputs the optimized file or the analysis results.  The
+function of \fBopt\fP depends on whether the \fI\-analyze\fP option is
+given.
+.sp
+When \fI\-analyze\fP is specified, \fBopt\fP performs various analyses
+of the input source.  It will usually print the results on standard output, but
+in a few cases, it will print output to standard error or generate a file with
+the analysis output, which is usually done when the output is meant for another
+program.
+.sp
+While \fI\-analyze\fP is \fInot\fP given, \fBopt\fP attempts to produce an
+optimized output file.  The optimizations available via \fBopt\fP depend
+upon what libraries were linked into it as well as any additional libraries
+that have been loaded with the \fI\%-load\fP option.  Use the \fI\%-help\fP
+option to determine what optimizations you can use.
+.sp
+If \fBfilename\fP is omitted from the command line or is "\fB\-\fP", \fBopt\fP
+reads its input from standard input.  Inputs can be in either the LLVM assembly
+language format (\fB.ll\fP) or the LLVM bitcode format (\fB.bc\fP).
+.sp
+If an output filename is not specified with the \fI\%-o\fP option,
+\fBopt\fP writes its output to the standard output.
+.SH OPTIONS
+.INDENT 0.0
+.TP
+.B \-f
+Enable binary output on terminals.  Normally, \fBopt\fP will refuse to
+write raw bitcode output if the output stream is a terminal.  With this option,
+\fBopt\fP will write raw bitcode regardless of the output device.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-help
+Print a summary of command line options.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-o <filename>
+Specify the output filename.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-S
+Write output in LLVM intermediate language (instead of bitcode).
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-{passname}
+\fBopt\fP provides the ability to run any of LLVM\(aqs optimization or
+analysis passes in any order.  The \fI\%-help\fP option lists all the passes
+available.  The order in which the options occur on the command line are the
+order in which they are executed (within pass constraints).
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-std\-compile\-opts
+This is short hand for a standard list of \fIcompile time optimization\fP passes.
+This is typically used to optimize the output from the llvm\-gcc front end.  It
+might be useful for other front end compilers as well.  To discover the full
+set of options available, use the following command:
+.INDENT 7.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+llvm\-as < /dev/null | opt \-std\-compile\-opts \-disable\-output \-debug\-pass=Arguments
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-disable\-inlining
+This option is only meaningful when \fI\%-std-compile-opts\fP is given.  It
+simply removes the inlining pass from the standard list.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-disable\-opt
+This option is only meaningful when \fI\%-std-compile-opts\fP is given.  It
+disables most, but not all, of the \fI\%-std-compile-opts\fP.  The ones that
+remain are \fI\-verify\fP, \fI\-lower\-setjmp\fP, and
+\fI\-funcresolve\fP.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-strip\-debug
+This option causes opt to strip debug information from the module before
+applying other optimizations.  It is essentially the same as \fI\-strip\fP
+but it ensures that stripping of debug information is done first.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-verify\-each
+This option causes opt to add a verify pass after every pass otherwise
+specified on the command line (including \fI\-verify\fP).  This is useful
+for cases where it is suspected that a pass is creating an invalid module but
+it is not clear which pass is doing it.  The combination of
+\fI\%-std-compile-opts\fP and \fI\%-verify-each\fP can quickly track down
+this kind of problem.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-profile\-info\-file <filename>
+Specify the name of the file loaded by the \fB\-profile\-loader\fP option.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-stats
+Print statistics.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-time\-passes
+Record the amount of time needed for each pass and print it to standard
+error.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-debug
+If this is a debug build, this option will enable debug printouts from passes
+which use the \fBDEBUG()\fP macro.  See the \fI\%LLVM Programmer's Manual\fP, section \fB#DEBUG\fP for more information.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-load=<plugin>
+Load the dynamic object \fBplugin\fP.  This object should register new
+optimization or analysis passes.  Once loaded, the object will add new command
+line options to enable various optimizations or analyses.  To see the new
+complete list of optimizations, use the \fI\%-help\fP and \fI\%-load\fP
+options together.  For example:
+.INDENT 7.0
+.INDENT 3.5
+.sp
+.nf
+.ft C
+opt \-load=plugin.so \-help
+.ft P
+.fi
+.UNINDENT
+.UNINDENT
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-p
+Print module after each transformation.
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBopt\fP succeeds, it will exit with 0.  Otherwise, if an error
+occurs, it will exit with a non\-zero value.
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
diff --git a/usr.bin/clang/tblgen/Makefile b/usr.bin/clang/tblgen/Makefile
new file mode 100644
index 0000000..f06150e
--- /dev/null
+++ b/usr.bin/clang/tblgen/Makefile
@@ -0,0 +1,45 @@
+# $FreeBSD$
+
+.include <bsd.own.mk>
+
+PROG_CXX=tblgen
+
+SRCDIR=	utils/TableGen
+SRCS=	AsmMatcherEmitter.cpp \
+	AsmWriterEmitter.cpp \
+	AsmWriterInst.cpp \
+	CTagsEmitter.cpp \
+	CallingConvEmitter.cpp \
+	CodeEmitterGen.cpp \
+	CodeGenDAGPatterns.cpp \
+	CodeGenInstruction.cpp \
+	CodeGenMapTable.cpp \
+	CodeGenRegisters.cpp \
+	CodeGenSchedule.cpp \
+	CodeGenTarget.cpp \
+	DAGISelEmitter.cpp \
+	DAGISelMatcher.cpp \
+	DAGISelMatcherEmitter.cpp \
+	DAGISelMatcherGen.cpp \
+	DAGISelMatcherOpt.cpp \
+	DFAPacketizerEmitter.cpp \
+	DisassemblerEmitter.cpp \
+	FastISelEmitter.cpp \
+	FixedLenDecoderEmitter.cpp \
+	InstrInfoEmitter.cpp \
+	IntrinsicEmitter.cpp \
+	OptParserEmitter.cpp \
+	PseudoLoweringEmitter.cpp \
+	RegisterInfoEmitter.cpp \
+	SetTheory.cpp \
+	SubtargetEmitter.cpp \
+	TGValueTypes.cpp \
+	TableGen.cpp \
+	X86DisassemblerTables.cpp \
+	X86ModRMFilters.cpp \
+	X86RecognizableInstr.cpp
+
+LIBDEPS=llvmtablegen \
+	llvmsupport
+
+.include "../clang.prog.mk"
diff --git a/usr.bin/clang/tblgen/tblgen.1 b/usr.bin/clang/tblgen/tblgen.1
new file mode 100644
index 0000000..b0d0697
--- /dev/null
+++ b/usr.bin/clang/tblgen/tblgen.1
@@ -0,0 +1,182 @@
+.\" $FreeBSD$
+.TH "TBLGEN" "1" "2013-04-11" "3.3" "LLVM"
+.SH NAME
+tblgen \- Target Description To C++ Code Generator
+.
+.nr rst2man-indent-level 0
+.
+.de1 rstReportMargin
+\\$1 \\n[an-margin]
+level \\n[rst2man-indent-level]
+level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
+-
+\\n[rst2man-indent0]
+\\n[rst2man-indent1]
+\\n[rst2man-indent2]
+..
+.de1 INDENT
+.\" .rstReportMargin pre:
+. RS \\$1
+. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
+. nr rst2man-indent-level +1
+.\" .rstReportMargin post:
+..
+.de UNINDENT
+. RE
+.\" indent \\n[an-margin]
+.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.nr rst2man-indent-level -1
+.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
+.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
+..
+.\" Man page generated from reStructuredText.
+.
+.SH SYNOPSIS
+.sp
+\fBtblgen\fP [\fIoptions\fP] [\fIfilename\fP]
+.SH DESCRIPTION
+.sp
+\fBtblgen\fP translates from target description (\fB.td\fP) files into C++
+code that can be included in the definition of an LLVM target library.  Most
+users of LLVM will not need to use this program.  It is only for assisting with
+writing an LLVM target backend.
+.sp
+The input and output of \fBtblgen\fP is beyond the scope of this short
+introduction.  Please see \fB../TableGenFundamentals\fP.
+.sp
+The \fIfilename\fP argument specifies the name of a Target Description (\fB.td\fP)
+file to read as input.
+.SH OPTIONS
+.INDENT 0.0
+.TP
+.B \-help
+Print a summary of command line options.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-o filename
+Specify the output file name.  If \fBfilename\fP is \fB\-\fP, then
+\fBtblgen\fP sends its output to standard output.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-I directory
+Specify where to find other target description files for inclusion.  The
+\fBdirectory\fP value should be a full or partial path to a directory that
+contains target description files.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-asmparsernum N
+Make \-gen\-asm\-parser emit assembly writer number \fBN\fP.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-asmwriternum N
+Make \-gen\-asm\-writer emit assembly writer number \fBN\fP.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-class className
+Print the enumeration list for this class.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-print\-records
+Print all records to standard output (default).
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-print\-enums
+Print enumeration values for a class.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-print\-sets
+Print expanded sets for testing DAG exprs.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-emitter
+Generate machine code emitter.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-register\-info
+Generate registers and register classes info.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-instr\-info
+Generate instruction descriptions.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-asm\-writer
+Generate the assembly writer.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-disassembler
+Generate disassembler.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-pseudo\-lowering
+Generate pseudo instruction lowering.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-dag\-isel
+Generate a DAG (Directed Acycle Graph) instruction selector.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-asm\-matcher
+Generate assembly instruction matcher.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-dfa\-packetizer
+Generate DFA Packetizer for VLIW targets.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-fast\-isel
+Generate a "fast" instruction selector.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-subtarget
+Generate subtarget enumerations.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-intrinsic
+Generate intrinsic information.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-tgt\-intrinsic
+Generate target intrinsic information.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-gen\-enhanced\-disassembly\-info
+Generate enhanced disassembly info.
+.UNINDENT
+.INDENT 0.0
+.TP
+.B \-version
+Show the version number of this program.
+.UNINDENT
+.SH EXIT STATUS
+.sp
+If \fBtblgen\fP succeeds, it will exit with 0.  Otherwise, if an error
+occurs, it will exit with a non\-zero value.
+.SH AUTHOR
+Maintained by The LLVM Team (http://llvm.org/).
+.SH COPYRIGHT
+2003-2013, LLVM Project
+.\" Generated by docutils manpage writer.
+.
