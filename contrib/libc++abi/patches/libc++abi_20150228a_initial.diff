commit 0aa734037c0bfbd7e98f449c459516e56869e6e9
Author: Patrick Wildt <patrick@blueri.se>
Date:   Wed Feb 18 22:15:12 2015 +0100

    libc++/abi: Reapply patches.
    
    This also adds C++ exception support for ARM.

diff --git a/contrib/libc++abi/src/Unwind/AddressSpace.hpp b/contrib/libc++abi/src/Unwind/AddressSpace.hpp
index 4e94afc..f2223ad 100644
--- a/contrib/libc++abi/src/Unwind/AddressSpace.hpp
+++ b/contrib/libc++abi/src/Unwind/AddressSpace.hpp
@@ -324,6 +324,85 @@ inline LocalAddressSpace::pint_t LocalAddressSpace::getEncodedP(pint_t &addr,
   #endif
 #endif
 
+#if __Bitrig__
+  #include <link_elf.h>
+  #define PT_EH_FRAME_HDR (PT_LOOS + 0x474e550)
+
+  struct dl_unwind_sections
+  {
+    uintptr_t                    base;
+    const void                  *dwarf_section;
+    uintptr_t                    dwarf_section_length;
+    const void                  *compact_unwind_section;
+    uintptr_t                    compact_unwind_section_length;
+  };
+
+  struct eh_frame_hdr
+  {
+    uint8_t version;
+    uint8_t eh_frame_ptr_enc;
+    uint8_t fde_count_enc;
+    uint8_t table_enc;
+    uint8_t data[0];
+  };
+
+  struct _dl_iterate_struct
+  {
+    Elf_Addr			 addr;
+    Elf_Addr			 base;
+    Elf_Phdr			*eh_frame_hdr;
+  };
+
+  static int _dl_iterate_cb(struct dl_phdr_info *dlpi, size_t size, void* data) {
+    struct _dl_iterate_struct *dlis = (struct _dl_iterate_struct *)data;
+    Elf_Phdr *phdr = (Elf_Phdr *)dlpi->dlpi_phdr;
+    int idx, found = 0;
+
+    for (idx = 0; idx < dlpi->dlpi_phnum; idx++, phdr++) {
+      if (phdr->p_type == PT_LOAD) {
+        Elf_Addr vaddr = dlpi->dlpi_addr + phdr->p_vaddr;
+        if (dlis->addr >= vaddr && dlis->addr < (vaddr + phdr->p_memsz))
+          found = 1;
+      } else if (phdr->p_type == PT_EH_FRAME_HDR)
+        dlis->eh_frame_hdr = phdr;
+    }
+
+    dlis->base = dlpi->dlpi_addr;
+    return found;
+  }
+
+  static inline bool _dl_find_unwind_sections(void *addr,
+      dl_unwind_sections *info) {
+
+    LocalAddressSpace::pint_t encoded, end;
+    struct _dl_iterate_struct dlis;
+    struct eh_frame_hdr *ehfh;
+    Elf_Phdr *phdr;
+    int idx;
+
+    dlis.addr = (Elf_Addr)addr;
+    if (!dl_iterate_phdr(_dl_iterate_cb, &dlis))
+      return false;
+
+    phdr = (Elf_Phdr *)dlis.eh_frame_hdr;
+    ehfh = (struct eh_frame_hdr *)(dlis.base + phdr->p_vaddr);
+
+    encoded = (LocalAddressSpace::pint_t)&ehfh->data;
+    end = (LocalAddressSpace::pint_t)ehfh + phdr->p_memsz;
+
+    // Fill in return struct.
+    info->base = dlis.base;
+    info->dwarf_section = (const void *)LocalAddressSpace::sThisAddressSpace
+        .getEncodedP(encoded, end, ehfh->eh_frame_ptr_enc);
+    /* XXX: We don't know how big it is, shouldn't be bigger than this. */
+    info->dwarf_section_length = 0x00ffffff;
+    info->compact_unwind_section = 0;
+    info->compact_unwind_section_length = 0;
+
+    return true;
+  }
+#endif
+
 inline bool LocalAddressSpace::findUnwindSections(pint_t targetAddr,
                                                   UnwindInfoSections &info) {
 #if __APPLE__
@@ -338,6 +417,18 @@ inline bool LocalAddressSpace::findUnwindSections(pint_t targetAddr,
     info.compact_unwind_section_length = dyldInfo.compact_unwind_section_length;
     return true;
   }
+#elif __Bitrig__
+  dl_unwind_sections dlInfo;
+  if (_dl_find_unwind_sections((void *)targetAddr, &dlInfo)) {
+    info.dso_base                      = (uintptr_t)dlInfo.base;
+ #if _LIBUNWIND_SUPPORT_DWARF_UNWIND
+    info.dwarf_section                 = (uintptr_t)dlInfo.dwarf_section;
+    info.dwarf_section_length          = dlInfo.dwarf_section_length;
+ #endif
+    info.compact_unwind_section        = (uintptr_t)dlInfo.compact_unwind_section;
+    info.compact_unwind_section_length = dlInfo.compact_unwind_section_length;
+    return true;
+  }
 #elif LIBCXXABI_ARM_EHABI
  #if _LIBUNWIND_IS_BAREMETAL
   // Bare metal is statically linked, so no need to ask the dynamic loader
diff --git a/contrib/libc++abi/src/Unwind/Registers.hpp b/contrib/libc++abi/src/Unwind/Registers.hpp
index 8c1acfc..aefca6b 100644
--- a/contrib/libc++abi/src/Unwind/Registers.hpp
+++ b/contrib/libc++abi/src/Unwind/Registers.hpp
@@ -1289,7 +1289,7 @@ public:
   Registers_arm(const void *registers);
 
   bool        validRegister(int num) const;
-  uint32_t    getRegister(int num);
+  uint32_t    getRegister(int num) const;
   void        setRegister(int num, uint32_t value);
   bool        validFloatRegister(int num) const;
   unw_fpreg_t getFloatRegister(int num);
@@ -1302,6 +1302,7 @@ public:
     restoreSavedFloatRegisters();
     restoreCoreAndJumpTo();
   }
+  static int  lastDwarfRegNum() { return 14; }
 
   uint32_t  getSP() const         { return _registers.__sp; }
   void      setSP(uint32_t value) { _registers.__sp = value; }
@@ -1366,7 +1367,7 @@ private:
   // Whether iWMMX data registers are saved.
   bool _saved_iwmmx;
   // Whether iWMMX control registers are saved.
-  bool _saved_iwmmx_control;
+  mutable bool _saved_iwmmx_control;
   // VFP registers D0-D15, + padding if saved using FSTMX
   unw_fpreg_t _vfp_d0_d15_pad[17];
   // VFPv3 registers D16-D31, always saved using FSTMD
@@ -1420,7 +1421,7 @@ inline bool Registers_arm::validRegister(int regNum) const {
   return false;
 }
 
-inline uint32_t Registers_arm::getRegister(int regNum) {
+inline uint32_t Registers_arm::getRegister(int regNum) const {
   if (regNum == UNW_REG_SP || regNum == UNW_ARM_SP)
     return _registers.__sp;
   if (regNum == UNW_ARM_LR)
@@ -1432,7 +1433,7 @@ inline uint32_t Registers_arm::getRegister(int regNum) {
   if (regNum >= UNW_ARM_WC0 && regNum <= UNW_ARM_WC3) {
     if (!_saved_iwmmx_control) {
       _saved_iwmmx_control = true;
-      saveiWMMXControl(_iwmmx_control);
+      saveiWMMXControl((uint32_t *)_iwmmx_control);
     }
     return _iwmmx_control[regNum - UNW_ARM_WC0];
   }
@@ -1451,7 +1452,7 @@ inline void Registers_arm::setRegister(int regNum, uint32_t value) {
   else if (regNum >= UNW_ARM_WC0 && regNum <= UNW_ARM_WC3) {
     if (!_saved_iwmmx_control) {
       _saved_iwmmx_control = true;
-      saveiWMMXControl(_iwmmx_control);
+      saveiWMMXControl((uint32_t *)_iwmmx_control);
     }
     _iwmmx_control[regNum - UNW_ARM_WC0] = value;
   } else
diff --git a/contrib/libc++abi/src/Unwind/UnwindCursor.hpp b/contrib/libc++abi/src/Unwind/UnwindCursor.hpp
index ccacd6e..0530529 100644
--- a/contrib/libc++abi/src/Unwind/UnwindCursor.hpp
+++ b/contrib/libc++abi/src/Unwind/UnwindCursor.hpp
@@ -467,6 +467,10 @@ private:
         _info.format, _info.start_ip, _addressSpace, _registers);
   }
 
+  int stepWithCompactEncoding(Registers_arm &) {
+    return UNW_EINVAL;
+  }
+
   bool compactSaysUseDwarf(uint32_t *offset=NULL) const {
     R dummy;
     return compactSaysUseDwarf(dummy, offset);
@@ -502,6 +506,10 @@ private:
     }
     return false;
   }
+
+  bool compactSaysUseDwarf(Registers_arm &, uint32_t *) const {
+    return true;
+  }
 #endif // _LIBUNWIND_SUPPORT_COMPACT_UNWIND
 
 #if _LIBUNWIND_SUPPORT_DWARF_UNWIND
@@ -525,6 +533,10 @@ private:
   compact_unwind_encoding_t dwarfEncoding(Registers_arm64 &) const {
     return UNWIND_ARM64_MODE_DWARF;
   }
+
+  compact_unwind_encoding_t dwarfEncoding(Registers_arm &) const {
+    return 0;
+  }
 #endif // _LIBUNWIND_SUPPORT_DWARF_UNWIND
 
 
diff --git a/contrib/libc++abi/src/Unwind/UnwindRegistersRestore.S b/contrib/libc++abi/src/Unwind/UnwindRegistersRestore.S
index 7dd3a11..8c87d46 100644
--- a/contrib/libc++abi/src/Unwind/UnwindRegistersRestore.S
+++ b/contrib/libc++abi/src/Unwind/UnwindRegistersRestore.S
@@ -347,7 +347,7 @@ DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm20restoreCoreAndJu
 @  values pointer is in r0
 @
   .p2align 2
-DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm19restoreVFPWithFLDMDEPy)
+DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm19restoreVFPWithFLDMDEPd)
 #if defined(__ARM_FP)
   @ VFP and iwMMX instructions are only available when compiling with the flags
   @ that enable them. We do not want to do that in the library (because we do not
@@ -371,7 +371,7 @@ DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm19restoreVFPWithFL
 @  values pointer is in r0
 @
   .p2align 2
-DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm19restoreVFPWithFLDMXEPy)
+DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm19restoreVFPWithFLDMXEPd)
 #if defined(__ARM_FP)
 #if __ARM_ARCH < 7
   ldc p11, cr0, [r0], {0x21}  @ fldmiax r0, {d0-d15}
@@ -388,7 +388,7 @@ DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm19restoreVFPWithFL
 @  values pointer is in r0
 @
   .p2align 2
-DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm12restoreVFPv3EPy)
+DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm12restoreVFPv3EPd)
 #if defined(__ARM_FP)
 #ifndef __ARM_NEON
   ldcl p11, cr0, [r0], {0x20}  @ vldm r0, {d16-d31}
@@ -405,7 +405,7 @@ DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm12restoreVFPv3EPy)
 @  values pointer is in r0
 @
   .p2align 2
-DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm12restoreiWMMXEPy)
+DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm12restoreiWMMXEPd)
 #if (!defined(__ARM_ARCH_6M__) && !defined(__ARM_ARCH_6SM__)) || __ARM_WMMX
   ldcl p1, cr0, [r0], #8  @ wldrd wR0, [r0], #8
   ldcl p1, cr1, [r0], #8  @ wldrd wR1, [r0], #8
diff --git a/contrib/libc++abi/src/Unwind/UnwindRegistersSave.S b/contrib/libc++abi/src/Unwind/UnwindRegistersSave.S
index d6b9a41..de5da70 100644
--- a/contrib/libc++abi/src/Unwind/UnwindRegistersSave.S
+++ b/contrib/libc++abi/src/Unwind/UnwindRegistersSave.S
@@ -326,7 +326,7 @@ DEFINE_LIBUNWIND_FUNCTION(unw_getcontext)
 @  values pointer is in r0
 @
   .p2align 2
-DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm16saveVFPWithFSTMDEPy)
+DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm16saveVFPWithFSTMDEPd)
 #if defined(__ARM_FP)
 #if __ARM_ARCH < 7
   stc p11, cr0, [r0], {0x20}  @ fstmiad r0, {d0-d15}
@@ -343,7 +343,7 @@ DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm16saveVFPWithFSTMD
 @  values pointer is in r0
 @
   .p2align 2
-DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm16saveVFPWithFSTMXEPy)
+DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm16saveVFPWithFSTMXEPd)
 #if defined(__ARM_FP)
 #if __ARM_ARCH < 7
   stc p11, cr0, [r0], {0x21}  @ fstmiax r0, {d0-d15}
@@ -360,7 +360,7 @@ DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm16saveVFPWithFSTMX
 @  values pointer is in r0
 @
   .p2align 2
-DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm9saveVFPv3EPy)
+DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm9saveVFPv3EPd)
 #if defined(__ARM_FP)
   @ VFP and iwMMX instructions are only available when compiling with the flags
   @ that enable them. We do not want to do that in the library (because we do not
@@ -384,7 +384,7 @@ DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm9saveVFPv3EPy)
 @  values pointer is in r0
 @
   .p2align 2
-DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm9saveiWMMXEPy)
+DEFINE_LIBUNWIND_PRIVATE_FUNCTION(_ZN9libunwind13Registers_arm9saveiWMMXEPd)
 #if (!defined(__ARM_ARCH_6M__) && !defined(__ARM_ARCH_6SM__)) || __ARM_WMMX
   stcl p1, cr0, [r0], #8  @ wstrd wR0, [r0], #8
   stcl p1, cr1, [r0], #8  @ wstrd wR1, [r0], #8
diff --git a/contrib/libc++abi/src/Unwind/config.h b/contrib/libc++abi/src/Unwind/config.h
index 6b459ee..87426ee 100644
--- a/contrib/libc++abi/src/Unwind/config.h
+++ b/contrib/libc++abi/src/Unwind/config.h
@@ -57,6 +57,17 @@
     #define _LIBUNWIND_SUPPORT_DWARF_INDEX    0
   #endif
 
+#elif __Bitrig__
+  #define _LIBUNWIND_BUILD_ZERO_COST_APIS (__i386__ || __x86_64__ || __arm64__ || __arm__)
+  #define _LIBUNWIND_BUILD_SJLJ_APIS      0
+  #define _LIBUNWIND_SUPPORT_FRAME_APIS   (__i386__ || __x86_64__)
+  #define _LIBUNWIND_EXPORT               __attribute__((visibility("default")))
+  #define _LIBUNWIND_HIDDEN               __attribute__((visibility("hidden")))
+  #define _LIBUNWIND_LOG(msg, ...) fprintf(stderr, "libuwind: " msg, __VA_ARGS__)
+  #define _LIBUNWIND_ABORT(msg) __assert2(__FILE__, __LINE__, __func__, msg)
+  #define _LIBUNWIND_SUPPORT_COMPACT_UNWIND 1
+  #define _LIBUNWIND_SUPPORT_DWARF_UNWIND   1
+  #define _LIBUNWIND_SUPPORT_DWARF_INDEX    0
 #else
   #include <stdlib.h>
 
diff --git a/contrib/libc++abi/src/Unwind/libunwind.cpp b/contrib/libc++abi/src/Unwind/libunwind.cpp
index b80beaf..d104522 100644
--- a/contrib/libc++abi/src/Unwind/libunwind.cpp
+++ b/contrib/libc++abi/src/Unwind/libunwind.cpp
@@ -55,7 +55,7 @@ _LIBUNWIND_EXPORT int unw_init_local(unw_cursor_t *cursor,
 #elif __arm64__
   new ((void *)cursor) UnwindCursor<LocalAddressSpace, Registers_arm64>(
                                  context, LocalAddressSpace::sThisAddressSpace);
-#elif LIBCXXABI_ARM_EHABI
+#elif __arm__
   new ((void *)cursor) UnwindCursor<LocalAddressSpace, Registers_arm>(
                                  context, LocalAddressSpace::sThisAddressSpace);
 #endif
